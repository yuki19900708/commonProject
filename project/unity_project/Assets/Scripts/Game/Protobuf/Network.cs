// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: network.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameProto {

  /// <summary>Holder for reflection information generated from network.proto</summary>
  public static partial class NetworkReflection {

    #region Descriptor
    /// <summary>File descriptor for network.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1uZXR3b3JrLnByb3RvEglHYW1lUHJvdG8aD2dhbWVfZGF0YS5wcm90byLO",
            "AQoLTG9naW5fZXZlbnQSJgoEdHlwZRgBIAEoDjIYLkdhbWVQcm90by5QbGF0",
            "Zm9ybV90eXBlEg8KB2FjY291bnQYAiABKAkSEAoIcGFzc3dvcmQYAyABKAkS",
            "EAoIcGxhdGZvcm0YBCABKAkSDwoHdmVyc2lvbhgFIAEoCRIPCgdyZW1hcmtz",
            "GAYgASgJEg8KB2NvdW50cnkYByABKAkSDgoGdHVubmVsGAggASgJEgwKBHRp",
            "bWUYCSABKAQSEQoJZXF1aXBtZW50GAogASgJInMKEExvZ2luX2JpbmRfZXZl",
            "bnQSDwoHYWNjb3VudBgBIAEoCRImCgR0eXBlGAIgASgOMhguR2FtZVByb3Rv",
            "LlBsYXRmb3JtX3R5cGUSFAoMcGxhdGZvcm1fdWlkGAMgASgJEhAKCGljb25f",
            "dXJsGAQgASgJIikKEUxvZ2luX3VwZGF0ZV9tYWlsEhQKDG1haWxfYWRkcmVz",
            "cxgBIAEoCSK/AQoOTG9naW5fcmVzcG9uc2USJwoGc3RhdHVzGAEgASgOMhcu",
            "R2FtZVByb3RvLkxvZ2luX3N0YXR1cxImCgR0eXBlGAIgASgOMhguR2FtZVBy",
            "b3RvLlBsYXRmb3JtX3R5cGUSFAoMcGxhdGZvcm1fdWlkGAMgASgJEg8KB3Vz",
            "ZXJfaWQYBCABKA0SDwoHYWNjb3VudBgFIAEoCRIQCghwYXNzd29yZBgGIAEo",
            "CRISCgplcnJvcl9jb2RlGAcgASgNInQKC0ZyaWVuZF9kYXRhEg8KB3VzZXJf",
            "aWQYASABKA0SJgoGcGxheWVyGAIgASgLMhYuR2FtZVByb3RvLlBsYXllcl9k",
            "YXRhEiwKCWVzc2VudGlhbBgDIAEoCzIZLkdhbWVQcm90by5Fc3NlbnRpYWxf",
            "ZGF0YSI4ChBGcmllbmRfZGF0YV9saXN0EiQKBGxpc3QYASADKAsyFi5HYW1l",
            "UHJvdG8uRnJpZW5kX2RhdGEiawoQQWN0X2ZyaWVuZF9ldmVudBIoCgR0eXBl",
            "GAEgASgOMhouR2FtZVByb3RvLkFjdF9mcmllbmRfdHlwZRITCgtkc3RfdXNl",
            "cl9pZBgCIAEoDRIYChBkZWxldGVfYWxsX2FwcGx5GAMgASgIIoYBChNBY3Rf",
            "ZnJpZW5kX3Jlc3BvbnNlEi0KBnN0YXR1cxgBIAEoDjIdLkdhbWVQcm90by5H",
            "YW1lX2NvbW1vbl9zdGF0dXMSKwoLZnJpZW5kX2RhdGEYAiABKAsyFi5HYW1l",
            "UHJvdG8uRnJpZW5kX2RhdGESEwoLZHN0X3VzZXJfaWQYAyABKA0iJgoRRmlu",
            "ZF9mcmllbmRfZXZlbnQSEQoJdXNlcl9uYW1lGAEgASgJInIKFEZpbmRfZnJp",
            "ZW5kX3Jlc3BvbnNlEi0KBnN0YXR1cxgBIAEoDjIdLkdhbWVQcm90by5HYW1l",
            "X2NvbW1vbl9zdGF0dXMSKwoLZnJpZW5kX2xpc3QYAiADKAsyFi5HYW1lUHJv",
            "dG8uRnJpZW5kX2RhdGEiYQoPRnJpZW5kX2FwX2V2ZW50EiQKBHR5cGUYASAB",
            "KA4yFi5HYW1lUHJvdG8uQWN0X2FwX3R5cGUSKAoHaWRfbGlzdBgCIAEoCzIX",
            "LkdhbWVQcm90by5Vc2VyX2lkX2xpc3QisAEKEkZyaWVuZF9hcF9yZXNwb25z",
            "ZRItCgZzdGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25fc3Rh",
            "dHVzEioKCXNlbmRfbGlzdBgCIAEoCzIXLkdhbWVQcm90by5Vc2VyX2lkX2xp",
            "c3QSKgoJcmVjdl9saXN0GAMgASgLMhcuR2FtZVByb3RvLlVzZXJfaWRfbGlz",
            "dBITCgtkc3RfdXNlcl9pZBgEIAEoDSIvCgxSZWN2X2FwX2RhdGESDwoHdXNl",
            "cl9pZBgBIAEoDRIOCgZpc19nZXQYAiABKAgiNQoMUmVjdl9hcF9saXN0EiUK",
            "BGxpc3QYASADKAsyFy5HYW1lUHJvdG8uUmVjdl9hcF9kYXRhIhwKDFVzZXJf",
            "aWRfbGlzdBIMCgRsaXN0GAEgAygNIpcCChRGcmllbmRfbGlzdF9yZXNwb25z",
            "ZRItCgZzdGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25fc3Rh",
            "dHVzEjAKC2ZyaWVuZF9saXN0GAIgASgLMhsuR2FtZVByb3RvLkZyaWVuZF9k",
            "YXRhX2xpc3QSKgoJc2VuZF9saXN0GAMgASgLMhcuR2FtZVByb3RvLlVzZXJf",
            "aWRfbGlzdBIqCglyZWN2X2xpc3QYBCABKAsyFy5HYW1lUHJvdG8uUmVjdl9h",
            "cF9saXN0Ei8KCmFwcGx5X2xpc3QYBSABKAsyGy5HYW1lUHJvdG8uRnJpZW5k",
            "X2RhdGFfbGlzdBIVCg1hcF9yZXNldF90aW1lGAYgASgEIpIBCgpDaGF0X2V2",
            "ZW50Eg8KB3VzZXJfaWQYASABKA0SJgoGcGxheWVyGAIgASgLMhYuR2FtZVBy",
            "b3RvLlBsYXllcl9kYXRhEiwKCWVzc2VudGlhbBgDIAEoCzIZLkdhbWVQcm90",
            "by5Fc3NlbnRpYWxfZGF0YRIPCgdtc2dfYnVmGAQgASgJEgwKBHRpbWUYBSAB",
            "KAQiPgoNQ2hhdF9yZXNwb25zZRItCgZzdGF0dXMYASABKA4yHS5HYW1lUHJv",
            "dG8uR2FtZV9jb21tb25fc3RhdHVzIioKE0dldF9tb3JlX2luZm9fZXZlbnQS",
            "EwoLZHN0X3VzZXJfaWQYASABKA0i1QIKFkdldF9tb3JlX2luZm9fcmVzcG9u",
            "c2USLQoGc3RhdHVzGAEgASgOMh0uR2FtZVByb3RvLkdhbWVfY29tbW9uX3N0",
            "YXR1cxImCgZwbGF5ZXIYAiABKAsyFi5HYW1lUHJvdG8uUGxheWVyX2RhdGES",
            "LAoJZXNzZW50aWFsGAMgASgLMhkuR2FtZVByb3RvLkVzc2VudGlhbF9kYXRh",
            "EjcKEXBsdW5kZXJfYXJteV9kYXRhGAQgASgLMhwuR2FtZVByb3RvLlBsdW5k",
            "ZXJfYXJteV9kYXRhEjQKDWFsbGlhbmNlX2Jhc2UYBSABKAsyHS5HYW1lUHJv",
            "dG8uQWxsaWFuY2VfYmFzZV9kYXRhEhMKC2RzdF91c2VyX2lkGAYgASgNEjIK",
            "CmJsYWNrX3RlY2gYByABKAsyHi5HYW1lUHJvdG8uQWxsaWFuY2VfYmxhY2tf",
            "dGVjaCIrChRBcHBseV9hbGxpYW5jZV9ldmVudBITCgthbGxpYW5jZV9pZBgB",
            "IAEoDSIqChNKb2luX2FsbGlhbmNlX2V2ZW50EhMKC2FsbGlhbmNlX2lkGAEg",
            "ASgNIpICChZKb2luX2FsbGlhbmNlX3Jlc3BvbnNlEi0KBnN0YXR1cxgBIAEo",
            "DjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMSMAoJYmFzZV9kYXRh",
            "GAIgASgLMh0uR2FtZVByb3RvLkFsbGlhbmNlX2Jhc2VfZGF0YRIwCgl1c2Vy",
            "X2xpc3QYAyADKAsyHS5HYW1lUHJvdG8uQWxsaWFuY2VfdXNlcl9kYXRhEjEK",
            "CmFwcGx5X2xpc3QYBCADKAsyHS5HYW1lUHJvdG8uQWxsaWFuY2VfdXNlcl9k",
            "YXRhEjIKCmJsYWNrX3RlY2gYBSABKAsyHi5HYW1lUHJvdG8uQWxsaWFuY2Vf",
            "YmxhY2tfdGVjaCIsChhSZWNvbW1lbmRfYWxsaWFuY2VfZXZlbnQSEAoIbGFu",
            "Z3VhZ2UYASABKAkifgobUmVjb21tZW5kX2FsbGlhbmNlX3Jlc3BvbnNlEi0K",
            "BnN0YXR1cxgBIAEoDjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMS",
            "MAoJYmFzZV9saXN0GAIgAygLMh0uR2FtZVByb3RvLkFsbGlhbmNlX2Jhc2Vf",
            "ZGF0YSIlChVTZWFyY2hfYWxsaWFuY2VfZXZlbnQSDAoEbmFtZRgBIAEoCSJ7",
            "ChhTZWFyY2hfYWxsaWFuY2VfcmVzcG9uc2USLQoGc3RhdHVzGAEgASgOMh0u",
            "R2FtZVByb3RvLkdhbWVfY29tbW9uX3N0YXR1cxIwCgliYXNlX2xpc3QYAiAD",
            "KAsyHS5HYW1lUHJvdG8uQWxsaWFuY2VfYmFzZV9kYXRhIioKE0FsbGlhbmNl",
            "X2RhdGFfZXZlbnQSEwoLYWxsaWFuY2VfaWQYASABKA0ikgIKFkFsbGlhbmNl",
            "X2RhdGFfcmVzcG9uc2USLQoGc3RhdHVzGAEgASgOMh0uR2FtZVByb3RvLkdh",
            "bWVfY29tbW9uX3N0YXR1cxIwCgliYXNlX2RhdGEYAiABKAsyHS5HYW1lUHJv",
            "dG8uQWxsaWFuY2VfYmFzZV9kYXRhEjAKCXVzZXJfbGlzdBgDIAMoCzIdLkdh",
            "bWVQcm90by5BbGxpYW5jZV91c2VyX2RhdGESMQoKYXBwbHlfbGlzdBgEIAMo",
            "CzIdLkdhbWVQcm90by5BbGxpYW5jZV91c2VyX2RhdGESMgoKYmxhY2tfdGVj",
            "aBgFIAEoCzIeLkdhbWVQcm90by5BbGxpYW5jZV9ibGFja190ZWNoIkkKFUNy",
            "ZWF0ZV9hbGxpYW5jZV9ldmVudBIwCgliYXNlX2RhdGEYASABKAsyHS5HYW1l",
            "UHJvdG8uQWxsaWFuY2VfYmFzZV9kYXRhIpQCChhDcmVhdGVfYWxsaWFuY2Vf",
            "cmVzcG9uc2USLQoGc3RhdHVzGAEgASgOMh0uR2FtZVByb3RvLkdhbWVfY29t",
            "bW9uX3N0YXR1cxIwCgliYXNlX2RhdGEYAiABKAsyHS5HYW1lUHJvdG8uQWxs",
            "aWFuY2VfYmFzZV9kYXRhEjAKCXVzZXJfbGlzdBgDIAMoCzIdLkdhbWVQcm90",
            "by5BbGxpYW5jZV91c2VyX2RhdGESMQoKYXBwbHlfbGlzdBgEIAMoCzIdLkdh",
            "bWVQcm90by5BbGxpYW5jZV91c2VyX2RhdGESMgoKYmxhY2tfdGVjaBgFIAEo",
            "CzIeLkdhbWVQcm90by5BbGxpYW5jZV9ibGFja190ZWNoIkkKFUFsbGlhbmNl",
            "X3VwZGF0ZV9ldmVudBIwCgliYXNlX2RhdGEYASABKAsyHS5HYW1lUHJvdG8u",
            "QWxsaWFuY2VfYmFzZV9kYXRhInsKGEFsbGlhbmNlX3VwZGF0ZV9yZXNwb25z",
            "ZRItCgZzdGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25fc3Rh",
            "dHVzEjAKCWJhc2VfZGF0YRgCIAEoCzIdLkdhbWVQcm90by5BbGxpYW5jZV9i",
            "YXNlX2RhdGEiLQoaQWxsaWFuY2VfYWdyZWVfYXBwbHlfZXZlbnQSDwoHdXNl",
            "cl9pZBgBIAEoDSKAAQodQWxsaWFuY2VfYWdyZWVfYXBwbHlfcmVzcG9uc2US",
            "LQoGc3RhdHVzGAEgASgOMh0uR2FtZVByb3RvLkdhbWVfY29tbW9uX3N0YXR1",
            "cxIwCgl1c2VyX2xpc3QYAiADKAsyHS5HYW1lUHJvdG8uQWxsaWFuY2VfdXNl",
            "cl9kYXRhIi4KG0FsbGlhbmNlX2RlbGV0ZV9hcHBseV9ldmVudBIPCgd1c2Vy",
            "X2lkGAEgASgNIoIBCh5BbGxpYW5jZV9kZWxldGVfYXBwbHlfcmVzcG9uc2US",
            "LQoGc3RhdHVzGAEgASgOMh0uR2FtZVByb3RvLkdhbWVfY29tbW9uX3N0YXR1",
            "cxIxCgphcHBseV9saXN0GAIgAygLMh0uR2FtZVByb3RvLkFsbGlhbmNlX3Vz",
            "ZXJfZGF0YSIwCh1BbGxpYW5jZV9hcHBvaW50X2xlYWRlcl9ldmVudBIPCgd1",
            "c2VyX2lkGAEgASgNIoMBCiBBbGxpYW5jZV9hcHBvaW50X2xlYWRlcl9yZXNw",
            "b25zZRItCgZzdGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25f",
            "c3RhdHVzEjAKCWJhc2VfZGF0YRgCIAEoCzIdLkdhbWVQcm90by5BbGxpYW5j",
            "ZV9iYXNlX2RhdGEiLgobQWxsaWFuY2Vfa2lja291dF91c2VyX2V2ZW50Eg8K",
            "B3VzZXJfaWQYASABKA0igQEKHkFsbGlhbmNlX2tpY2tvdXRfdXNlcl9yZXNw",
            "b25zZRItCgZzdGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25f",
            "c3RhdHVzEjAKCXVzZXJfbGlzdBgCIAMoCzIdLkdhbWVQcm90by5BbGxpYW5j",
            "ZV91c2VyX2RhdGEiKgoTQWxsaWFuY2VfcXVpdF9ldmVudBITCgthbGxpYW5j",
            "ZV9pZBgBIAEoDSJWChVBbGxpYW5jZV9kb25hdGVfZXZlbnQSLgoKYmxhY2tf",
            "dHlwZRgBIAEoDjIaLkdhbWVQcm90by5CbGFja190ZWNoX3R5cGUSDQoFY291",
            "bnQYAiABKAQifQoYQWxsaWFuY2VfZG9uYXRlX3Jlc3BvbnNlEi0KBnN0YXR1",
            "cxgBIAEoDjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMSMgoKYmxh",
            "Y2tfdGVjaBgCIAEoCzIeLkdhbWVQcm90by5BbGxpYW5jZV9ibGFja190ZWNo",
            "IloKFEFsbGlhbmNlX2lkX3Jlc3BvbnNlEi0KBnN0YXR1cxgBIAEoDjIdLkdh",
            "bWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMSEwoLYWxsaWFuY2VfaWQYAiAB",
            "KA0iRgoWTW9kaWZ5X2Jhc2VfaW5mb19ldmVudBIMCgRuYW1lGAEgASgJEgwK",
            "BGljb24YAiABKA0SEAoIcGF5X2ZsYWcYAyABKAgiRwoRVXBkYXRlX3NpZ25f",
            "ZXZlbnQSJgoEdHlwZRgBIAEoDjIYLkdhbWVQcm90by5BY3Rfc2lnbl90eXBl",
            "EgoKAmlkGAIgASgNIkUKFEdhbWVfY29tbW9uX3Jlc3BvbnNlEi0KBnN0YXR1",
            "cxgBIAEoDjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMi9wEKE1Vw",
            "ZGF0ZV9vYmplY3RfZXZlbnQSKAoEdHlwZRgBIAEoDjIaLkdhbWVQcm90by5P",
            "YmplY3RfYWN0X3R5cGUSJgoMcmVtb3ZlX2Nvb3JkGAIgAygLMhAuR2FtZVBy",
            "b3RvLkNvb3JkEi4KCmFkZF9vYmplY3QYAyADKAsyGi5HYW1lUHJvdG8uQWRk",
            "X29iamVjdF9pbmZvEiwKC2FkZF9tb25zdGVyGAQgAygLMhcuR2FtZVByb3Rv",
            "Lk1vbnN0ZXJfZGF0YRIwCgxhZGRfZmxvYXRpbmcYBSADKAsyGi5HYW1lUHJv",
            "dG8uTWFwX29iamVjdF9kYXRhIssBChVNb25zdGVyX2NvbGxlY3RfZXZlbnQS",
            "MgoIaWRlbnRpdHkYASABKAsyIC5HYW1lUHJvdG8uTW9uc3Rlcl9pZGVudGl0",
            "eV9kYXRhEhEKCXJlbW92ZV9hcBgCIAEoDRIxCg10YXJnZXRfb2JqZWN0GAMg",
            "AygLMhouR2FtZVByb3RvLkFkZF9vYmplY3RfaW5mbxImCgxyZW1vdmVfY29v",
            "cmQYBCADKAsyEC5HYW1lUHJvdG8uQ29vcmQSEAoIbW91bnRfaWQYBSABKA0i",
            "rgEKFk1vbnN0ZXJfbGF5X2Rvd25fZXZlbnQSMgoIaWRlbnRpdHkYASABKAsy",
            "IC5HYW1lUHJvdG8uTW9uc3Rlcl9pZGVudGl0eV9kYXRhEi4KCmFkZF9vYmpl",
            "Y3QYAiADKAsyGi5HYW1lUHJvdG8uQWRkX29iamVjdF9pbmZvEjAKDGFkZF9m",
            "bG9hdGluZxgDIAMoCzIaLkdhbWVQcm90by5NYXBfb2JqZWN0X2RhdGEiswEK",
            "E01vbnN0ZXJfYnVpbHRfZXZlbnQSHwoFY29vcmQYASABKAsyEC5HYW1lUHJv",
            "dG8uQ29vcmQSFQoNZGlhbW9uZF9jb3VudBgCIAEoDRIwCgxuZXdfYnVpbGRp",
            "bmcYAyABKAsyGi5HYW1lUHJvdG8uTWFwX29iamVjdF9kYXRhEjIKDG1vbnN0",
            "ZXJfbGlzdBgEIAMoCzIcLkdhbWVQcm90by5DaGFuZ2VfbW9uc3Rlcl9hcCKG",
            "AQoYTW9uc3Rlcl9lbnRlcl9ob21lX2V2ZW50EhEKCXRpbWVzdGFtcBgBIAEo",
            "AxIfCgVjb29yZBgCIAEoCzIQLkdhbWVQcm90by5Db29yZBI2Cgxtb25zdGVy",
            "X2xpc3QYAyADKAsyIC5HYW1lUHJvdG8uTW9uc3Rlcl9pZGVudGl0eV9kYXRh",
            "IpgBChdNb25zdGVyX2V4aXRfaG9tZV9ldmVudBIRCgl0aW1lc3RhbXAYASAB",
            "KAMSHwoFY29vcmQYAiABKAsyEC5HYW1lUHJvdG8uQ29vcmQSFQoNZGlhbW9u",
            "ZF9jb3VudBgDIAEoDRIyCgxtb25zdGVyX2xpc3QYBCADKAsyHC5HYW1lUHJv",
            "dG8uQ2hhbmdlX21vbnN0ZXJfYXAiYQoRQ2hhbmdlX21vbnN0ZXJfYXASMgoI",
            "aWRlbnRpdHkYASABKAsyIC5HYW1lUHJvdG8uTW9uc3Rlcl9pZGVudGl0eV9k",
            "YXRhEgoKAmFwGAIgASgFEgwKBGZsYWcYAyABKAgiSQoTUmVtb3ZlX21vbnN0",
            "ZXJfZGF0YRIyCghpZGVudGl0eRgBIAEoCzIgLkdhbWVQcm90by5Nb25zdGVy",
            "X2lkZW50aXR5X2RhdGEigQIKFFVwZGF0ZV9tb25zdGVyX2V2ZW50EikKBHR5",
            "cGUYASABKA4yGy5HYW1lUHJvdG8uTW9uc3Rlcl9hY3RfdHlwZRIuCgZyZW1v",
            "dmUYAiADKAsyHi5HYW1lUHJvdG8uUmVtb3ZlX21vbnN0ZXJfZGF0YRIsCgth",
            "ZGRfbW9uc3RlchgEIAMoCzIXLkdhbWVQcm90by5Nb25zdGVyX2RhdGESLgoK",
            "YWRkX29iamVjdBgFIAMoCzIaLkdhbWVQcm90by5BZGRfb2JqZWN0X2luZm8S",
            "MAoMYWRkX2Zsb2F0aW5nGAYgAygLMhouR2FtZVByb3RvLk1hcF9vYmplY3Rf",
            "ZGF0YSJYChRNb25zdGVyX3JlbmFtZV9ldmVudBIyCghpZGVudGl0eRgBIAEo",
            "CzIgLkdhbWVQcm90by5Nb25zdGVyX2lkZW50aXR5X2RhdGESDAoEbmFtZRgC",
            "IAEoCSJeCg9BZGRfb2JqZWN0X2luZm8SHwoFY29vcmQYASABKAsyEC5HYW1l",
            "UHJvdG8uQ29vcmQSKgoGb2JqZWN0GAIgASgLMhouR2FtZVByb3RvLk1hcF9v",
            "YmplY3RfZGF0YSJDCgxBUF9hY3RfZXZlbnQSJAoEdHlwZRgBIAEoDjIWLkdh",
            "bWVQcm90by5BUF9hY3RfdHlwZRINCgVjb3VudBgCIAEoDSLxAQoVVXBkYXRl",
            "X2Zsb2F0aW5nX2V2ZW50Ei0KBHR5cGUYASABKA4yHy5HYW1lUHJvdG8uVXBk",
            "YXRlX2Zsb2F0aW5nX3R5cGUSNQoNdXBkYXRlX29iamVjdBgCIAEoCzIeLkdh",
            "bWVQcm90by5VcGRhdGVfb2JqZWN0X2V2ZW50Eg0KBWluZGV4GAMgASgNEjMK",
            "D2Zsb2F0aW5nX29iamVjdBgEIAEoCzIaLkdhbWVQcm90by5NYXBfb2JqZWN0",
            "X2RhdGESDQoFY291bnQYBSABKA0SHwoXcmVtb3ZlX2luY2x1ZGVkX29iamVj",
            "dHMYBiADKA0irwEKE0dldF9kYWlseV9ib3hfZXZlbnQSEwoLbmV4dF9ib3hf",
            "aWQYASABKA0SGQoRbmV4dF9jb25maWdfaW5kZXgYAiABKA0SEwoLZmluaXNo",
            "X3RpbWUYAyABKAQSJwoFcGxhY2UYBCABKA4yGC5HYW1lUHJvdG8uQm94X2xh",
            "eV9wbGFjZRIqCgZvYmplY3QYBSABKAsyGi5HYW1lUHJvdG8uQWRkX29iamVj",
            "dF9pbmZvIt4BChxBY3RfbGV2ZWxfdHJlYXN1cmVfYm94X2V2ZW50Ei4KBHR5",
            "cGUYASABKA4yIC5HYW1lUHJvdG8uQWN0X3RyZWFzdXJlX2JveF90eXBlEg0K",
            "BWluZGV4GAIgASgNEhUKDWRpYW1vbmRfY291bnQYAyABKA0SEwoLZmluaXNo",
            "X3RpbWUYBCABKAQSJwoFcGxhY2UYBSABKA4yGC5HYW1lUHJvdG8uQm94X2xh",
            "eV9wbGFjZRIqCgZvYmplY3QYBiABKAsyGi5HYW1lUHJvdG8uQWRkX29iamVj",
            "dF9pbmZvIlUKEVN0YXJ0X2xldmVsX2V2ZW50Eg0KBWxldmVsGAEgASgNEhoK",
            "EmV4aXRfaGFsZndheV9jb3VudBgCIAEoDRIVCg1uZWVkX2FwX2NvdW50GAMg",
            "ASgNIvMBChJGaW5pc2hfbGV2ZWxfZXZlbnQSDQoFbGV2ZWwYASABKA0SDgoG",
            "Ym94X2lkGAIgASgNEhQKDGNvbmZpZ19pbmRleBgDIAEoDRIVCg1zcGVuZF9k",
            "aWFtb25kGAQgASgNEi8KC29iamVjdF9saXN0GAUgAygLMhouR2FtZVByb3Rv",
            "LkFkZF9vYmplY3RfaW5mbxIxCg1mbG9hdGluZ19saXN0GAYgAygLMhouR2Ft",
            "ZVByb3RvLk1hcF9vYmplY3RfZGF0YRItCgxjaGFwdGVyX2luZm8YByABKAsy",
            "Fy5HYW1lUHJvdG8uQ2hhcHRlcl9pbmZvIlYKGVJlcG9ydF9sZXZlbF9hY3Rp",
            "b25fZXZlbnQSDQoFbGV2ZWwYASABKA0SKgoEdHlwZRgCIAEoDjIcLkdhbWVQ",
            "cm90by5MZXZlbF9hY3Rpb25fdHlwZSJcChRMZXZlbF9hZGRfZGF0YV9ldmVu",
            "dBINCgVsZXZlbBgBIAEoDRIiCgR0eXBlGAIgASgOMhQuR2FtZVByb3RvLkRB",
            "VEFfVFlQRRIRCglhZGRfdmFsdWUYAyABKA0iIAoSVW5sb2NrX2ZvZ2d5X2V2",
            "ZW50EgoKAmlkGAEgASgNIqcBChNVcGRhdGVfdGVycmFpbl9pbmZvEgwKBHR5",
            "cGUYASABKA0SHwoFY29vcmQYAiABKAsyEC5HYW1lUHJvdG8uQ29vcmQSJAoF",
            "c3RhdGUYAyABKA4yFS5HYW1lUHJvdG8uR3JpZF9zdGF0ZRISCgpkZWFkX2xl",
            "dmVsGAQgASgNEhIKCmN1cmVfY291bnQYBSABKA0SEwoLcmVtb3ZlX2ZsYWcY",
            "BiABKAgicAoUVXBkYXRlX3RlcnJhaW5fZXZlbnQSLAoEbGlzdBgBIAMoCzIe",
            "LkdhbWVQcm90by5VcGRhdGVfdGVycmFpbl9pbmZvEioKBm9iamVjdBgCIAMo",
            "CzIaLkdhbWVQcm90by5NYXBfb2JqZWN0X2RhdGEiTAoRQ3JlYXRlX3Rhc2tf",
            "ZXZlbnQSDgoGb2xkX2lkGAEgASgNEicKCW5leHRfZGF0YRgCIAEoCzIULkdh",
            "bWVQcm90by5UYXNrX2RhdGEiMgoRQ2hhbmdlX3Rhc2tfZXZlbnQSCgoCaWQY",
            "ASABKA0SEQoJYWRkX2NvdW50GAIgASgNIqABChNDb21wbGV0ZV90YXNrX2V2",
            "ZW50EgoKAmlkGAEgASgNEhUKDWRpYW1vbmRfY291bnQYAiABKA0SMQoNcmV3",
            "YXJkX29iamVjdBgDIAEoCzIaLkdhbWVQcm90by5BZGRfb2JqZWN0X2luZm8S",
            "MwoPcmV3YXJkX2Zsb2F0aW5nGAQgASgLMhouR2FtZVByb3RvLk1hcF9vYmpl",
            "Y3RfZGF0YSLAAQoLUmFuZG9tX2RhdGESGAoQcmFuZG9tX21pbl92YWx1ZRgB",
            "IAEoDRIYChByYW5kb21fbWF4X3ZhbHVlGAIgASgNEi8KDXJhbmRvbV9hY3Rp",
            "b24YAyABKA4yGC5HYW1lUHJvdG8uUmFuZG9tX2FjdGlvbhIvCg1yYW5kb21f",
            "cmVzdWx0GAQgASgOMhguR2FtZVByb3RvLlJhbmRvbV9yZXN1bHQSGwoTcmFu",
            "ZG9tX3Jlc3VsdF92YWx1ZRgFIAEoDSKBAQoNUGx1bmRlcl9ldmVudBIrCgdv",
            "cGVyYXRlGAEgASgOMhouR2FtZVByb3RvLlBsdW5kZXJfb3BlcmF0ZRIQCghl",
            "bmVteV9pZBgCIAEoDRIxCgpjaGVja19kYXRhGAMgASgLMh0uR2FtZVByb3Rv",
            "LlBsdW5kZXJfY2hlY2tfZGF0YSKBAwoQUGx1bmRlcl9yZXNwb25zZRIUCgxk",
            "ZXN0X3VzZXJfaWQYASABKA0SLQoFc3RhdGUYAiABKA4yHi5HYW1lUHJvdG8u",
            "UGx1bmRlcl9ldmVudF9zdGF0ZRI0CgtyZXN1bHRfZGF0YRgDIAEoCzIfLkdh",
            "bWVQcm90by5QbHVuZGVyX2NoZWNrX3Jlc3VsdBItCgxkZWZlbnNlX2FybXkY",
            "BCADKAsyFy5HYW1lUHJvdG8uTW9uc3Rlcl9kYXRhEiIKBGdyaWQYBSADKAsy",
            "FC5HYW1lUHJvdG8uR3JpZF9kYXRhEi8KCXJhbmtfZGF0YRgGIAEoCzIcLkdh",
            "bWVQcm90by5QbHVuZGVyX3JhbmtfZGF0YRIrCgtwbGF5ZXJfZGF0YRgHIAEo",
            "CzIWLkdhbWVQcm90by5QbGF5ZXJfZGF0YRINCgVsZXZlbBgIIAEoDRIyCgph",
            "bGxuY190ZWNoGAkgASgLMh4uR2FtZVByb3RvLkFsbGlhbmNlX2JsYWNrX3Rl",
            "Y2ginQIKElBsdW5kZXJfY2hlY2tfZGF0YRIPCgdBSV9mbGFnGAEgASgIEhIK",
            "CnN0YXJfbGV2ZWwYAiABKA0SNAoJbXlfcmVzdWx0GAMgAygLMiEuR2FtZVBy",
            "b3RvLlBsdW5kZXJfbW9uc3Rlcl9yZXN1bHQSNwoMZW5lbXlfcmVzdWx0GAQg",
            "AygLMiEuR2FtZVByb3RvLlBsdW5kZXJfbW9uc3Rlcl9yZXN1bHQSEAoIY29s",
            "X2xpc3QYBSADKA0SJAoKY29vcmRfbGlzdBgGIAMoCzIQLkdhbWVQcm90by5D",
            "b29yZBISCgpzdGFydF90aW1lGAcgASgEEhEKCW15X3Ryb3BoeRgIIAEoBRIU",
            "CgxlbmVteV90cm9waHkYCSABKAUirQMKE1BsdW5kZXJfY2hhbmdlX2luZm8S",
            "EwoLYXR0YWNrX2ZsYWcYASABKAgSDwoHdXNlcl9pZBgCIAEoDRIVCg1yZXN1",
            "bHRfdHJvcGh5GAMgASgNEhAKCGNvbF9saXN0GAQgAygNEiQKCmNvb3JkX2xp",
            "c3QYBSADKAsyEC5HYW1lUHJvdG8uQ29vcmQSEAoId2luX2ZsYWcYBiABKAgS",
            "FAoMcHJvdGVjdF90aW1lGAcgASgEEhMKC2xhc3RfdHJvcGh5GAggASgNEisK",
            "C3BsYXllcl9kYXRhGAkgASgLMhYuR2FtZVByb3RvLlBsYXllcl9kYXRhEhIK",
            "CnN0YXJ0X3RpbWUYCiABKAQSDwoHQUlfZmxhZxgLIAEoCBIvCglhcm15X2Rh",
            "dGEYDCABKAsyHC5HYW1lUHJvdG8uUGx1bmRlcl9hcm15X2RhdGESDQoFbGV2",
            "ZWwYDSABKA0SEgoKYXR0X3Ryb3BoeRgOIAEoDRIUCgxkZWZlbl90cm9waHkY",
            "DyABKA0SEgoKYXR0X2NoYW5nZRgQIAEoBRIUCgxkZWZlbl9jaGFuZ2UYESAB",
            "KAUiiwEKFFBsdW5kZXJfY2hlY2tfcmVzdWx0EhIKCnN0YXJfbGV2ZWwYASAB",
            "KA0SLQoHbXlfcmFuaxgCIAEoCzIcLkdhbWVQcm90by5QbHVuZGVyX3Jhbmtf",
            "ZGF0YRIwCgplbmVteV9yYW5rGAMgASgLMhwuR2FtZVByb3RvLlBsdW5kZXJf",
            "cmFua19kYXRhIjgKEFBsdW5kZXJfZGVsX2RhcmsSJAoKY29vcmRfbGlzdBgB",
            "IAMoCzIQLkdhbWVQcm90by5Db29yZCI7ChZQbHVuZGVyX21vbnN0ZXJfcmVz",
            "dWx0Eg8KB3R5cGVfaWQYASABKA0SEAoIc3VyX2ZsYWcYAiABKAgiRAoSUGx1",
            "bmRlcl9sb2dpbl9kYXRhEi4KCmRlZmVuX2xpc3QYASADKAsyGi5HYW1lUHJv",
            "dG8uUGx1bmRlcl9oaXN0b3J5IscBCgpTaG9wX2V2ZW50EigKB29wZXJhdGUY",
            "ASABKA4yFy5HYW1lUHJvdG8uU2hvcF9vcGVyYXRlEi0KC29iamVjdF9saXN0",
            "GAIgAygLMhguR2FtZVByb3RvLlNob3BfYWN0X2RhdGESJwoEZGF0YRgDIAEo",
            "CzIZLkdhbWVQcm90by5TaG9wX2l0ZW1fZGF0YRIiCgR0eXBlGAQgASgOMhQu",
            "R2FtZVByb3RvLlNob3BfdHlwZRITCgtsZXZlbF9pbmRleBgFIAEoDSLLAQoN",
            "U2hvcF9hY3RfZGF0YRIfCgVjb29yZBgBIAEoCzIQLkdhbWVQcm90by5Db29y",
            "ZBIqCgZlbnRpdHkYAiABKAsyGi5HYW1lUHJvdG8uTWFwX29iamVjdF9kYXRh",
            "EhUKDWZsb2F0aW5nX2ZsYWcYAyABKAgSLAoJaXRlbV9kYXRhGAQgASgLMhku",
            "R2FtZVByb3RvLlNob3BfaXRlbV9kYXRhEigKB21vbnN0ZXIYBSABKAsyFy5H",
            "YW1lUHJvdG8uTW9uc3Rlcl9kYXRhIhwKDlB1cmNoYXNlX2V2ZW50EgoKAmlk",
            "GAEgASgNIk4KEVB1cmNoYXNlX3Jlc3BvbnNlEgoKAmlkGAEgASgNEi0KBnN0",
            "YXR1cxgCIAEoDjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMiTwoZ",
            "R2FtZV9jb21tb25fcmVzcG9uc2VfbGlzdBIyCgtzdGF0dXNfbGlzdBgBIAMo",
            "DjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMiHgoQQnV5X3BsdW5k",
            "ZXJfdGltZRIKCgJpZBgBIAEoDSI3CgxBdmF0YXJfZXZlbnQSJwoEbGlzdBgB",
            "IAMoCzIZLkdhbWVQcm90by5BdmF0YXJfcmVxdWVzdCJYCg5BdmF0YXJfcmVx",
            "dWVzdBIiCgR0eXBlGAEgASgOMhQuR2FtZVByb3RvLklDT05fVFlQRRIiCgRk",
            "YXRhGAIgASgLMhQuR2FtZVByb3RvLkljb25fZGF0YSJBChVVcGRhdGVfbWF0",
            "ZXJpYWxfZXZlbnQSKAoEbGlzdBgBIAMoCzIaLkdhbWVQcm90by5VcGRhdGVf",
            "bWF0ZXJpYWwigAEKD1VwZGF0ZV9tYXRlcmlhbBINCgVjb3VudBgBIAEoBRIr",
            "CglkYXRhX3R5cGUYAiABKA4yGC5HYW1lUHJvdG8uTUFURVJJQUxfVFlQRRIx",
            "CghhY3RfdHlwZRgDIAEoDjIfLkdhbWVQcm90by5BRkZFQ1RfTUFURVJJQUxf",
            "VFlQRSJTCglSYW5rX0RhdGESIgoEdHlwZRgBIAEoDjIULkdhbWVQcm90by5S",
            "QU5LX1RZUEUSIgoEaW5mbxgCIAMoCzIULkdhbWVQcm90by5SYW5rX0luZm8i",
            "kgEKCVJhbmtfSW5mbxIPCgd1c2VyX2lkGAEgASgNEisKC3BsYXllcl9kYXRh",
            "GAIgASgLMhYuR2FtZVByb3RvLlBsYXllcl9kYXRhEhIKCmFsbG5jX2ljb24Y",
            "AyABKA0SEgoKYWxsbmNfbmFtZRgEIAEoCRIQCghhbGxuY19pZBgFIAEoDRIN",
            "CgVzY29yZRgGIAEoDSIwCgpSYW5rX2V2ZW50EiIKBHR5cGUYASABKA4yFC5H",
            "YW1lUHJvdG8uUkFOS19UWVBFIpoBCg1SYW5rX3Jlc3BvbnNlEi0KBnN0YXR1",
            "cxgBIAEoDjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMSIgoEZGF0",
            "YRgCIAEoCzIULkdhbWVQcm90by5SYW5rX0RhdGESJQoHbXlfaW5mbxgDIAEo",
            "CzIULkdhbWVQcm90by5SYW5rX0luZm8SDwoHbXlfcmFuaxgEIAEoBSKvAQoM",
            "UGx1bmRlcl9yYW5rEi4KBnN0YXR1cxgBIAEoDjIeLkdhbWVQcm90by5QTFVO",
            "REVSX1JBTktfU1RBVFVTEhEKCXJhbmtfdGltZRgCIAEoBBIzCgtyZXdhcmRf",
            "bGlzdBgDIAMoCzIeLkdhbWVQcm90by5QbHVuZGVyX3JhbmtfcmV3YXJkEicK",
            "CWluZm9fbGlzdBgEIAMoCzIULkdhbWVQcm90by5SYW5rX0luZm8iUwoTUGx1",
            "bmRlcl9yYW5rX3Jld2FyZBIRCglyZXdhcmRfaWQYASABKA0SKQoJZGF0YV9s",
            "aXN0GAIgAygLMhYuR2FtZVByb3RvLkNvbW1vbl9pdGVtImQKFVBsdW5kZXJf",
            "cmFua19yZXNwb25zZRIlCgR3ZWVrGAEgASgLMhcuR2FtZVByb3RvLlBsdW5k",
            "ZXJfcmFuaxIkCgNkYXkYAiABKAsyFy5HYW1lUHJvdG8uUGx1bmRlcl9yYW5r",
            "IiUKEU5vdGljZV9kYXRhX2V2ZW50EhAKCGxhbmd1YWdlGAEgASgJImsKFE5v",
            "dGljZV9kYXRhX3Jlc3BvbnNlEi0KBnN0YXR1cxgBIAEoDjIdLkdhbWVQcm90",
            "by5HYW1lX2NvbW1vbl9zdGF0dXMSJAoEbGlzdBgCIAEoCzIWLkdhbWVQcm90",
            "by5Ob3RpY2VfbGlzdCKkAQoWR2V0X21haWxfbGlzdF9yZXNwb25zZRItCgZz",
            "dGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25fc3RhdHVzEicK",
            "BGxpc3QYAiABKAsyGS5HYW1lUHJvdG8uTWFpbF9kYXRhX2xpc3QSMgoMbW9u",
            "dGhfcmVjb3JkGAMgAygLMhwuR2FtZVByb3RvLk1vbnRoX21haWxfcmVjb3Jk",
            "IkYKGFVwZGF0ZV9zdGF0dXNfcmVhZF9ldmVudBIqCghpZGVudGl0eRgBIAEo",
            "CzIYLkdhbWVQcm90by5NYWlsX2lkZW50aXR5Ik4KIFVwZGF0ZV9zdGF0dXNf",
            "bm90X3JlY2VpdmVkX2V2ZW50EioKCGlkZW50aXR5GAEgASgLMhguR2FtZVBy",
            "b3RvLk1haWxfaWRlbnRpdHkiQQoTUmVjZWl2ZWRfbWFpbF9ldmVudBIqCghp",
            "ZGVudGl0eRgBIAEoCzIYLkdhbWVQcm90by5NYWlsX2lkZW50aXR5Im0KFlJl",
            "Y2VpdmVkX21haWxfcmVzcG9uc2USLQoGc3RhdHVzGAEgASgOMh0uR2FtZVBy",
            "b3RvLkdhbWVfY29tbW9uX3N0YXR1cxIkCgRsaXN0GAIgAygLMhYuR2FtZVBy",
            "b3RvLkNvbW1vbl9pdGVtIj8KEURlbGV0ZV9tYWlsX2V2ZW50EioKCGlkZW50",
            "aXR5GAEgASgLMhguR2FtZVByb3RvLk1haWxfaWRlbnRpdHkicQoaUmVjZWl2",
            "ZWRfYWxsX21haWxfcmVzcG9uc2USLQoGc3RhdHVzGAEgASgOMh0uR2FtZVBy",
            "b3RvLkdhbWVfY29tbW9uX3N0YXR1cxIkCgRsaXN0GAIgAygLMhYuR2FtZVBy",
            "b3RvLkNvbW1vbl9pdGVtInoKGERlbGV0ZV9hbGxfbWFpbF9yZXNwb25zZRIt",
            "CgZzdGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25fc3RhdHVz",
            "Ei8KDWlkZW50aXR5X2xpc3QYAiADKAsyGC5HYW1lUHJvdG8uTWFpbF9pZGVu",
            "dGl0eSKEAQoaQnV5X3ZpcF9zaG9wX2FydGljbGVfZXZlbnQSDQoFaW5kZXgY",
            "ASABKA0SKAoEZGF0YRgCIAEoCzIaLkdhbWVQcm90by5NYXBfb2JqZWN0X2Rh",
            "dGESLQoMbW9uc3Rlcl9saXN0GAMgAygLMhcuR2FtZVByb3RvLk1vbnN0ZXJf",
            "ZGF0YSJUChZSZWZyZXNoX3ZpcF9zaG9wX2V2ZW50EhIKCmNvc3RfbW91bnQY",
            "ASABKA0SJgoEZGF0YRgCIAEoCzIYLkdhbWVQcm90by5WaXBfc2hvcF9kYXRh",
            "InwKGFJlY2VpdmVfdmlwX3Jld2FyZF9ldmVudBIuCgphZGRfb2JqZWN0GAEg",
            "AygLMhouR2FtZVByb3RvLkFkZF9vYmplY3RfaW5mbxIwCgxhZGRfZmxvYXRp",
            "bmcYAiABKAsyGi5HYW1lUHJvdG8uTWFwX29iamVjdF9kYXRhIjEKHkdldF9z",
            "aW5nbGVfYWN0aXZpdHlfZGF0YV9ldmVudBIPCgdvbmx5X2lkGAEgASgNIn8K",
            "IUdldF9zaW5nbGVfYWN0aXZpdHlfZGF0YV9yZXNwb25zZRIrCgRkYXRhGAEg",
            "ASgLMh0uR2FtZVByb3RvLkFjdGl2aXR5X2Jhc2VfZGF0YRItCgZzdGF0dXMY",
            "AiABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21tb25fc3RhdHVzInwKHkdldF9h",
            "bGxfYWN0aXZpdHlfZGF0YV9yZXNwb25zZRIrCgRkYXRhGAEgAygLMh0uR2Ft",
            "ZVByb3RvLkFjdGl2aXR5X2Jhc2VfZGF0YRItCgZzdGF0dXMYAiABKA4yHS5H",
            "YW1lUHJvdG8uR2FtZV9jb21tb25fc3RhdHVzIjwKGkFjdGl2aXR5X2RhdGFf",
            "dXBkYXRlX2V2ZW50Eg8KB29ubHlfaWQYASABKA0SDQoFY291bnQYAiABKA0i",
            "YgodUmVjZWl2ZV9hY3Rpdml0eV9yZXdhcmRfZXZlbnQSDwoHb25seV9pZBgB",
            "IAEoDRIwCgxhZGRfZmxvYXRpbmcYAyABKAsyGi5HYW1lUHJvdG8uTWFwX29i",
            "amVjdF9kYXRhInoKGkFjdF9hY3Rpdml0eV9kYXRhX3Jlc3BvbnNlEi8KBHR5",
            "cGUYASABKA4yIS5HYW1lUHJvdG8uQUNUSVZJVFlfUkVTUE9OU0VfVFlQRRIr",
            "CgRkYXRhGAIgASgLMh0uR2FtZVByb3RvLkFjdGl2aXR5X2Jhc2VfZGF0YSJu",
            "ChRQbHVuZGVyX3dlZWtfY29udG9ybBISCgpzdGFydF90aW1lGAEgASgDEhEK",
            "CXN0b3BfdGltZRgCIAEoAxIXCg9uZXh0X3N0YXJ0X3RpbWUYAyABKAMSFgoO",
            "bmV4dF9zdG9wX3RpbWUYBCABKAMisAIKG1Jlc3BvbnNlX2dldF9jaGVja19h",
            "Y3Rpdml0eRItCgZzdGF0dXMYASABKA4yHS5HYW1lUHJvdG8uR2FtZV9jb21t",
            "b25fc3RhdHVzEjYKDm5vdmljZV93ZWxmYXJlGAIgASgLMh4uR2FtZVByb3Rv",
            "Lk5vdmljZV93ZWxmYXJlX2RhdGESMAoLZGFpbHlfY2hlY2sYAyABKAsyGy5H",
            "YW1lUHJvdG8uRGFpbHlfY2hlY2tfZGF0YRI8ChFkYWlseV9jaGVja19zdGFn",
            "ZRgEIAEoCzIhLkdhbWVQcm90by5EYWlseV9jaGVja19zdGFnZV9kYXRhEjoK",
            "EGRhaWx5X3RpbWVfc3RhZ2UYBSABKAsyIC5HYW1lUHJvdG8uRGFpbHlfdGlt",
            "ZV9zdGFnZV9kYXRhIooBChlSZWNpdmVfY2hlY2tfcmV3YXJkX2V2ZW50Eg8K",
            "B2lkX2xpc3QYASADKA0SMAoMYWRkX2Zsb2F0aW5nGAIgASgLMhouR2FtZVBy",
            "b3RvLk1hcF9vYmplY3RfZGF0YRIqCgR0eXBlGAMgASgOMhwuR2FtZVByb3Rv",
            "LkNIRUNLX1JFV0FSRF9UWVBFImgKFVJlc3BvbnNlX2NoZWNrX3Jld2FyZBIN",
            "CgVpbmRleBgBIAMoDRIRCgl0aW1lc3RhbXAYAiABKAQSLQoGc3RhdHVzGAMg",
            "ASgOMh0uR2FtZVByb3RvLkdhbWVfY29tbW9uX3N0YXR1cyLiAQocU2VydmVy",
            "X2lubmVyX3VwZGF0ZV9tYXRlcmlhbBIoCgRsaXN0GAEgAygLMhouR2FtZVBy",
            "b3RvLlVwZGF0ZV9tYXRlcmlhbBIxCghhY3RfdHlwZRgCIAEoDjIfLkdhbWVQ",
            "cm90by5BRkZFQ1RfTUFURVJJQUxfVFlQRRIsCghmbG9hdGluZxgDIAEoCzIa",
            "LkdhbWVQcm90by5NYXBfb2JqZWN0X2RhdGESEwoLYWN0aXZpdHlfaWQYBCAB",
            "KA0SDwoHdmlwX2V4cBgFIAEoDRIRCgl1bmxvY2tfaWQYBiABKA0idgocU2Vy",
            "dmVyX3NlbmRfcHVyY2hhc2VfcmV3YXJlZBItCgZzdGF0dXMYASABKA4yHS5H",
            "YW1lUHJvdG8uR2FtZV9jb21tb25fc3RhdHVzEhMKC2FjdGl2aXR5X2lkGAIg",
            "ASgNEhIKCnBydWRvY3RfaWQYAyABKA0irQEKDFByb2R1Y3RfaW5mbxIPCgdv",
            "bmx5X2lkGAEgASgNEhEKCWdhbWVfbmFtZRgCIAEoCRIUCgxzdGFuZGJ5X25h",
            "bWUYAyABKAkSEAoIZ3JvdXBfaWQYBCABKA0SEgoKZ3JvdXBfbmFtZRgFIAEo",
            "CRIMCgR0eXBlGAYgASgNEhEKCXR5cGVfbmFtZRgHIAEoCRINCgVsZXZlbBgI",
            "IAEoDRINCgVwcmljZRgJIAEoDSJfCgpHcm91cF9kYXRhEhAKCGdyb3VwX2lk",
            "GAEgASgNEhIKCmdyb3VwX25hbWUYAiABKAkSKwoJY2F0ZV9saXN0GAMgAygL",
            "MhguR2FtZVByb3RvLkNhdGVnb3J5X2RhdGEiXgoNQ2F0ZWdvcnlfZGF0YRIP",
            "CgdjYXRlX2lkGAEgASgNEhEKCWNhdGVfbmFtZRgCIAEoCRIpCgpsZXZlbF9s",
            "aXN0GAMgAygLMhUuR2FtZVByb3RvLkxldmVsX2RhdGEiLAoKTGV2ZWxfZGF0",
            "YRINCgVsZXZlbBgBIAEoDRIPCgdvbmx5X2lkGAIgASgNIo8BChBBbGxfcHJv",
            "ZHVjdF9kYXRhEiUKBGxpc3QYASADKAsyFy5HYW1lUHJvdG8uUHJvZHVjdF9p",
            "bmZvEikKCmdyb3VwX2xpc3QYAiADKAsyFS5HYW1lUHJvdG8uR3JvdXBfZGF0",
            "YRIpCgpwcmljZV9saXN0GAMgAygLMhUuR2FtZVByb3RvLlByaWNlX2luZm8i",
            "LgoKUHJpY2VfaW5mbxIOCgZkb2xsYXIYASABKAISEAoIcmVubWluYmkYAiAB",
            "KAIiIQoRQ29ubmVjdF9hZGRyX2xpc3QSDAoEYWRkchgBIAMoCSI8ChlUZXN0",
            "X2Nvb3JkX29iamVjdF9yZXF1ZXN0Eh8KBWNvb3JkGAEgASgLMhAuR2FtZVBy",
            "b3RvLkNvb3JkInUKGlRlc3RfY29vcmRfb2JqZWN0X3Jlc3BvbnNlEi0KBnN0",
            "YXR1cxgBIAEoDjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMSKAoE",
            "ZGF0YRgCIAEoCzIaLkdhbWVQcm90by5NYXBfb2JqZWN0X2RhdGEiWwobUmVz",
            "cG9uc2VfY29zdF9kaWFtb25kX3RvdGFsEg0KBXRvdGFsGAEgASgNEi0KBnN0",
            "YXR1cxgCIAEoDjIdLkdhbWVQcm90by5HYW1lX2NvbW1vbl9zdGF0dXMqmwQK",
            "DExvZ2luX3N0YXR1cxIeChpMT0dJTl9TVEFUVVNfTE9HSU5fU1VDQ0VTUxAA",
            "EiEKHUxPR0lOX1NUQVRVU19SRUdJU1RFUl9TVUNDRVNTEAESHQoZTE9HSU5f",
            "U1RBVFVTX0JJTkRfU1VDQ0VTUxACEh8KG0xPR0lOX1NUQVRVU19VUERBVEVf",
            "U1VDQ0VTUxADEhcKE0xPR0lOX1NUQVRVU19GQUlMRUQQBBIeChpMT0dJTl9T",
            "VEFUVVNfVkVSU0lPTl9MSU1JVBAFEiUKIUxPR0lOX1NUQVRVU19BQ0NPVU5U",
            "X1BBU1NXUk9EX0VSUhAGEhkKFUxPR0lOX1NUQVRVU19CSU5EX0VSUhAHEhsK",
            "F0xPR0lOX1NUQVRVU19TVFJJTkdfRVJSEAgSIQodTE9HSU5fU1RBVFVTX0xP",
            "R0lOX1dJVEhfR1VFU1QQCRIhCh1MT0dJTl9TVEFUVVNfU0VSVkVSX1RJTUVS",
            "X09VVBAKEh8KG0xPR0lOX1NUQVRVU19FUlJPUl9QTEFURk9STRALEh0KGUxP",
            "R0lOX1NUQVRVU19FUlJPUl9TVEFUVVMQDBIjCh9MT0dJTl9TVEFUVVNfQUxS",
            "RUFEWV9USElSRF9QQVJUEA0SJQohTE9HSU5fU1RBVFVTX0JJTkRfSU1GT1JN",
            "QVRJT05fRVJSEA4SHgoaTE9HSU5fU1RBVFVTX0VSUk9SX0FDQ09VTlQQDyqi",
            "AQoPQWN0X2ZyaWVuZF90eXBlEhcKE0FDVF9GUklFTkRfVFlQRV9OSUwQABIX",
            "ChNBQ1RfRlJJRU5EX1RZUEVfQUREEAESGgoWQUNUX0ZSSUVORF9UWVBFX0RF",
            "TEVURRACEh8KG0FDVF9GUklFTkRfVFlQRV9BR1JFRV9BUFBMWRADEiAKHEFD",
            "VF9GUklFTkRfVFlQRV9ERUxFVEVfQVBQTFkQBCprCgtBY3RfYXBfdHlwZRIT",
            "Cg9BQ1RfQVBfVFlQRV9OSUwQABITCg9BQ1RfQVBfVFlQRV9HRVQQARIUChBB",
            "Q1RfQVBfVFlQRV9TRU5EEAISHAoYQUNUX0FQX1RZUEVfR0VUX0FORF9TRU5E",
            "EAMqQQoNQWN0X3NpZ25fdHlwZRIYChRBQ1RfU0lHTl9UWVBFX0NSRUFURRAA",
            "EhYKEkFDVF9TSUdOX1RZUEVfVklFVxABKuoWChJHYW1lX2NvbW1vbl9zdGF0",
            "dXMSGgoWR0FNRV9DT01NT05fU1RBVFVTX05JTBAAEh4KGkdBTUVfQ09NTU9O",
            "X1NUQVRVU19TVUNDRVNTEAESJQohR0FNRV9DT01NT05fU1RBVFVTX1NJR05f",
            "Tk9UX0ZPVU5EEAISJQohR0FNRV9DT01NT05fU1RBVFVTX1BST1RPQlVGX0VS",
            "Uk9SEAMSIwofR0FNRV9DT01NT05fU1RBVFVTX0xFU1NfRElBTU9ORBAEEiEK",
            "HUdBTUVfQ09NTU9OX1NUQVRVU19EQVRBX0VSUk9SEAUSJwojR0FNRV9DT01N",
            "T05fU1RBVFVTX1NPVVJDRV9PQkpfRU1QVFkQBhIpCiVHQU1FX0NPTU1PTl9T",
            "VEFUVVNfREVTVF9PQkpfTk9UX0VNUFRZEAcSLAooR0FNRV9DT01NT05fU1RB",
            "VFVTX1NPVVJDRV9GTE9BVElOR19FTVBUWRAIEiYKIkdBTUVfQ09NTU9OX1NU",
            "QVRVU19JTkRFWF9OT1RfRk9VTkQQCRItCilHQU1FX0NPTU1PTl9TVEFUVVNf",
            "VFJFQVNVUkVfQk9YX1RJTUVSX0VSUhAKEi0KKUdBTUVfQ09NTU9OX1NUQVRV",
            "U19UUkVBU1VSRV9CT1hfSU5ERVhfRVJSEAsSKgomR0FNRV9DT01NT05fU1RB",
            "VFVTX1RSRUFTVVJFX0JPWF9JRF9FUlIQDBIqCiZHQU1FX0NPTU1PTl9TVEFU",
            "VVNfTk9UX0VOT1VHSF9CT1hfR1JJRBANEiMKH0dBTUVfQ09NTU9OX1NUQVRV",
            "U19TVEFUVVNfRVJST1IQDhIhCh1HQU1FX0NPTU1PTl9TVEFUVVNfTEVTU19N",
            "T05FWRAPEiYKIkdBTUVfQ09NTU9OX1NUQVRVU19CVVlfQ09VTlRfRVJST1IQ",
            "EBIjCh9HQU1FX0NPTU1PTl9TVEFUVVNfQ09ORklHX0VSUk9SEBESKwonR0FN",
            "RV9DT01NT05fU1RBVFVTX1NPVVJDRV9NT05TVEVSX0VNUFRZEBISLQopR0FN",
            "RV9DT01NT05fU1RBVFVTX0RFU1RfTU9OU1RFUl9OT1RfRU1QVFkQExInCiNH",
            "QU1FX0NPTU1PTl9TVEFUVVNfT05MWUlEX05PVF9GT1VORBAUEicKI0dBTUVf",
            "Q09NTU9OX1NUQVRVU19HUklEX1NUQVRFX0VSUk9SEBUSIgoeR0FNRV9DT01N",
            "T05fU1RBVFVTX0lOREVYX0VSUk9SEBYSHgoaR0FNRV9DT01NT05fU1RBVFVT",
            "X0xFU1NfQVAQFxItCilHQU1FX0NPTU1PTl9TVEFUVVNfUFJFX1RBU0tfTVVT",
            "VF9DT01QTEVURRAYEigKJEdBTUVfQ09NTU9OX1NUQVRVU19UQVNLX0lEX05P",
            "VF9NQVRDSBAZEi8KK0dBTUVfQ09NTU9OX1NUQVRVU19ERURVQ1RfRElBTU9O",
            "RF9OT1RfTUFUQ0gQGhIkCiBHQU1FX0NPTU1PTl9TVEFUVVNfTEVTU19NQVRF",
            "UklBTBAbEisKJ0dBTUVfQ09NTU9OX1NUQVRVU19BRERfQVBfTU9SRV9USEFO",
            "X01BWBAcEiIKHkdBTUVfQ09NTU9OX1NUQVRVU19NVUxUSV9MT0dJThAdEigK",
            "JEdBTUVfQ09NTU9OX1NUQVRVU19UQVNLX0lEX05PVF9FWElTVBAeEiwKKEdB",
            "TUVfQ09NTU9OX1NUQVRVU19NT05TVEVSX0FQX05PVF9FTk9VR0gQHxIlCiFH",
            "QU1FX0NPTU1PTl9TVEFUVVNfVEFTS19DT01QTEVURUQQIBIoCiRHQU1FX0NP",
            "TU1PTl9TVEFUVVNfTU9OU1RFUl9OT1RfRVhJU1QQIRIxCi1HQU1FX0NPTU1P",
            "Tl9TVEFUVVNfQlVJTERJTkdfTU9OU1RFUl9OT1RfRVhJU1QQIhIsCihHQU1F",
            "X0NPTU1PTl9TVEFUVVNfQlVJTERJTkdfSURfTk9UX01BVENIECMSIgoeR0FN",
            "RV9DT01NT05fU1RBVFVTX01PVU5UX0VNUFRZECQSJgoiR0FNRV9DT01NT05f",
            "U1RBVFVTX01PVU5UX05PVF9FTVBUWRAlEisKJ0dBTUVfQ09NTU9OX1NUQVRV",
            "U19GTE9BVElOR19DT1VOVF9FUlJPUhAmEiMKH0dBTUVfQ09NTU9OX1NUQVRV",
            "U19JRF9OT1RfRVhJU1QQJxIjCh9HQU1FX0NPTU1PTl9TVEFUVVNfUkVXQVJE",
            "X0VSUk9SECgSJwojR0FNRV9DT01NT05fU1RBVFVTX01PTlNURVJfSURfRVJS",
            "T1IQKRIdChlHQU1FX0NPTU1PTl9TVEFUVVNfRkFJTEVEEGQSHwobR0FNRV9D",
            "T01NT05fU1RBVFVTX0lEX0VSUk9SEGUSIwofR0FNRV9DT01NT05fU1RBVFVT",
            "X0ZSSUVORF9FWElTVBBmEicKI0dBTUVfQ09NTU9OX1NUQVRVU19GUklFTkRf",
            "Tk9UX0VYSVNUEGcSKwonR0FNRV9DT01NT05fU1RBVFVTX05PVF9FWElTVF9B",
            "UFBMWV9MSVNUEGgSLAooR0FNRV9DT01NT05fU1RBVFVTX0FERF9NT1JFX1RI",
            "QU5fTUFYX1NSQxBpEiwKKEdBTUVfQ09NTU9OX1NUQVRVU19BRERfTU9SRV9U",
            "SEFOX01BWF9EU1QQahImCiJHQU1FX0NPTU1PTl9TVEFUVVNfU0VORF9BUF9B",
            "TFJFQURZEGsSLAooR0FNRV9DT01NT05fU1RBVFVTX1NFTkRfQVBfTU9SRV9U",
            "SEFOX01BWBBsEiUKIUdBTUVfQ09NTU9OX1NUQVRVU19HRVRfQVBfQUxSRUFE",
            "WRBtEiEKHUdBTUVfQ09NTU9OX1NUQVRVU19USU1FX0VSUk9SEG4SKAokR0FN",
            "RV9DT01NT05fU1RBVFVTX0NPTlRFTlRfTVNHX0VNUFRZEHgSLAooR0FNRV9D",
            "T01NT05fU1RBVFVTX0NPTlRFTlRfTU9SRV9USEFOX01BWBB5EiYKIkdBTUVf",
            "Q09NTU9OX1NUQVRVU19OT1RfSU5fQUxMSUFOQ0UQehIqCiZHQU1FX0NPTU1P",
            "Tl9TVEFUVVNfQUxSRUFEWV9JTl9BTExJQU5DRRB7EiUKIUdBTUVfQ09NTU9O",
            "X1NUQVRVU19OT1RfSEFWRV9QT1dFUhB8EisKJ0dBTUVfQ09NTU9OX1NUQVRV",
            "U19NT1JFX1RIQU5fTUFYX01FTUJFUhB9EiEKHUdBTUVfQ09NTU9OX1NUQVRV",
            "U19OQU1FX0VSUk9SEH4SKgomR0FNRV9DT01NT05fU1RBVFVTX0FMTElBTkNF",
            "X05BTUVfRVhJU1QQfxIvCipHQU1FX0NPTU1PTl9TVEFUVVNfQUxMSUFOQ0Vf",
            "TEFOR1VBR0VfRVJST1IQgAESLQooR0FNRV9DT01NT05fU1RBVFVTX0FMTElB",
            "TkNFX05PVElDRV9FUlJPUhCBARIgChtHQU1FX0NPTU1PTl9TVEFUVVNfREJf",
            "RVJST1IQggESMAorR0FNRV9DT01NT05fU1RBVFVTX0FMTElBTkNFX1VTRVJf",
            "Tk9UX0FDVElWRRCDARIhChxHQU1FX0NPTU1PTl9TVEFUVVNfTk9UX0VYSVNU",
            "EIQBEiIKHUdBTUVfQ09NTU9OX1NUQVRVU19SQU5LX0VNUFRZEJYBEiYKIUdB",
            "TUVfQ09NTU9OX1NUQVRVU19NQUlMX05PVF9FWElTVBDIARIpCiRHQU1FX0NP",
            "TU1PTl9TVEFUVVNfTUFJTF9TVEFUVVNfRVJST1IQyQESJwoiR0FNRV9DT01N",
            "T05fU1RBVFVTX01BSUxfSEFTX1JFV0FSRBDKARInCiJHQU1FX0NPTU1PTl9T",
            "VEFUVVNfTUFJTF9OT1RfUkVXQVJEEMsBKocCCg9PYmplY3RfYWN0X3R5cGUS",
            "FwoTT0JKRUNUX0FDVF9UWVBFX05JTBAAEhcKE09CSkVDVF9BQ1RfVFlQRV9B",
            "REQQARIaChZPQkpFQ1RfQUNUX1RZUEVfVVBEQVRFEAISGgoWT0JKRUNUX0FD",
            "VF9UWVBFX0RFTEVURRADEhkKFU9CSkVDVF9BQ1RfVFlQRV9NRVJHRRAEEhgK",
            "FE9CSkVDVF9BQ1RfVFlQRV9NT1ZFEAUSFwoTT0JKRUNUX0FDVF9UWVBFX1RB",
            "UBAGEhwKGE9CSkVDVF9BQ1RfVFlQRV9TVVJWSVZBTBAHEh4KGk9CSkVDVF9B",
            "Q1RfVFlQRV9ERVJJVkFUSVZFEAgqfwoQTW9uc3Rlcl9hY3RfdHlwZRIYChRN",
            "T05TVEVSX0FDVF9UWVBFX05JTBAAEhgKFE1PTlNURVJfQUNUX1RZUEVfQURE",
            "EAESGwoXTU9OU1RFUl9BQ1RfVFlQRV9ERUxFVEUQAhIaChZNT05TVEVSX0FD",
            "VF9UWVBFX01FUkdFEAMqjAEKC0FQX2FjdF90eXBlEhMKD0FQX0FDVF9UWVBF",
            "X05JTBAAEhMKD0FQX0FDVF9UWVBFX0FERBABEhMKD0FQX0FDVF9UWVBFX0RF",
            "TBACEhoKFkFQX0FDVF9UWVBFX0ZSSUVORF9BREQQAxIiCh5BUF9BQ1RfVFlQ",
            "RV9VU0VfRElBTU9ORF9CVVlfQVAQBCp2ChRVcGRhdGVfZmxvYXRpbmdfdHlw",
            "ZRIcChhVUERBVEVfRkxPQVRJTkdfVFlQRV9BREQQABIfChtVUERBVEVfRkxP",
            "QVRJTkdfVFlQRV9ERUxFVEUQARIfChtVUERBVEVfRkxPQVRJTkdfVFlQRV9V",
            "UERBVEUQAipDCg1Cb3hfbGF5X3BsYWNlEhYKEkJPWF9MQVlfUExBQ0VfQ0FN",
            "UBAAEhoKFkJPWF9MQVlfUExBQ0VfRkxPQVRJTkcQASpYChVBY3RfdHJlYXN1",
            "cmVfYm94X3R5cGUSIAocQUNUX1RSRUFTVVJFX0JPWF9UWVBFX1VOTE9DSxAA",
            "Eh0KGUFDVF9UUkVBU1VSRV9CT1hfVFlQRV9HRVQQASqbAQoRTGV2ZWxfYWN0",
            "aW9uX3R5cGUSHQoZTEVWRUxfQUNUSU9OX1RZUEVfTUlTU0lPThAAEiIKHkxF",
            "VkVMX0FDVElPTl9UWVBFX0tJTExfTU9OU1RFUhABEiAKHExFVkVMX0FDVElP",
            "Tl9UWVBFX1NBVkVfVE9URU0QAhIhCh1MRVZFTF9BQ1RJT05fVFlQRV9DTElD",
            "S19DTE9VRBADKnIKCURBVEFfVFlQRRIRCg1EQVRBX1RZUEVfTklMEAASEwoP",
            "REFUQV9UWVBFX01PTkVZEAESEwoPREFUQV9UWVBFX1NUT05FEAISFQoRREFU",
            "QV9UWVBFX0RJQU1PTkQQAxIRCg1EQVRBX1RZUEVfRVhQEAQqaQoRVW5sb2Nr",
            "X2ZvZ2d5X3R5cGUSGQoVVU5MT0NLX0ZPR0dZX1RZUEVfTklMEAASHAoYVU5M",
            "T0NLX0ZPR0dZX1RZUEVfTk9STUFMEAESGwoXVU5MT0NLX0ZPR0dZX1RZUEVf",
            "Tk9CTEUQAiqUAQoTVXBkYXRlX3RlcnJhaW5fdHlwZRIbChdVUERBVEVfVEVS",
            "UkFJTl9UWVBFX05JTBAAEh0KGVVQREFURV9URVJSQUlOX1RZUEVfU1RBVEUQ",
            "ARIdChlVUERBVEVfVEVSUkFJTl9UWVBFX0xFVkVMEAISIgoeVVBEQVRFX1RF",
            "UlJBSU5fVFlQRV9DVVJFX0NPVU5UEAQquQcKDVJhbmRvbV9hY3Rpb24SHgoa",
            "UkFORE9NX0FDVElPTl9NRVJHRV9OT1JNQUwQABIfChtSQU5ET01fQUNUSU9O",
            "X01FUkdFX1NQRUNJQUwQARIlCiFSQU5ET01fQUNUSU9OX01FUkdFX0VYVFJB",
            "X1NQRUNJQUwQAhIdChlSQU5ET01fQUNUSU9OX01FUkdFX09USEVSEAMSIwof",
            "UkFORE9NX0FDVElPTl9NRVJHRV9PVEhFUl9JVEVNMRAEEikKJVJBTkRPTV9B",
            "Q1RJT05fTUVSR0VfT1RIRVJfSVRFTTFfQ09VTlQQBRIjCh9SQU5ET01fQUNU",
            "SU9OX01FUkdFX09USEVSX0lURU0yEAYSKQolUkFORE9NX0FDVElPTl9NRVJH",
            "RV9PVEhFUl9JVEVNMl9DT1VOVBAHEiMKH1JBTkRPTV9BQ1RJT05fTUVSR0Vf",
            "T1RIRVJfSVRFTTMQCBIpCiVSQU5ET01fQUNUSU9OX01FUkdFX09USEVSX0lU",
            "RU0zX0NPVU5UEAkSIwofUkFORE9NX0FDVElPTl9NRVJHRV9PVEhFUl9JVEVN",
            "NBAKEikKJVJBTkRPTV9BQ1RJT05fTUVSR0VfT1RIRVJfSVRFTTRfQ09VTlQQ",
            "CxIeChpSQU5ET01fQUNUSU9OX0NMSUNLX05PUk1BTBAMEiQKIFJBTkRPTV9B",
            "Q1RJT05fQ0xJQ0tfTk9STUFMX0NPVU5UEA0SHQoZUkFORE9NX0FDVElPTl9D",
            "TElDS19PVEhFUhAOEiMKH1JBTkRPTV9BQ1RJT05fQ0xJQ0tfT1RIRVJfQ09V",
            "TlQQDxIjCh9SQU5ET01fQUNUSU9OX0NMSUNLX0VYVFJBX0VYSVNUEBASHQoZ",
            "UkFORE9NX0FDVElPTl9DTElDS19FWFRSQRAREhkKFVJBTkRPTV9BQ1RJT05f",
            "Q09MTEVDVBASEiAKHFJBTkRPTV9BQ1RJT05fREVTVE9SWV9OT1JNQUwQExIm",
            "CiJSQU5ET01fQUNUSU9OX0RFU1RPUllfTk9STUFMX0NPVU5UEBQSHwobUkFO",
            "RE9NX0FDVElPTl9ERVNUT1JZX0VYVFJBEBUSJQohUkFORE9NX0FDVElPTl9E",
            "RVNUT1JZX0VYVFJBX0NPVU5UEBYSHgoaUkFORE9NX0FDVElPTl9XSU5EX1BS",
            "T0RVQ1QQFxIjCh9SQU5ET01fQUNUSU9OX0RBSUxZX1RSQU5TQUNUSU9OEBgS",
            "IQodUkFORE9NX0FDVElPTl9MSU1JVF9USU1FX1NIT1AQGSqYAQoNUmFuZG9t",
            "X3Jlc3VsdBIbChdSQU5ET01fUkVTVUxUX09CSkVDVF9JRBAAEh4KGlJBTkRP",
            "TV9SRVNVTFRfT0JKRUNUX0NPVU5UEAESGQoVUkFORE9NX1JFU1VMVF9MT09U",
            "X0lEEAISFgoSUkFORE9NX1JFU1VMVF9USU1FEAMSFwoTUkFORE9NX1JFU1VM",
            "VF9FWElTVBAEKqABCg9QbHVuZGVyX29wZXJhdGUSGwoXUExVTkRFUl9PUEVS",
            "QVRFX0RFRkFVTFQQABIZChVQTFVOREVSX09QRVJBVEVfTUFUQ0gQARIaChZQ",
            "TFVOREVSX09QRVJBVEVfVkVSSUZZEAISGwoXUExVTkRFUl9PUEVSQVRFX1JF",
            "VkVOR0UQAxIcChhQTFVOREVSX0NSRUFURV9JTklUX0RBVEEQBCrhAQoTUGx1",
            "bmRlcl9ldmVudF9zdGF0ZRIcChhQTFVOREVSX1dBUl9TVEFURV9GQUlMRUQQ",
            "ABIdChlQTFVOREVSX1dBUl9TVEFURV9TVUNDRVNTEAESIgoeUExVTkRFUl9X",
            "QVJfU1RBVEVfRU5FTVlfT05MSU5FEAISJQohUExVTkRFUl9XQVJfU1RBVEVf",
            "RU5FTVlfUFJPVEVDVEVEEAMSHgoaUExVTkRFUl9XQVJfU1RBVEVfTUFUQ0hf",
            "QUkQBBIiCh5QTFVOREVSX1dBUl9TVEFURV9MRVNTX0RJQU1PTkQQBSpoCgxT",
            "aG9wX29wZXJhdGUSEAoMU0hPUF9ERUZBVUxUEAASDwoLU0hPUF9VTkxPQ0sQ",
            "ARIQCgxTSE9QX0RJU1BMQVkQAhIMCghTSE9QX0JVWRADEhUKEVNIT1BfQ1JF",
            "QVRFX0xJTUlUEAQqSAoJSUNPTl9UWVBFEhIKDklDT05fVFlQRV9OVUxMEAAS",
            "EgoOSUNPTl9UWVBFX0lDT04QARITCg9JQ09OX1RZUEVfRlJBTUUQAirdBwoU",
            "QUZGRUNUX01BVEVSSUFMX1RZUEUSHQoZQUZGRUNUX01BVEVSSUFMX1RZUEVf",
            "TlVMTBAAEhgKE0VDTVRfQlVZX0xFVkVMX1RJTUUQ6QcSGAoTRUNNVF9CVVlf",
            "TEVWRUxfU0hPUBDqBxIZChRFQ01UX0xFVkVMX1NLSVBfVEFTSxDrBxIaChVF",
            "Q01UX1NZTlRIRVNJU19USElOR1MQ7AcSIAobRUNNVF9QVVJJRllfVEhFX0RF",
            "QURfR1JPVU5EEO0HEiAKG0VDTVRfQ0xJQ0tfVEhFX0JBTExfT0ZfTElGRRDu",
            "BxIeChlFQ01UX0NMSUNLX0lOVEVHUkFMX1BST1BTEO8HEh0KGEVDTVRfQ0xJ",
            "Q0tfRElBTU9ORF9QUk9QUxDwBxIYChNFQ01UX0JVWV9EUkFHT05fQk9YEPEH",
            "EhgKE0VTTVRfQlVZX1RJTUVEX1NIT1AQ0Q8SHQoYRVNNVF9CVVlfRUdHX09S",
            "X0JPWF9TSE9QENIPEhgKE0VTTVRfQlVZX0xFVkVMX1NIT1AQ0w8SGwoWRVNN",
            "VF9CVVlfQlVJTERJTkdfU0hPUBDUDxIiCh1FU01UX0JVWV9QTFVOREVSX1BS",
            "T1RFQ1RfVElNRRDVDxIcChdFU01UX0JVWV9BUF9VU0VfRElBTU9ORBDWDxIa",
            "ChVFU01UX0NIQU5HRV9VU0VSX05BTUUQ1w8SGQoURVNNVF9DUkVBVEVfQUxM",
            "SUFOQ0UQ2A8SFgoRRVNNVF9GSU5JU0hfTEVWRUwQ2Q8SGgoVRVNNVF9QVVJD",
            "SEFTRV9ESUFNT05EENoPEhYKEUVTTVRfTEVWRUxfVVBEQVRFENsPEhcKEkVT",
            "TVRfQlVZX0xFVkVMX0JPWBDcDxIaChVFU01UX0JVWV9QUk9URUNUX1RJTUUQ",
            "3Q8SGwoWRVNNVF9TS0lQX01PTlNURVJfUkVTVBDeDxIeChlFU01UX0FMTElB",
            "TkNFX1RFQ0tfRE9OQVRFEN8PEhkKFEVTTVRfVVBEQVRFX1ZJUF9TSE9QEOAP",
            "EhYKEUVTTVRfQlVZX1ZJUF9TSE9QEOEPEhUKEEVTTVRfU0lHTl9SRVdBUkQQ",
            "4g8SFwoSRVNNVF9QTFVOREVSX01BVENIEOMPEhUKEEVTTVRfTUFJTF9SRVdB",
            "UkQQ5A8SFAoPRVNNVF9XRUJfVVBEQVRFEOUPEiAKG0VTTVRfTk9STUFMX0FD",
            "VElWSVRZX1JFV0FSRBDmDxIiCh1FU01UX1JFQ0hBUkdFX0FDVElWSVRZX1JF",
            "V0FSRBDnDxIhChxFU01UX0RJQU1PTkRfU0tJUF9CVUlMVF9USU1FEOgPKrUB",
            "ChVBRkZFQ1RfVklQX1NDT1JFX1RZUEUSHQoZQUZGRUNUX1ZJUF9TQ09SRV9U",
            "WVBFX05JTBAAEhgKE0VWU1JfRklSU1RfUkVDSEFSR0UQ9AMSFAoPRVZTUl9N",
            "T05USF9DQVJEEPUDEhkKFEVWU1JfTk9STUFMX1JFQ0hBUkdFEPYDEhoKFUVW",
            "U1JfSElHSF9BUkVBX1VOTE9DSxD3AxIWChFFVlNBX0RBSUxZX1JFV0FSRBDY",
            "BCqKAQoJUkFOS19UWVBFEhIKDlJBTktfVFlQRV9OVUxMEAASFQoRUkFOS19U",
            "WVBFX01PTlNURVIQARISCg5SQU5LX1RZUEVfVEFTSxACEhIKDlJBTktfVFlQ",
            "RV9TSUdOEAMSEwoPUkFOS19UWVBFX0xFVkVMEAQSFQoRUkFOS19UWVBFX1BM",
            "VU5ERVIQBSpwChNQTFVOREVSX1JBTktfU1RBVFVTEhwKGFBMVU5ERVJfUkFO",
            "S19TVEFUVVNfTlVMTBAAEhwKGFBMVU5ERVJfUkFOS19TVEFUVVNfT1BFThAB",
            "Eh0KGVBMVU5ERVJfUkFOS19TVEFUVVNfQ0xPU0UQAiraAQoWQUNUSVZJVFlf",
            "UkVTUE9OU0VfVFlQRRIiCh5SRUNFSVZFX0FDVElWSVRZX1JFU1BPTlNFX05V",
            "TEwQABIjCh9SRUNFSVZFX0FDVElWSVRZX1JFU1BPTlNFX0VSUk9SEAESKQol",
            "UkVDRUlWRV9BQ1RJVklUWV9SRVNQT05TRV9OT19DT01QTEVURRACEiUKIVJF",
            "Q0VJVkVfQUNUSVZJVFlfUkVTUE9OU0VfUkVDRUlWRRADEiUKIVJFQ0VJVkVf",
            "QUNUSVZJVFlfUkVTUE9OU0VfU1VDQ0VTUxAEKvMBChFDSEVDS19SRVdBUkRf",
            "VFlQRRIaChZDSEVDS19SRVdBUkRfVFlQRV9OVUxMEAASJAogQ0hFQ0tfUkVX",
            "QVJEX1RZUEVfTk9WSUNFX1dFTEZBUkUQARIhCh1DSEVDS19SRVdBUkRfVFlQ",
            "RV9EQUlMWV9DSEVDSxACEiYKIkNIRUNLX1JFV0FSRF9UWVBFX1NVUFBMRU1F",
            "TlRfQ0hFQ0sQAxInCiNDSEVDS19SRVdBUkRfVFlQRV9USU1FX1NUQUdFX1JF",
            "V0FSRBAEEigKJENIRUNLX1JFV0FSRF9UWVBFX0NPVU5UX1NUQUdFX1JFV0FS",
            "RBAFYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::GameProto.GameDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameProto.Login_status), typeof(global::GameProto.Act_friend_type), typeof(global::GameProto.Act_ap_type), typeof(global::GameProto.Act_sign_type), typeof(global::GameProto.Game_common_status), typeof(global::GameProto.Object_act_type), typeof(global::GameProto.Monster_act_type), typeof(global::GameProto.AP_act_type), typeof(global::GameProto.Update_floating_type), typeof(global::GameProto.Box_lay_place), typeof(global::GameProto.Act_treasure_box_type), typeof(global::GameProto.Level_action_type), typeof(global::GameProto.DATA_TYPE), typeof(global::GameProto.Unlock_foggy_type), typeof(global::GameProto.Update_terrain_type), typeof(global::GameProto.Random_action), typeof(global::GameProto.Random_result), typeof(global::GameProto.Plunder_operate), typeof(global::GameProto.Plunder_event_state), typeof(global::GameProto.Shop_operate), typeof(global::GameProto.ICON_TYPE), typeof(global::GameProto.AFFECT_MATERIAL_TYPE), typeof(global::GameProto.AFFECT_VIP_SCORE_TYPE), typeof(global::GameProto.RANK_TYPE), typeof(global::GameProto.PLUNDER_RANK_STATUS), typeof(global::GameProto.ACTIVITY_RESPONSE_TYPE), typeof(global::GameProto.CHECK_REWARD_TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Login_event), global::GameProto.Login_event.Parser, new[]{ "Type", "Account", "Password", "Platform", "Version", "Remarks", "Country", "Tunnel", "Time", "Equipment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Login_bind_event), global::GameProto.Login_bind_event.Parser, new[]{ "Account", "Type", "PlatformUid", "IconUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Login_update_mail), global::GameProto.Login_update_mail.Parser, new[]{ "MailAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Login_response), global::GameProto.Login_response.Parser, new[]{ "Status", "Type", "PlatformUid", "UserId", "Account", "Password", "ErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Friend_data), global::GameProto.Friend_data.Parser, new[]{ "UserId", "Player", "Essential" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Friend_data_list), global::GameProto.Friend_data_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Act_friend_event), global::GameProto.Act_friend_event.Parser, new[]{ "Type", "DstUserId", "DeleteAllApply" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Act_friend_response), global::GameProto.Act_friend_response.Parser, new[]{ "Status", "FriendData", "DstUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Find_friend_event), global::GameProto.Find_friend_event.Parser, new[]{ "UserName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Find_friend_response), global::GameProto.Find_friend_response.Parser, new[]{ "Status", "FriendList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Friend_ap_event), global::GameProto.Friend_ap_event.Parser, new[]{ "Type", "IdList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Friend_ap_response), global::GameProto.Friend_ap_response.Parser, new[]{ "Status", "SendList", "RecvList", "DstUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Recv_ap_data), global::GameProto.Recv_ap_data.Parser, new[]{ "UserId", "IsGet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Recv_ap_list), global::GameProto.Recv_ap_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.User_id_list), global::GameProto.User_id_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Friend_list_response), global::GameProto.Friend_list_response.Parser, new[]{ "Status", "FriendList", "SendList", "RecvList", "ApplyList", "ApResetTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Chat_event), global::GameProto.Chat_event.Parser, new[]{ "UserId", "Player", "Essential", "MsgBuf", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Chat_response), global::GameProto.Chat_response.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Get_more_info_event), global::GameProto.Get_more_info_event.Parser, new[]{ "DstUserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Get_more_info_response), global::GameProto.Get_more_info_response.Parser, new[]{ "Status", "Player", "Essential", "PlunderArmyData", "AllianceBase", "DstUserId", "BlackTech" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Apply_alliance_event), global::GameProto.Apply_alliance_event.Parser, new[]{ "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Join_alliance_event), global::GameProto.Join_alliance_event.Parser, new[]{ "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Join_alliance_response), global::GameProto.Join_alliance_response.Parser, new[]{ "Status", "BaseData", "UserList", "ApplyList", "BlackTech" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Recommend_alliance_event), global::GameProto.Recommend_alliance_event.Parser, new[]{ "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Recommend_alliance_response), global::GameProto.Recommend_alliance_response.Parser, new[]{ "Status", "BaseList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Search_alliance_event), global::GameProto.Search_alliance_event.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Search_alliance_response), global::GameProto.Search_alliance_response.Parser, new[]{ "Status", "BaseList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_data_event), global::GameProto.Alliance_data_event.Parser, new[]{ "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_data_response), global::GameProto.Alliance_data_response.Parser, new[]{ "Status", "BaseData", "UserList", "ApplyList", "BlackTech" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Create_alliance_event), global::GameProto.Create_alliance_event.Parser, new[]{ "BaseData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Create_alliance_response), global::GameProto.Create_alliance_response.Parser, new[]{ "Status", "BaseData", "UserList", "ApplyList", "BlackTech" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_update_event), global::GameProto.Alliance_update_event.Parser, new[]{ "BaseData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_update_response), global::GameProto.Alliance_update_response.Parser, new[]{ "Status", "BaseData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_agree_apply_event), global::GameProto.Alliance_agree_apply_event.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_agree_apply_response), global::GameProto.Alliance_agree_apply_response.Parser, new[]{ "Status", "UserList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_delete_apply_event), global::GameProto.Alliance_delete_apply_event.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_delete_apply_response), global::GameProto.Alliance_delete_apply_response.Parser, new[]{ "Status", "ApplyList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_appoint_leader_event), global::GameProto.Alliance_appoint_leader_event.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_appoint_leader_response), global::GameProto.Alliance_appoint_leader_response.Parser, new[]{ "Status", "BaseData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_kickout_user_event), global::GameProto.Alliance_kickout_user_event.Parser, new[]{ "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_kickout_user_response), global::GameProto.Alliance_kickout_user_response.Parser, new[]{ "Status", "UserList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_quit_event), global::GameProto.Alliance_quit_event.Parser, new[]{ "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_donate_event), global::GameProto.Alliance_donate_event.Parser, new[]{ "BlackType", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_donate_response), global::GameProto.Alliance_donate_response.Parser, new[]{ "Status", "BlackTech" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_id_response), global::GameProto.Alliance_id_response.Parser, new[]{ "Status", "AllianceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Modify_base_info_event), global::GameProto.Modify_base_info_event.Parser, new[]{ "Name", "Icon", "PayFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_sign_event), global::GameProto.Update_sign_event.Parser, new[]{ "Type", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Game_common_response), global::GameProto.Game_common_response.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_object_event), global::GameProto.Update_object_event.Parser, new[]{ "Type", "RemoveCoord", "AddObject", "AddMonster", "AddFloating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_collect_event), global::GameProto.Monster_collect_event.Parser, new[]{ "Identity", "RemoveAp", "TargetObject", "RemoveCoord", "MountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_lay_down_event), global::GameProto.Monster_lay_down_event.Parser, new[]{ "Identity", "AddObject", "AddFloating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_built_event), global::GameProto.Monster_built_event.Parser, new[]{ "Coord", "DiamondCount", "NewBuilding", "MonsterList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_enter_home_event), global::GameProto.Monster_enter_home_event.Parser, new[]{ "Timestamp", "Coord", "MonsterList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_exit_home_event), global::GameProto.Monster_exit_home_event.Parser, new[]{ "Timestamp", "Coord", "DiamondCount", "MonsterList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Change_monster_ap), global::GameProto.Change_monster_ap.Parser, new[]{ "Identity", "Ap", "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Remove_monster_data), global::GameProto.Remove_monster_data.Parser, new[]{ "Identity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_monster_event), global::GameProto.Update_monster_event.Parser, new[]{ "Type", "Remove", "AddMonster", "AddObject", "AddFloating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_rename_event), global::GameProto.Monster_rename_event.Parser, new[]{ "Identity", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Add_object_info), global::GameProto.Add_object_info.Parser, new[]{ "Coord", "Object" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.AP_act_event), global::GameProto.AP_act_event.Parser, new[]{ "Type", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_floating_event), global::GameProto.Update_floating_event.Parser, new[]{ "Type", "UpdateObject", "Index", "FloatingObject", "Count", "RemoveIncludedObjects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Get_daily_box_event), global::GameProto.Get_daily_box_event.Parser, new[]{ "NextBoxId", "NextConfigIndex", "FinishTime", "Place", "Object" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Act_level_treasure_box_event), global::GameProto.Act_level_treasure_box_event.Parser, new[]{ "Type", "Index", "DiamondCount", "FinishTime", "Place", "Object" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Start_level_event), global::GameProto.Start_level_event.Parser, new[]{ "Level", "ExitHalfwayCount", "NeedApCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Finish_level_event), global::GameProto.Finish_level_event.Parser, new[]{ "Level", "BoxId", "ConfigIndex", "SpendDiamond", "ObjectList", "FloatingList", "ChapterInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Report_level_action_event), global::GameProto.Report_level_action_event.Parser, new[]{ "Level", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Level_add_data_event), global::GameProto.Level_add_data_event.Parser, new[]{ "Level", "Type", "AddValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Unlock_foggy_event), global::GameProto.Unlock_foggy_event.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_terrain_info), global::GameProto.Update_terrain_info.Parser, new[]{ "Type", "Coord", "State", "DeadLevel", "CureCount", "RemoveFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_terrain_event), global::GameProto.Update_terrain_event.Parser, new[]{ "List", "Object" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Create_task_event), global::GameProto.Create_task_event.Parser, new[]{ "OldId", "NextData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Change_task_event), global::GameProto.Change_task_event.Parser, new[]{ "Id", "AddCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Complete_task_event), global::GameProto.Complete_task_event.Parser, new[]{ "Id", "DiamondCount", "RewardObject", "RewardFloating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Random_data), global::GameProto.Random_data.Parser, new[]{ "RandomMinValue", "RandomMaxValue", "RandomAction", "RandomResult", "RandomResultValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_event), global::GameProto.Plunder_event.Parser, new[]{ "Operate", "EnemyId", "CheckData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_response), global::GameProto.Plunder_response.Parser, new[]{ "DestUserId", "State", "ResultData", "DefenseArmy", "Grid", "RankData", "PlayerData", "Level", "AllncTech" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_check_data), global::GameProto.Plunder_check_data.Parser, new[]{ "AIFlag", "StarLevel", "MyResult", "EnemyResult", "ColList", "CoordList", "StartTime", "MyTrophy", "EnemyTrophy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_change_info), global::GameProto.Plunder_change_info.Parser, new[]{ "AttackFlag", "UserId", "ResultTrophy", "ColList", "CoordList", "WinFlag", "ProtectTime", "LastTrophy", "PlayerData", "StartTime", "AIFlag", "ArmyData", "Level", "AttTrophy", "DefenTrophy", "AttChange", "DefenChange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_check_result), global::GameProto.Plunder_check_result.Parser, new[]{ "StarLevel", "MyRank", "EnemyRank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_del_dark), global::GameProto.Plunder_del_dark.Parser, new[]{ "CoordList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_monster_result), global::GameProto.Plunder_monster_result.Parser, new[]{ "TypeId", "SurFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_login_data), global::GameProto.Plunder_login_data.Parser, new[]{ "DefenList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Shop_event), global::GameProto.Shop_event.Parser, new[]{ "Operate", "ObjectList", "Data", "Type", "LevelIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Shop_act_data), global::GameProto.Shop_act_data.Parser, new[]{ "Coord", "Entity", "FloatingFlag", "ItemData", "Monster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Purchase_event), global::GameProto.Purchase_event.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Purchase_response), global::GameProto.Purchase_response.Parser, new[]{ "Id", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Game_common_response_list), global::GameProto.Game_common_response_list.Parser, new[]{ "StatusList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Buy_plunder_time), global::GameProto.Buy_plunder_time.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Avatar_event), global::GameProto.Avatar_event.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Avatar_request), global::GameProto.Avatar_request.Parser, new[]{ "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_material_event), global::GameProto.Update_material_event.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_material), global::GameProto.Update_material.Parser, new[]{ "Count", "DataType", "ActType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Rank_Data), global::GameProto.Rank_Data.Parser, new[]{ "Type", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Rank_Info), global::GameProto.Rank_Info.Parser, new[]{ "UserId", "PlayerData", "AllncIcon", "AllncName", "AllncId", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Rank_event), global::GameProto.Rank_event.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Rank_response), global::GameProto.Rank_response.Parser, new[]{ "Status", "Data", "MyInfo", "MyRank" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_rank), global::GameProto.Plunder_rank.Parser, new[]{ "Status", "RankTime", "RewardList", "InfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_rank_reward), global::GameProto.Plunder_rank_reward.Parser, new[]{ "RewardId", "DataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_rank_response), global::GameProto.Plunder_rank_response.Parser, new[]{ "Week", "Day" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Notice_data_event), global::GameProto.Notice_data_event.Parser, new[]{ "Language" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Notice_data_response), global::GameProto.Notice_data_response.Parser, new[]{ "Status", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Get_mail_list_response), global::GameProto.Get_mail_list_response.Parser, new[]{ "Status", "List", "MonthRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_status_read_event), global::GameProto.Update_status_read_event.Parser, new[]{ "Identity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Update_status_not_received_event), global::GameProto.Update_status_not_received_event.Parser, new[]{ "Identity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Received_mail_event), global::GameProto.Received_mail_event.Parser, new[]{ "Identity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Received_mail_response), global::GameProto.Received_mail_response.Parser, new[]{ "Status", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Delete_mail_event), global::GameProto.Delete_mail_event.Parser, new[]{ "Identity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Received_all_mail_response), global::GameProto.Received_all_mail_response.Parser, new[]{ "Status", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Delete_all_mail_response), global::GameProto.Delete_all_mail_response.Parser, new[]{ "Status", "IdentityList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Buy_vip_shop_article_event), global::GameProto.Buy_vip_shop_article_event.Parser, new[]{ "Index", "Data", "MonsterList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Refresh_vip_shop_event), global::GameProto.Refresh_vip_shop_event.Parser, new[]{ "CostMount", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Receive_vip_reward_event), global::GameProto.Receive_vip_reward_event.Parser, new[]{ "AddObject", "AddFloating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Get_single_activity_data_event), global::GameProto.Get_single_activity_data_event.Parser, new[]{ "OnlyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Get_single_activity_data_response), global::GameProto.Get_single_activity_data_response.Parser, new[]{ "Data", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Get_all_activity_data_response), global::GameProto.Get_all_activity_data_response.Parser, new[]{ "Data", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_data_update_event), global::GameProto.Activity_data_update_event.Parser, new[]{ "OnlyId", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Receive_activity_reward_event), global::GameProto.Receive_activity_reward_event.Parser, new[]{ "OnlyId", "AddFloating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Act_activity_data_response), global::GameProto.Act_activity_data_response.Parser, new[]{ "Type", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_week_contorl), global::GameProto.Plunder_week_contorl.Parser, new[]{ "StartTime", "StopTime", "NextStartTime", "NextStopTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Response_get_check_activity), global::GameProto.Response_get_check_activity.Parser, new[]{ "Status", "NoviceWelfare", "DailyCheck", "DailyCheckStage", "DailyTimeStage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Recive_check_reward_event), global::GameProto.Recive_check_reward_event.Parser, new[]{ "IdList", "AddFloating", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Response_check_reward), global::GameProto.Response_check_reward.Parser, new[]{ "Index", "Timestamp", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Server_inner_update_material), global::GameProto.Server_inner_update_material.Parser, new[]{ "List", "ActType", "Floating", "ActivityId", "VipExp", "UnlockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Server_send_purchase_rewared), global::GameProto.Server_send_purchase_rewared.Parser, new[]{ "Status", "ActivityId", "PrudoctId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Product_info), global::GameProto.Product_info.Parser, new[]{ "OnlyId", "GameName", "StandbyName", "GroupId", "GroupName", "Type", "TypeName", "Level", "Price" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Group_data), global::GameProto.Group_data.Parser, new[]{ "GroupId", "GroupName", "CateList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Category_data), global::GameProto.Category_data.Parser, new[]{ "CateId", "CateName", "LevelList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Level_data), global::GameProto.Level_data.Parser, new[]{ "Level", "OnlyId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.All_product_data), global::GameProto.All_product_data.Parser, new[]{ "List", "GroupList", "PriceList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Price_info), global::GameProto.Price_info.Parser, new[]{ "Dollar", "Renminbi" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Connect_addr_list), global::GameProto.Connect_addr_list.Parser, new[]{ "Addr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Test_coord_object_request), global::GameProto.Test_coord_object_request.Parser, new[]{ "Coord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Test_coord_object_response), global::GameProto.Test_coord_object_response.Parser, new[]{ "Status", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Response_cost_diamond_total), global::GameProto.Response_cost_diamond_total.Parser, new[]{ "Total", "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///Login的所有状态
  /// </summary>
  public enum Login_status {
    /// <summary>
    ///登录成功
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_LOGIN_SUCCESS")] LoginSuccess = 0,
    /// <summary>
    ///注册成功
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_REGISTER_SUCCESS")] RegisterSuccess = 1,
    /// <summary>
    ///绑定成功
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_BIND_SUCCESS")] BindSuccess = 2,
    /// <summary>
    ///更新信息成功
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_UPDATE_SUCCESS")] UpdateSuccess = 3,
    /// <summary>
    ///未知原因
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_FAILED")] Failed = 4,
    /// <summary>
    ///版本限制
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_VERSION_LIMIT")] VersionLimit = 5,
    /// <summary>
    ///账号或密码错误
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_ACCOUNT_PASSWROD_ERR")] AccountPasswrodErr = 6,
    /// <summary>
    ///重复绑定
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_BIND_ERR")] BindErr = 7,
    /// <summary>
    ///字符串中存在非法字符
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_STRING_ERR")] StringErr = 8,
    /// <summary>
    ///使用游客平台登录
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_LOGIN_WITH_GUEST")] LoginWithGuest = 9,
    /// <summary>
    ///服务端处理超时
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_SERVER_TIMER_OUT")] ServerTimerOut = 10,
    /// <summary>
    ///平台类型错误
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_ERROR_PLATFORM")] ErrorPlatform = 11,
    /// <summary>
    ///账号被封禁
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_ERROR_STATUS")] ErrorStatus = 12,
    /// <summary>
    ///账号已经是第三方平台账号
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_ALREADY_THIRD_PART")] AlreadyThirdPart = 13,
    /// <summary>
    ///要绑定的账号已经被绑定过了
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_BIND_IMFORMATION_ERR")] BindImformationErr = 14,
    /// <summary>
    ///绑定的账户错误
    /// </summary>
    [pbr::OriginalName("LOGIN_STATUS_ERROR_ACCOUNT")] ErrorAccount = 15,
  }

  /// <summary>
  ///操作好友的类型
  /// </summary>
  public enum Act_friend_type {
    [pbr::OriginalName("ACT_FRIEND_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///增加
    /// </summary>
    [pbr::OriginalName("ACT_FRIEND_TYPE_ADD")] Add = 1,
    /// <summary>
    ///删除
    /// </summary>
    [pbr::OriginalName("ACT_FRIEND_TYPE_DELETE")] Delete = 2,
    /// <summary>
    ///同意申请
    /// </summary>
    [pbr::OriginalName("ACT_FRIEND_TYPE_AGREE_APPLY")] AgreeApply = 3,
    /// <summary>
    ///删除申请
    /// </summary>
    [pbr::OriginalName("ACT_FRIEND_TYPE_DELETE_APPLY")] DeleteApply = 4,
  }

  public enum Act_ap_type {
    [pbr::OriginalName("ACT_AP_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///领取体力
    /// </summary>
    [pbr::OriginalName("ACT_AP_TYPE_GET")] Get = 1,
    /// <summary>
    ///赠送体力
    /// </summary>
    [pbr::OriginalName("ACT_AP_TYPE_SEND")] Send = 2,
    /// <summary>
    ///一键领取并赠送
    /// </summary>
    [pbr::OriginalName("ACT_AP_TYPE_GET_AND_SEND")] GetAndSend = 3,
  }

  /// <summary>
  ///操作图签的类型
  /// </summary>
  public enum Act_sign_type {
    /// <summary>
    ///創建圖簽               
    /// </summary>
    [pbr::OriginalName("ACT_SIGN_TYPE_CREATE")] Create = 0,
    /// <summary>
    ///查看标识
    /// </summary>
    [pbr::OriginalName("ACT_SIGN_TYPE_VIEW")] View = 1,
  }

  public enum Game_common_status {
    /// <summary>
    ///废弃 
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_NIL")] Nil = 0,
    /// <summary>
    ///成功 
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_SUCCESS")] Success = 1,
    /// <summary>
    ///重复解锁同一个物品id
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_SIGN_NOT_FOUND")] SignNotFound = 2,
    /// <summary>
    ///服务端解析protobuf数据出错
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_PROTOBUF_ERROR")] ProtobufError = 3,
    /// <summary>
    ///钻石不足
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_LESS_DIAMOND")] LessDiamond = 4,
    /// <summary>
    ///请求数据错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_DATA_ERROR")] DataError = 5,
    /// <summary>
    ///原始位置物体为空
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_SOURCE_OBJ_EMPTY")] SourceObjEmpty = 6,
    /// <summary>
    ///目标位置物体不为空
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_DEST_OBJ_NOT_EMPTY")] DestObjNotEmpty = 7,
    /// <summary>
    ///原始位置无浮空物体
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_SOURCE_FLOATING_EMPTY")] SourceFloatingEmpty = 8,
    /// <summary>
    ///未查找到目标位置
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_INDEX_NOT_FOUND")] IndexNotFound = 9,
    /// <summary>
    ///宝箱[关卡宝箱和每日宝箱]时间没到
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_TREASURE_BOX_TIMER_ERR")] TreasureBoxTimerErr = 10,
    /// <summary>
    ///关卡宝箱索引错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_TREASURE_BOX_INDEX_ERR")] TreasureBoxIndexErr = 11,
    /// <summary>
    ///获取的关卡宝箱id错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_TREASURE_BOX_ID_ERR")] TreasureBoxIdErr = 12,
    /// <summary>
    ///宝箱格子不够
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_NOT_ENOUGH_BOX_GRID")] NotEnoughBoxGrid = 13,
    /// <summary>
    ///状态错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_STATUS_ERROR")] StatusError = 14,
    /// <summary>
    ///金币不足
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_LESS_MONEY")] LessMoney = 15,
    /// <summary>
    ///超过限购数量  
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_BUY_COUNT_ERROR")] BuyCountError = 16,
    /// <summary>
    ///配置错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_CONFIG_ERROR")] ConfigError = 17,
    /// <summary>
    ///原始位置龙为空
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_SOURCE_MONSTER_EMPTY")] SourceMonsterEmpty = 18,
    /// <summary>
    ///目标位置龙不为空
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_DEST_MONSTER_NOT_EMPTY")] DestMonsterNotEmpty = 19,
    /// <summary>
    ///未查找到目标only_id
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ONLYID_NOT_FOUND")] OnlyidNotFound = 20,
    /// <summary>
    ///格子状态错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_GRID_STATE_ERROR")] GridStateError = 21,
    /// <summary>
    ///索引错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_INDEX_ERROR")] IndexError = 22,
    /// <summary>
    ///进入关卡体力不足
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_LESS_AP")] LessAp = 23,
    /// <summary>
    ///大本營創新新任務前置任務必須完成
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_PRE_TASK_MUST_COMPLETE")] PreTaskMustComplete = 24,
    /// <summary>
    ///创建任务时前后ID不匹配
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_TASK_ID_NOT_MATCH")] TaskIdNotMatch = 25,
    /// <summary>
    ///需要扣除的钻石数量不匹配
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_DEDUCT_DIAMOND_NOT_MATCH")] DeductDiamondNotMatch = 26,
    /// <summary>
    ///缺少物资
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_LESS_MATERIAL")] LessMaterial = 27,
    /// <summary>
    ///体力超过上限
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ADD_AP_MORE_THAN_MAX")] AddApMoreThanMax = 28,
    /// <summary>
    ///重复登录
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MULTI_LOGIN")] MultiLogin = 29,
    /// <summary>
    ///任务ID不存在
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_TASK_ID_NOT_EXIST")] TaskIdNotExist = 30,
    /// <summary>
    ///龙的体力不足
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MONSTER_AP_NOT_ENOUGH")] MonsterApNotEnough = 31,
    /// <summary>
    ///任务已经完成
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_TASK_COMPLETED")] TaskCompleted = 32,
    /// <summary>
    ///场景中不存在这条龙
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MONSTER_NOT_EXIST")] MonsterNotExist = 33,
    /// <summary>
    ///建筑中不存在这条龙
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_BUILDING_MONSTER_NOT_EXIST")] BuildingMonsterNotExist = 34,
    /// <summary>
    ///建造时建筑ID不匹配
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_BUILDING_ID_NOT_MATCH")] BuildingIdNotMatch = 35,
    /// <summary>
    ///龙身上的物体为空
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MOUNT_EMPTY")] MountEmpty = 36,
    /// <summary>
    ///龙身上的物体不为空
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MOUNT_NOT_EMPTY")] MountNotEmpty = 37,
    /// <summary>
    ///战利品球长度错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_FLOATING_COUNT_ERROR")] FloatingCountError = 38,
    /// <summary>
    ///ID不存在
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ID_NOT_EXIST")] IdNotExist = 39,
    /// <summary>
    ///奖励错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_REWARD_ERROR")] RewardError = 40,
    /// <summary>
    ///龙的only_id == 0 || monster_id == 0
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MONSTER_ID_ERROR")] MonsterIdError = 41,
    /// <summary>
    ///失败
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_FAILED")] Failed = 100,
    /// <summary>
    ///好友错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ID_ERROR")] IdError = 101,
    /// <summary>
    ///对方已经存在
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_FRIEND_EXIST")] FriendExist = 102,
    /// <summary>
    ///对方不存在
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_FRIEND_NOT_EXIST")] FriendNotExist = 103,
    /// <summary>
    ///对方不存在列表
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_NOT_EXIST_APPLY_LIST")] NotExistApplyList = 104,
    /// <summary>
    ///请求方玩家的好友数超过最大值
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ADD_MORE_THAN_MAX_SRC")] AddMoreThanMaxSrc = 105,
    /// <summary>
    ///对方玩家的好友数超过最大值
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ADD_MORE_THAN_MAX_DST")] AddMoreThanMaxDst = 106,
    /// <summary>
    ///已经赠送体力
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_SEND_AP_ALREADY")] SendApAlready = 107,
    /// <summary>
    ///超过赠送体力最大值
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_SEND_AP_MORE_THAN_MAX")] SendApMoreThanMax = 108,
    /// <summary>
    ///已经领取体力
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_GET_AP_ALREADY")] GetApAlready = 109,
    /// <summary>
    ///时间错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_TIME_ERROR")] TimeError = 110,
    /// <summary>
    ///联盟错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_CONTENT_MSG_EMPTY")] ContentMsgEmpty = 120,
    /// <summary>
    ///内容超过限定大小
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_CONTENT_MORE_THAN_MAX")] ContentMoreThanMax = 121,
    /// <summary>
    ///联盟内没有该玩家
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_NOT_IN_ALLIANCE")] NotInAlliance = 122,
    /// <summary>
    ///已经加入联盟
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ALREADY_IN_ALLIANCE")] AlreadyInAlliance = 123,
    /// <summary>
    ///无权操作
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_NOT_HAVE_POWER")] NotHavePower = 124,
    /// <summary>
    ///加入条件错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MORE_THAN_MAX_MEMBER")] MoreThanMaxMember = 125,
    /// <summary>
    ///名称错误[空/长度]
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_NAME_ERROR")] NameError = 126,
    /// <summary>
    ///联盟名称已经存在
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ALLIANCE_NAME_EXIST")] AllianceNameExist = 127,
    /// <summary>
    ///联盟语言错误[空/长度]
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ALLIANCE_LANGUAGE_ERROR")] AllianceLanguageError = 128,
    /// <summary>
    ///联盟公告错误[长度]
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ALLIANCE_NOTICE_ERROR")] AllianceNoticeError = 129,
    /// <summary>
    ///写DB查找更新等错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_DB_ERROR")] DbError = 130,
    /// <summary>
    ///联盟成员不活跃(超过7天未上线)
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_ALLIANCE_USER_NOT_ACTIVE")] AllianceUserNotActive = 131,
    /// <summary>
    ///联盟不存在
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_NOT_EXIST")] NotExist = 132,
    /// <summary>
    ///排行榜错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_RANK_EMPTY")] RankEmpty = 150,
    /// <summary>
    ///邮件错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MAIL_NOT_EXIST")] MailNotExist = 200,
    /// <summary>
    ///邮件状态错误
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MAIL_STATUS_ERROR")] MailStatusError = 201,
    /// <summary>
    ///邮件有附件不能进行该操作
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MAIL_HAS_REWARD")] MailHasReward = 202,
    /// <summary>
    ///邮件没有附件
    /// </summary>
    [pbr::OriginalName("GAME_COMMON_STATUS_MAIL_NOT_REWARD")] MailNotReward = 203,
  }

  /// <summary>
  ///操作物品类型，仅用来定位前期测试问题，服务端不存储，请客户端小伙伴用心去处理这些逻辑
  /// </summary>
  public enum Object_act_type {
    /// <summary>
    ///废弃变量 
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///1 添加物品
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_ADD")] Add = 1,
    /// <summary>
    ///1 物品形态发生变化 
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_UPDATE")] Update = 2,
    /// <summary>
    ///1 删除物品
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_DELETE")] Delete = 3,
    /// <summary>
    ///1 合并导致的数据变化 
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_MERGE")] Merge = 4,
    /// <summary>
    ///1 移动物体
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_MOVE")] Move = 5,
    /// <summary>
    ///1 点击事件
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_TAP")] Tap = 6,
    /// <summary>
    ///1 死亡产出事件
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_SURVIVAL")] Survival = 7,
    /// <summary>
    ///1 衍生产出事件
    /// </summary>
    [pbr::OriginalName("OBJECT_ACT_TYPE_DERIVATIVE")] Derivative = 8,
  }

  /// <summary>
  ///操作龙类型
  /// </summary>
  public enum Monster_act_type {
    /// <summary>
    ///废弃变量 
    /// </summary>
    [pbr::OriginalName("MONSTER_ACT_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///添加
    /// </summary>
    [pbr::OriginalName("MONSTER_ACT_TYPE_ADD")] Add = 1,
    /// <summary>
    ///删除
    /// </summary>
    [pbr::OriginalName("MONSTER_ACT_TYPE_DELETE")] Delete = 2,
    /// <summary>
    ///合成
    /// </summary>
    [pbr::OriginalName("MONSTER_ACT_TYPE_MERGE")] Merge = 3,
  }

  /// <summary>
  ///体力操作类型
  /// </summary>
  public enum AP_act_type {
    [pbr::OriginalName("AP_ACT_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///增加
    /// </summary>
    [pbr::OriginalName("AP_ACT_TYPE_ADD")] Add = 1,
    /// <summary>
    ///删除
    /// </summary>
    [pbr::OriginalName("AP_ACT_TYPE_DEL")] Del = 2,
    /// <summary>
    ///好友添加（测试用）
    /// </summary>
    [pbr::OriginalName("AP_ACT_TYPE_FRIEND_ADD")] FriendAdd = 3,
    /// <summary>
    ///花费钻石购买
    /// </summary>
    [pbr::OriginalName("AP_ACT_TYPE_USE_DIAMOND_BUY_AP")] UseDiamondBuyAp = 4,
  }

  public enum Update_floating_type {
    /// <summary>
    ///添加浮空物品
    /// </summary>
    [pbr::OriginalName("UPDATE_FLOATING_TYPE_ADD")] Add = 0,
    /// <summary>
    ///删除浮空物品
    /// </summary>
    [pbr::OriginalName("UPDATE_FLOATING_TYPE_DELETE")] Delete = 1,
    /// <summary>
    ///更新浮空物品的included_objects
    /// </summary>
    [pbr::OriginalName("UPDATE_FLOATING_TYPE_UPDATE")] Update = 2,
  }

  /// <summary>
  ///宝箱增加的位置
  /// </summary>
  public enum Box_lay_place {
    /// <summary>
    ///添加到大本营
    /// </summary>
    [pbr::OriginalName("BOX_LAY_PLACE_CAMP")] Camp = 0,
    /// <summary>
    ///添加到浮空物体中
    /// </summary>
    [pbr::OriginalName("BOX_LAY_PLACE_FLOATING")] Floating = 1,
  }

  /// <summary>
  ///操作关卡宝箱的类型
  /// </summary>
  public enum Act_treasure_box_type {
    /// <summary>
    ///解锁 将lock 改成 waitting
    /// </summary>
    [pbr::OriginalName("ACT_TREASURE_BOX_TYPE_UNLOCK")] Unlock = 0,
    /// <summary>
    ///领取
    /// </summary>
    [pbr::OriginalName("ACT_TREASURE_BOX_TYPE_GET")] Get = 1,
  }

  public enum Level_action_type {
    /// <summary>
    ///完成任务
    /// </summary>
    [pbr::OriginalName("LEVEL_ACTION_TYPE_MISSION")] Mission = 0,
    /// <summary>
    ///击杀魔物
    /// </summary>
    [pbr::OriginalName("LEVEL_ACTION_TYPE_KILL_MONSTER")] KillMonster = 1,
    /// <summary>
    ///拯救图腾
    /// </summary>
    [pbr::OriginalName("LEVEL_ACTION_TYPE_SAVE_TOTEM")] SaveTotem = 2,
    /// <summary>
    ///点击云朵
    /// </summary>
    [pbr::OriginalName("LEVEL_ACTION_TYPE_CLICK_CLOUD")] ClickCloud = 3,
  }

  public enum DATA_TYPE {
    /// <summary>
    ///无意义
    /// </summary>
    [pbr::OriginalName("DATA_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///金币
    /// </summary>
    [pbr::OriginalName("DATA_TYPE_MONEY")] Money = 1,
    /// <summary>
    ///矿石
    /// </summary>
    [pbr::OriginalName("DATA_TYPE_STONE")] Stone = 2,
    /// <summary>
    ///钻石
    /// </summary>
    [pbr::OriginalName("DATA_TYPE_DIAMOND")] Diamond = 3,
    /// <summary>
    ///经验
    /// </summary>
    [pbr::OriginalName("DATA_TYPE_EXP")] Exp = 4,
  }

  /// <summary>
  ///类型由服务根据策划数据表来定义出来的，客户端可以使用
  /// </summary>
  public enum Unlock_foggy_type {
    /// <summary>
    ///废弃
    /// </summary>
    [pbr::OriginalName("UNLOCK_FOGGY_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///普通地形
    /// </summary>
    [pbr::OriginalName("UNLOCK_FOGGY_TYPE_NORMAL")] Normal = 1,
    /// <summary>
    ///高端区
    /// </summary>
    [pbr::OriginalName("UNLOCK_FOGGY_TYPE_NOBLE")] Noble = 2,
  }

  public enum Update_terrain_type {
    /// <summary>
    ///无意义
    /// </summary>
    [pbr::OriginalName("UPDATE_TERRAIN_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///更新状态
    /// </summary>
    [pbr::OriginalName("UPDATE_TERRAIN_TYPE_STATE")] State = 1,
    /// <summary>
    ///更新level
    /// </summary>
    [pbr::OriginalName("UPDATE_TERRAIN_TYPE_LEVEL")] Level = 2,
    /// <summary>
    ///更新治愈数量
    /// </summary>
    [pbr::OriginalName("UPDATE_TERRAIN_TYPE_CURE_COUNT")] CureCount = 4,
  }

  public enum Random_action {
    /// <summary>
    ///合成常规产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_NORMAL")] MergeNormal = 0,
    /// <summary>
    ///合成特惠
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_SPECIAL")] MergeSpecial = 1,
    /// <summary>
    ///合成额外特惠
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_EXTRA_SPECIAL")] MergeExtraSpecial = 2,
    /// <summary>
    ///合成其他产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER")] MergeOther = 3,
    /// <summary>
    ///合成其他产出项1
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM1")] MergeOtherItem1 = 4,
    /// <summary>
    ///合成其他产出项1数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM1_COUNT")] MergeOtherItem1Count = 5,
    /// <summary>
    ///合成其他产出项2
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM2")] MergeOtherItem2 = 6,
    /// <summary>
    ///合成其他产出项2数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM2_COUNT")] MergeOtherItem2Count = 7,
    /// <summary>
    ///合成其他产出项3
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM3")] MergeOtherItem3 = 8,
    /// <summary>
    ///合成其他产出项3数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM3_COUNT")] MergeOtherItem3Count = 9,
    /// <summary>
    ///合成其他产出项4
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM4")] MergeOtherItem4 = 10,
    /// <summary>
    ///合成其他产出项4数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_MERGE_OTHER_ITEM4_COUNT")] MergeOtherItem4Count = 11,
    /// <summary>
    ///点击常规产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_CLICK_NORMAL")] ClickNormal = 12,
    /// <summary>
    ///点击常规产出数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_CLICK_NORMAL_COUNT")] ClickNormalCount = 13,
    /// <summary>
    ///点击其他产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_CLICK_OTHER")] ClickOther = 14,
    /// <summary>
    ///点击其他产出数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_CLICK_OTHER_COUNT")] ClickOtherCount = 15,
    /// <summary>
    ///点击额外产出是否存在
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_CLICK_EXTRA_EXIST")] ClickExtraExist = 16,
    /// <summary>
    ///点击额外产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_CLICK_EXTRA")] ClickExtra = 17,
    /// <summary>
    ///采集产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_COLLECT")] Collect = 18,
    /// <summary>
    ///摧毁常规产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_DESTORY_NORMAL")] DestoryNormal = 19,
    /// <summary>
    ///摧毁常规产出数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_DESTORY_NORMAL_COUNT")] DestoryNormalCount = 20,
    /// <summary>
    ///摧毁额外产出
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_DESTORY_EXTRA")] DestoryExtra = 21,
    /// <summary>
    ///摧毁额外产出数量
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_DESTORY_EXTRA_COUNT")] DestoryExtraCount = 22,
    /// <summary>
    ///风产出叶子
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_WIND_PRODUCT")] WindProduct = 23,
    /// <summary>
    ///每日交易订单生成
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_DAILY_TRANSACTION")] DailyTransaction = 24,
    /// <summary>
    ///限时商店商品生成
    /// </summary>
    [pbr::OriginalName("RANDOM_ACTION_LIMIT_TIME_SHOP")] LimitTimeShop = 25,
  }

  public enum Random_result {
    /// <summary>
    ///物件ID
    /// </summary>
    [pbr::OriginalName("RANDOM_RESULT_OBJECT_ID")] ObjectId = 0,
    /// <summary>
    ///物件数量
    /// </summary>
    [pbr::OriginalName("RANDOM_RESULT_OBJECT_COUNT")] ObjectCount = 1,
    /// <summary>
    ///LOOT表ID
    /// </summary>
    [pbr::OriginalName("RANDOM_RESULT_LOOT_ID")] LootId = 2,
    /// <summary>
    ///时间
    /// </summary>
    [pbr::OriginalName("RANDOM_RESULT_TIME")] Time = 3,
    /// <summary>
    ///产生概率
    /// </summary>
    [pbr::OriginalName("RANDOM_RESULT_EXIST")] Exist = 4,
  }

  public enum Plunder_operate {
    /// <summary>
    ///默认枚举
    /// </summary>
    [pbr::OriginalName("PLUNDER_OPERATE_DEFAULT")] Default = 0,
    /// <summary>
    ///匹配用户
    /// </summary>
    [pbr::OriginalName("PLUNDER_OPERATE_MATCH")] Match = 1,
    /// <summary>
    ///验证掠夺结果
    /// </summary>
    [pbr::OriginalName("PLUNDER_OPERATE_VERIFY")] Verify = 2,
    /// <summary>
    ///请求复仇
    /// </summary>
    [pbr::OriginalName("PLUNDER_OPERATE_REVENGE")] Revenge = 3,
    /// <summary>
    ///创建掠夺数据, 加入到匹配池中
    /// </summary>
    [pbr::OriginalName("PLUNDER_CREATE_INIT_DATA")] PlunderCreateInitData = 4,
  }

  /// <summary>
  ///结果反馈
  /// </summary>
  public enum Plunder_event_state {
    /// <summary>
    ///未知原因失败
    /// </summary>
    [pbr::OriginalName("PLUNDER_WAR_STATE_FAILED")] PlunderWarStateFailed = 0,
    /// <summary>
    ///成功
    /// </summary>
    [pbr::OriginalName("PLUNDER_WAR_STATE_SUCCESS")] PlunderWarStateSuccess = 1,
    /// <summary>
    ///掠夺玩家在线
    /// </summary>
    [pbr::OriginalName("PLUNDER_WAR_STATE_ENEMY_ONLINE")] PlunderWarStateEnemyOnline = 2,
    /// <summary>
    ///掠夺玩家仍在保护期
    /// </summary>
    [pbr::OriginalName("PLUNDER_WAR_STATE_ENEMY_PROTECTED")] PlunderWarStateEnemyProtected = 3,
    /// <summary>
    ///匹配给玩家一个AI
    /// </summary>
    [pbr::OriginalName("PLUNDER_WAR_STATE_MATCH_AI")] PlunderWarStateMatchAi = 4,
    /// <summary>
    ///玩家金币不足
    /// </summary>
    [pbr::OriginalName("PLUNDER_WAR_STATE_LESS_DIAMOND")] PlunderWarStateLessDiamond = 5,
  }

  public enum Shop_operate {
    /// <summary>
    ///默认枚举
    /// </summary>
    [pbr::OriginalName("SHOP_DEFAULT")] ShopDefault = 0,
    /// <summary>
    ///解锁
    /// </summary>
    [pbr::OriginalName("SHOP_UNLOCK")] ShopUnlock = 1,
    /// <summary>
    ///展示
    /// </summary>
    [pbr::OriginalName("SHOP_DISPLAY")] ShopDisplay = 2,
    /// <summary>
    ///购买
    /// </summary>
    [pbr::OriginalName("SHOP_BUY")] ShopBuy = 3,
    /// <summary>
    ///创建限购物品
    /// </summary>
    [pbr::OriginalName("SHOP_CREATE_LIMIT")] ShopCreateLimit = 4,
  }

  public enum ICON_TYPE {
    /// <summary>
    ///默认枚举
    /// </summary>
    [pbr::OriginalName("ICON_TYPE_NULL")] Null = 0,
    /// <summary>
    ///头像
    /// </summary>
    [pbr::OriginalName("ICON_TYPE_ICON")] Icon = 1,
    /// <summary>
    ///头像框
    /// </summary>
    [pbr::OriginalName("ICON_TYPE_FRAME")] Frame = 2,
  }

  /// <summary>
  /// 影响 [金币, 钻石, 石块, 经验] 数据的类型枚举
  /// 客户端是从(1000-1500] ECMT是[eCLIENT_AFFECT_MATERIAL_TYPE]的缩写
  /// 服务端是从(2000-2500] ESMT是[eSERVER_AFFECT_MATERIAL_TYPE]的缩写
  /// </summary>
  public enum AFFECT_MATERIAL_TYPE {
    /// <summary>
    ///默认枚举
    /// </summary>
    [pbr::OriginalName("AFFECT_MATERIAL_TYPE_NULL")] Null = 0,
    /// <summary>
    ///客户端操作物资-----------------------------------------------------------------
    /// </summary>
    [pbr::OriginalName("ECMT_BUY_LEVEL_TIME")] EcmtBuyLevelTime = 1001,
    /// <summary>
    ///购买 关卡体力
    /// </summary>
    [pbr::OriginalName("ECMT_BUY_LEVEL_SHOP")] EcmtBuyLevelShop = 1002,
    /// <summary>
    ///关卡 跳过任务
    /// </summary>
    [pbr::OriginalName("ECMT_LEVEL_SKIP_TASK")] EcmtLevelSkipTask = 1003,
    /// <summary>
    ///合成
    /// </summary>
    [pbr::OriginalName("ECMT_SYNTHESIS_THINGS")] EcmtSynthesisThings = 1004,
    /// <summary>
    ///净化死地
    /// </summary>
    [pbr::OriginalName("ECMT_PURIFY_THE_DEAD_GROUND")] EcmtPurifyTheDeadGround = 1005,
    /// <summary>
    ///点击生命之球
    /// </summary>
    [pbr::OriginalName("ECMT_CLICK_THE_BALL_OF_LIFE")] EcmtClickTheBallOfLife = 1006,
    /// <summary>
    ///点击积分道具
    /// </summary>
    [pbr::OriginalName("ECMT_CLICK_INTEGRAL_PROPS")] EcmtClickIntegralProps = 1007,
    /// <summary>
    ///点击钻石道具
    /// </summary>
    [pbr::OriginalName("ECMT_CLICK_DIAMOND_PROPS")] EcmtClickDiamondProps = 1008,
    /// <summary>
    ///购买付费宝箱
    /// </summary>
    [pbr::OriginalName("ECMT_BUY_DRAGON_BOX")] EcmtBuyDragonBox = 1009,
    /// <summary>
    ///服务端操作物资-----------------------------------------------------------------
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_TIMED_SHOP")] EsmtBuyTimedShop = 2001,
    /// <summary>
    ///扣除 龙蛋或宝箱商店
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_EGG_OR_BOX_SHOP")] EsmtBuyEggOrBoxShop = 2002,
    /// <summary>
    ///扣除 关卡商店
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_LEVEL_SHOP")] EsmtBuyLevelShop = 2003,
    /// <summary>
    ///扣除 建筑商店
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_BUILDING_SHOP")] EsmtBuyBuildingShop = 2004,
    /// <summary>
    ///扣除 保护时间
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_PLUNDER_PROTECT_TIME")] EsmtBuyPlunderProtectTime = 2005,
    /// <summary>
    ///扣除 体力使用钻石
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_AP_USE_DIAMOND")] EsmtBuyApUseDiamond = 2006,
    /// <summary>
    ///扣除 用户更改名称
    /// </summary>
    [pbr::OriginalName("ESMT_CHANGE_USER_NAME")] EsmtChangeUserName = 2007,
    /// <summary>
    ///扣除 创建联盟 
    /// </summary>
    [pbr::OriginalName("ESMT_CREATE_ALLIANCE")] EsmtCreateAlliance = 2008,
    /// <summary>
    ///扣除 完成关卡
    /// </summary>
    [pbr::OriginalName("ESMT_FINISH_LEVEL")] EsmtFinishLevel = 2009,
    /// <summary>
    ///增加 购买宝石
    /// </summary>
    [pbr::OriginalName("ESMT_PURCHASE_DIAMOND")] EsmtPurchaseDiamond = 2010,
    /// <summary>
    ///增加 关卡奖励
    /// </summary>
    [pbr::OriginalName("ESMT_LEVEL_UPDATE")] EsmtLevelUpdate = 2011,
    /// <summary>
    ///扣除 购买关卡宝箱
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_LEVEL_BOX")] EsmtBuyLevelBox = 2012,
    /// <summary>
    ///扣除 购买保护时间
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_PROTECT_TIME")] EsmtBuyProtectTime = 2013,
    /// <summary>
    ///扣除 钻石购买巨龙休息时间
    /// </summary>
    [pbr::OriginalName("ESMT_SKIP_MONSTER_REST")] EsmtSkipMonsterRest = 2014,
    /// <summary>
    ///扣除 联盟科技捐献
    /// </summary>
    [pbr::OriginalName("ESMT_ALLIANCE_TECK_DONATE")] EsmtAllianceTeckDonate = 2015,
    /// <summary>
    ///扣除 vip商店刷新
    /// </summary>
    [pbr::OriginalName("ESMT_UPDATE_VIP_SHOP")] EsmtUpdateVipShop = 2016,
    /// <summary>
    ///扣除 vip商店购买
    /// </summary>
    [pbr::OriginalName("ESMT_BUY_VIP_SHOP")] EsmtBuyVipShop = 2017,
    /// <summary>
    ///增加 签到活动相关的增加
    /// </summary>
    [pbr::OriginalName("ESMT_SIGN_REWARD")] EsmtSignReward = 2018,
    /// <summary>
    ///扣除 掠夺匹配
    /// </summary>
    [pbr::OriginalName("ESMT_PLUNDER_MATCH")] EsmtPlunderMatch = 2019,
    /// <summary>
    ///邮件 附件领取
    /// </summary>
    [pbr::OriginalName("ESMT_MAIL_REWARD")] EsmtMailReward = 2020,
    /// <summary>
    ///增加 网页奖励
    /// </summary>
    [pbr::OriginalName("ESMT_WEB_UPDATE")] EsmtWebUpdate = 2021,
    /// <summary>
    ///增加 普通活动增加
    /// </summary>
    [pbr::OriginalName("ESMT_NORMAL_ACTIVITY_REWARD")] EsmtNormalActivityReward = 2022,
    /// <summary>
    ///增加 充值活动增加
    /// </summary>
    [pbr::OriginalName("ESMT_RECHARGE_ACTIVITY_REWARD")] EsmtRechargeActivityReward = 2023,
    /// <summary>
    ///扣除 钻石跳过建造时间
    /// </summary>
    [pbr::OriginalName("ESMT_DIAMOND_SKIP_BUILT_TIME")] EsmtDiamondSkipBuiltTime = 2024,
  }

  public enum AFFECT_VIP_SCORE_TYPE {
    /// <summary>
    ///默认枚举
    /// </summary>
    [pbr::OriginalName("AFFECT_VIP_SCORE_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///充值类奖励----------------
    /// </summary>
    [pbr::OriginalName("EVSR_FIRST_RECHARGE")] EvsrFirstRecharge = 500,
    /// <summary>
    ///月卡
    /// </summary>
    [pbr::OriginalName("EVSR_MONTH_CARD")] EvsrMonthCard = 501,
    /// <summary>
    ///普通充值
    /// </summary>
    [pbr::OriginalName("EVSR_NORMAL_RECHARGE")] EvsrNormalRecharge = 502,
    /// <summary>
    ///高端区解锁
    /// </summary>
    [pbr::OriginalName("EVSR_HIGH_AREA_UNLOCK")] EvsrHighAreaUnlock = 503,
    /// <summary>
    ///活动类奖励----------------
    /// </summary>
    [pbr::OriginalName("EVSA_DAILY_REWARD")] EvsaDailyReward = 600,
  }

  /// <summary>
  ///-----------------Rank
  ///排行榜相关数据------
  ///排行榜类型
  /// </summary>
  public enum RANK_TYPE {
    /// <summary>
    ///默认枚举
    /// </summary>
    [pbr::OriginalName("RANK_TYPE_NULL")] Null = 0,
    /// <summary>
    ///总战斗力
    /// </summary>
    [pbr::OriginalName("RANK_TYPE_MONSTER")] Monster = 1,
    /// <summary>
    ///任务点数
    /// </summary>
    [pbr::OriginalName("RANK_TYPE_TASK")] Task = 2,
    /// <summary>
    ///图鉴积分
    /// </summary>
    [pbr::OriginalName("RANK_TYPE_SIGN")] Sign = 3,
    /// <summary>
    ///等级
    /// </summary>
    [pbr::OriginalName("RANK_TYPE_LEVEL")] Level = 4,
    /// <summary>
    ///掠夺排行榜
    /// </summary>
    [pbr::OriginalName("RANK_TYPE_PLUNDER")] Plunder = 5,
  }

  /// <summary>
  ///排行榜相关数据--------
  ///掠夺赛季状态
  /// </summary>
  public enum PLUNDER_RANK_STATUS {
    /// <summary>
    ///开始
    /// </summary>
    [pbr::OriginalName("PLUNDER_RANK_STATUS_NULL")] Null = 0,
    /// <summary>
    ///开始
    /// </summary>
    [pbr::OriginalName("PLUNDER_RANK_STATUS_OPEN")] Open = 1,
    /// <summary>
    ///关闭
    /// </summary>
    [pbr::OriginalName("PLUNDER_RANK_STATUS_CLOSE")] Close = 2,
  }

  /// <summary>
  ///领取活动奖励回复类型
  /// </summary>
  public enum ACTIVITY_RESPONSE_TYPE {
    [pbr::OriginalName("RECEIVE_ACTIVITY_RESPONSE_NULL")] ReceiveActivityResponseNull = 0,
    /// <summary>
    ///返回错误
    /// </summary>
    [pbr::OriginalName("RECEIVE_ACTIVITY_RESPONSE_ERROR")] ReceiveActivityResponseError = 1,
    /// <summary>
    ///活动还未完成不能领取
    /// </summary>
    [pbr::OriginalName("RECEIVE_ACTIVITY_RESPONSE_NO_COMPLETE")] ReceiveActivityResponseNoComplete = 2,
    /// <summary>
    ///活动已经领取了奖励，不能再领取了
    /// </summary>
    [pbr::OriginalName("RECEIVE_ACTIVITY_RESPONSE_RECEIVE")] ReceiveActivityResponseReceive = 3,
    /// <summary>
    ///领取成功
    /// </summary>
    [pbr::OriginalName("RECEIVE_ACTIVITY_RESPONSE_SUCCESS")] ReceiveActivityResponseSuccess = 4,
  }

  public enum CHECK_REWARD_TYPE {
    /// <summary>
    ///默认
    /// </summary>
    [pbr::OriginalName("CHECK_REWARD_TYPE_NULL")] Null = 0,
    /// <summary>
    ///新手福利
    /// </summary>
    [pbr::OriginalName("CHECK_REWARD_TYPE_NOVICE_WELFARE")] NoviceWelfare = 1,
    /// <summary>
    ///每日签到
    /// </summary>
    [pbr::OriginalName("CHECK_REWARD_TYPE_DAILY_CHECK")] DailyCheck = 2,
    /// <summary>
    ///补签到
    /// </summary>
    [pbr::OriginalName("CHECK_REWARD_TYPE_SUPPLEMENT_CHECK")] SupplementCheck = 3,
    /// <summary>
    ///每日时间阶段性奖励
    /// </summary>
    [pbr::OriginalName("CHECK_REWARD_TYPE_TIME_STAGE_REWARD")] TimeStageReward = 4,
    /// <summary>
    ///签到阶段性奖励   
    /// </summary>
    [pbr::OriginalName("CHECK_REWARD_TYPE_COUNT_STAGE_REWARD")] CountStageReward = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///----------------------------Login
  ///登录/注册 请求
  /// </summary>
  public sealed partial class Login_event : pb::IMessage<Login_event> {
    private static readonly pb::MessageParser<Login_event> _parser = new pb::MessageParser<Login_event>(() => new Login_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_event(Login_event other) : this() {
      type_ = other.type_;
      account_ = other.account_;
      password_ = other.password_;
      platform_ = other.platform_;
      version_ = other.version_;
      remarks_ = other.remarks_;
      country_ = other.country_;
      tunnel_ = other.tunnel_;
      time_ = other.time_;
      equipment_ = other.equipment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_event Clone() {
      return new Login_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Platform_type type_ = 0;
    /// <summary>
    ///类型  ***  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Platform_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///账号  **
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    /// <summary>
    ///密码  **
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 4;
    private string platform_ = "";
    /// <summary>
    ///平台标识 ** 与第三方注册和登录相关
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    /// <summary>
    ///版本 *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remarks" field.</summary>
    public const int RemarksFieldNumber = 6;
    private string remarks_ = "";
    /// <summary>
    ///备注信息 *
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Remarks {
      get { return remarks_; }
      set {
        remarks_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 7;
    private string country_ = "";
    /// <summary>
    ///国家信息[仅在注册成功后会写入数据库]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tunnel" field.</summary>
    public const int TunnelFieldNumber = 8;
    private string tunnel_ = "";
    /// <summary>
    ///渠道 注册渠道
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tunnel {
      get { return tunnel_; }
      set {
        tunnel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 9;
    private ulong time_;
    /// <summary>
    ///游客注册发起时间[非游客请忽略]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "equipment" field.</summary>
    public const int EquipmentFieldNumber = 10;
    private string equipment_ = "";
    /// <summary>
    ///设备标识 [|IDFA|IDFV|AAID|DeviceID|]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Equipment {
      get { return equipment_; }
      set {
        equipment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (Platform != other.Platform) return false;
      if (Version != other.Version) return false;
      if (Remarks != other.Remarks) return false;
      if (Country != other.Country) return false;
      if (Tunnel != other.Tunnel) return false;
      if (Time != other.Time) return false;
      if (Equipment != other.Equipment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Remarks.Length != 0) hash ^= Remarks.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (Tunnel.Length != 0) hash ^= Tunnel.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (Equipment.Length != 0) hash ^= Equipment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Platform);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
      if (Remarks.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Remarks);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Country);
      }
      if (Tunnel.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Tunnel);
      }
      if (Time != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(Time);
      }
      if (Equipment.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Equipment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Remarks.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Remarks);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (Tunnel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tunnel);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (Equipment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Equipment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Remarks.Length != 0) {
        Remarks = other.Remarks;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.Tunnel.Length != 0) {
        Tunnel = other.Tunnel;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.Equipment.Length != 0) {
        Equipment = other.Equipment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Platform_type) input.ReadEnum();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Platform = input.ReadString();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
          case 50: {
            Remarks = input.ReadString();
            break;
          }
          case 58: {
            Country = input.ReadString();
            break;
          }
          case 66: {
            Tunnel = input.ReadString();
            break;
          }
          case 72: {
            Time = input.ReadUInt64();
            break;
          }
          case 82: {
            Equipment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///绑定请求
  ///在些请求不处理更新第三方头像的逻辑
  /// </summary>
  public sealed partial class Login_bind_event : pb::IMessage<Login_bind_event> {
    private static readonly pb::MessageParser<Login_bind_event> _parser = new pb::MessageParser<Login_bind_event>(() => new Login_bind_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login_bind_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_bind_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_bind_event(Login_bind_event other) : this() {
      account_ = other.account_;
      type_ = other.type_;
      platformUid_ = other.platformUid_;
      iconUrl_ = other.iconUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_bind_event Clone() {
      return new Login_bind_event(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::GameProto.Platform_type type_ = 0;
    /// <summary>
    ///目标平台类型  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Platform_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "platform_uid" field.</summary>
    public const int PlatformUidFieldNumber = 3;
    private string platformUid_ = "";
    /// <summary>
    ///平台标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformUid {
      get { return platformUid_; }
      set {
        platformUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon_url" field.</summary>
    public const int IconUrlFieldNumber = 4;
    private string iconUrl_ = "";
    /// <summary>
    ///图像url
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconUrl {
      get { return iconUrl_; }
      set {
        iconUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login_bind_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login_bind_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Account != other.Account) return false;
      if (Type != other.Type) return false;
      if (PlatformUid != other.PlatformUid) return false;
      if (IconUrl != other.IconUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PlatformUid.Length != 0) hash ^= PlatformUid.GetHashCode();
      if (IconUrl.Length != 0) hash ^= IconUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (PlatformUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlatformUid);
      }
      if (IconUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IconUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (PlatformUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformUid);
      }
      if (IconUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login_bind_event other) {
      if (other == null) {
        return;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PlatformUid.Length != 0) {
        PlatformUid = other.PlatformUid;
      }
      if (other.IconUrl.Length != 0) {
        IconUrl = other.IconUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::GameProto.Platform_type) input.ReadEnum();
            break;
          }
          case 26: {
            PlatformUid = input.ReadString();
            break;
          }
          case 34: {
            IconUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改邮箱地址
  /// </summary>
  public sealed partial class Login_update_mail : pb::IMessage<Login_update_mail> {
    private static readonly pb::MessageParser<Login_update_mail> _parser = new pb::MessageParser<Login_update_mail>(() => new Login_update_mail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login_update_mail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_update_mail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_update_mail(Login_update_mail other) : this() {
      mailAddress_ = other.mailAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_update_mail Clone() {
      return new Login_update_mail(this);
    }

    /// <summary>Field number for the "mail_address" field.</summary>
    public const int MailAddressFieldNumber = 1;
    private string mailAddress_ = "";
    /// <summary>
    ///邮箱地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MailAddress {
      get { return mailAddress_; }
      set {
        mailAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login_update_mail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login_update_mail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MailAddress != other.MailAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MailAddress.Length != 0) hash ^= MailAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MailAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MailAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MailAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MailAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login_update_mail other) {
      if (other == null) {
        return;
      }
      if (other.MailAddress.Length != 0) {
        MailAddress = other.MailAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MailAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登录/注册/绑定/修改统一返回结构体
  /// </summary>
  public sealed partial class Login_response : pb::IMessage<Login_response> {
    private static readonly pb::MessageParser<Login_response> _parser = new pb::MessageParser<Login_response>(() => new Login_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_response(Login_response other) : this() {
      status_ = other.status_;
      type_ = other.type_;
      platformUid_ = other.platformUid_;
      userId_ = other.userId_;
      account_ = other.account_;
      password_ = other.password_;
      errorCode_ = other.errorCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_response Clone() {
      return new Login_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Login_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Login_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::GameProto.Platform_type type_ = 0;
    /// <summary>
    ///平台标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Platform_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "platform_uid" field.</summary>
    public const int PlatformUidFieldNumber = 3;
    private string platformUid_ = "";
    /// <summary>
    ///平台uid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformUid {
      get { return platformUid_; }
      set {
        platformUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 4;
    private uint userId_;
    /// <summary>
    ///用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 5;
    private string account_ = "";
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 6;
    private string password_ = "";
    /// <summary>
    ///密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 7;
    private uint errorCode_;
    /// <summary>
    ///不能正常登录的标识码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Type != other.Type) return false;
      if (PlatformUid != other.PlatformUid) return false;
      if (UserId != other.UserId) return false;
      if (Account != other.Account) return false;
      if (Password != other.Password) return false;
      if (ErrorCode != other.ErrorCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PlatformUid.Length != 0) hash ^= PlatformUid.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (PlatformUid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlatformUid);
      }
      if (UserId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UserId);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Password);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ErrorCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (PlatformUid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformUid);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PlatformUid.Length != 0) {
        PlatformUid = other.PlatformUid;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Login_status) input.ReadEnum();
            break;
          }
          case 16: {
            type_ = (global::GameProto.Platform_type) input.ReadEnum();
            break;
          }
          case 26: {
            PlatformUid = input.ReadString();
            break;
          }
          case 32: {
            UserId = input.ReadUInt32();
            break;
          }
          case 42: {
            Account = input.ReadString();
            break;
          }
          case 50: {
            Password = input.ReadString();
            break;
          }
          case 56: {
            ErrorCode = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Friend_data : pb::IMessage<Friend_data> {
    private static readonly pb::MessageParser<Friend_data> _parser = new pb::MessageParser<Friend_data>(() => new Friend_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_data(Friend_data other) : this() {
      userId_ = other.userId_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      Essential = other.essential_ != null ? other.Essential.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_data Clone() {
      return new Friend_data(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::GameProto.Player_data player_;
    /// <summary>
    ///玩家基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "essential" field.</summary>
    public const int EssentialFieldNumber = 3;
    private global::GameProto.Essential_data essential_;
    /// <summary>
    ///玩家重要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Essential_data Essential {
      get { return essential_; }
      set {
        essential_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Essential, other.Essential)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (essential_ != null) hash ^= Essential.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (essential_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Essential);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (essential_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Essential);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend_data other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::GameProto.Player_data();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.essential_ != null) {
        if (essential_ == null) {
          essential_ = new global::GameProto.Essential_data();
        }
        Essential.MergeFrom(other.Essential);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(player_);
            break;
          }
          case 26: {
            if (essential_ == null) {
              essential_ = new global::GameProto.Essential_data();
            }
            input.ReadMessage(essential_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///好友数据列表
  /// </summary>
  public sealed partial class Friend_data_list : pb::IMessage<Friend_data_list> {
    private static readonly pb::MessageParser<Friend_data_list> _parser = new pb::MessageParser<Friend_data_list>(() => new Friend_data_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend_data_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_data_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_data_list(Friend_data_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_data_list Clone() {
      return new Friend_data_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Friend_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Friend_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Friend_data> list_ = new pbc::RepeatedField<global::GameProto.Friend_data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Friend_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend_data_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend_data_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend_data_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作好友请求
  /// </summary>
  public sealed partial class Act_friend_event : pb::IMessage<Act_friend_event> {
    private static readonly pb::MessageParser<Act_friend_event> _parser = new pb::MessageParser<Act_friend_event>(() => new Act_friend_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Act_friend_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_friend_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_friend_event(Act_friend_event other) : this() {
      type_ = other.type_;
      dstUserId_ = other.dstUserId_;
      deleteAllApply_ = other.deleteAllApply_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_friend_event Clone() {
      return new Act_friend_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Act_friend_type type_ = 0;
    /// <summary>
    ///请求类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Act_friend_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "dst_user_id" field.</summary>
    public const int DstUserIdFieldNumber = 2;
    private uint dstUserId_;
    /// <summary>
    ///目标用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstUserId {
      get { return dstUserId_; }
      set {
        dstUserId_ = value;
      }
    }

    /// <summary>Field number for the "delete_all_apply" field.</summary>
    public const int DeleteAllApplyFieldNumber = 3;
    private bool deleteAllApply_;
    /// <summary>
    ///删除所有申请
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DeleteAllApply {
      get { return deleteAllApply_; }
      set {
        deleteAllApply_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Act_friend_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Act_friend_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (DstUserId != other.DstUserId) return false;
      if (DeleteAllApply != other.DeleteAllApply) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (DstUserId != 0) hash ^= DstUserId.GetHashCode();
      if (DeleteAllApply != false) hash ^= DeleteAllApply.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (DstUserId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DstUserId);
      }
      if (DeleteAllApply != false) {
        output.WriteRawTag(24);
        output.WriteBool(DeleteAllApply);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (DstUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstUserId);
      }
      if (DeleteAllApply != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Act_friend_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.DstUserId != 0) {
        DstUserId = other.DstUserId;
      }
      if (other.DeleteAllApply != false) {
        DeleteAllApply = other.DeleteAllApply;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Act_friend_type) input.ReadEnum();
            break;
          }
          case 16: {
            DstUserId = input.ReadUInt32();
            break;
          }
          case 24: {
            DeleteAllApply = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作好友返回
  /// </summary>
  public sealed partial class Act_friend_response : pb::IMessage<Act_friend_response> {
    private static readonly pb::MessageParser<Act_friend_response> _parser = new pb::MessageParser<Act_friend_response>(() => new Act_friend_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Act_friend_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_friend_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_friend_response(Act_friend_response other) : this() {
      status_ = other.status_;
      FriendData = other.friendData_ != null ? other.FriendData.Clone() : null;
      dstUserId_ = other.dstUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_friend_response Clone() {
      return new Act_friend_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "friend_data" field.</summary>
    public const int FriendDataFieldNumber = 2;
    private global::GameProto.Friend_data friendData_;
    /// <summary>
    ///用户信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Friend_data FriendData {
      get { return friendData_; }
      set {
        friendData_ = value;
      }
    }

    /// <summary>Field number for the "dst_user_id" field.</summary>
    public const int DstUserIdFieldNumber = 3;
    private uint dstUserId_;
    /// <summary>
    ///目标用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstUserId {
      get { return dstUserId_; }
      set {
        dstUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Act_friend_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Act_friend_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(FriendData, other.FriendData)) return false;
      if (DstUserId != other.DstUserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (friendData_ != null) hash ^= FriendData.GetHashCode();
      if (DstUserId != 0) hash ^= DstUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (friendData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FriendData);
      }
      if (DstUserId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DstUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (friendData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendData);
      }
      if (DstUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Act_friend_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.friendData_ != null) {
        if (friendData_ == null) {
          friendData_ = new global::GameProto.Friend_data();
        }
        FriendData.MergeFrom(other.FriendData);
      }
      if (other.DstUserId != 0) {
        DstUserId = other.DstUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (friendData_ == null) {
              friendData_ = new global::GameProto.Friend_data();
            }
            input.ReadMessage(friendData_);
            break;
          }
          case 24: {
            DstUserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查找好友
  /// </summary>
  public sealed partial class Find_friend_event : pb::IMessage<Find_friend_event> {
    private static readonly pb::MessageParser<Find_friend_event> _parser = new pb::MessageParser<Find_friend_event>(() => new Find_friend_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Find_friend_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Find_friend_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Find_friend_event(Find_friend_event other) : this() {
      userName_ = other.userName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Find_friend_event Clone() {
      return new Find_friend_event(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    /// <summary>
    ///需求中是根据用户昵称查找
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Find_friend_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Find_friend_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Find_friend_event other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查找好友返回
  /// </summary>
  public sealed partial class Find_friend_response : pb::IMessage<Find_friend_response> {
    private static readonly pb::MessageParser<Find_friend_response> _parser = new pb::MessageParser<Find_friend_response>(() => new Find_friend_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Find_friend_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Find_friend_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Find_friend_response(Find_friend_response other) : this() {
      status_ = other.status_;
      friendList_ = other.friendList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Find_friend_response Clone() {
      return new Find_friend_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "friend_list" field.</summary>
    public const int FriendListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Friend_data> _repeated_friendList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Friend_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Friend_data> friendList_ = new pbc::RepeatedField<global::GameProto.Friend_data>();
    /// <summary>
    ///用户列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Friend_data> FriendList {
      get { return friendList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Find_friend_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Find_friend_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!friendList_.Equals(other.friendList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= friendList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      friendList_.WriteTo(output, _repeated_friendList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += friendList_.CalculateSize(_repeated_friendList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Find_friend_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      friendList_.Add(other.friendList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            friendList_.AddEntriesFrom(input, _repeated_friendList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///赠送好友体力
  /// </summary>
  public sealed partial class Friend_ap_event : pb::IMessage<Friend_ap_event> {
    private static readonly pb::MessageParser<Friend_ap_event> _parser = new pb::MessageParser<Friend_ap_event>(() => new Friend_ap_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend_ap_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_ap_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_ap_event(Friend_ap_event other) : this() {
      type_ = other.type_;
      IdList = other.idList_ != null ? other.IdList.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_ap_event Clone() {
      return new Friend_ap_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Act_ap_type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Act_ap_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id_list" field.</summary>
    public const int IdListFieldNumber = 2;
    private global::GameProto.User_id_list idList_;
    /// <summary>
    ///目标用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.User_id_list IdList {
      get { return idList_; }
      set {
        idList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend_ap_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend_ap_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(IdList, other.IdList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (idList_ != null) hash ^= IdList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (idList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IdList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (idList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend_ap_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.idList_ != null) {
        if (idList_ == null) {
          idList_ = new global::GameProto.User_id_list();
        }
        IdList.MergeFrom(other.IdList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Act_ap_type) input.ReadEnum();
            break;
          }
          case 18: {
            if (idList_ == null) {
              idList_ = new global::GameProto.User_id_list();
            }
            input.ReadMessage(idList_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回
  /// </summary>
  public sealed partial class Friend_ap_response : pb::IMessage<Friend_ap_response> {
    private static readonly pb::MessageParser<Friend_ap_response> _parser = new pb::MessageParser<Friend_ap_response>(() => new Friend_ap_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend_ap_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_ap_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_ap_response(Friend_ap_response other) : this() {
      status_ = other.status_;
      SendList = other.sendList_ != null ? other.SendList.Clone() : null;
      RecvList = other.recvList_ != null ? other.RecvList.Clone() : null;
      dstUserId_ = other.dstUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_ap_response Clone() {
      return new Friend_ap_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "send_list" field.</summary>
    public const int SendListFieldNumber = 2;
    private global::GameProto.User_id_list sendList_;
    /// <summary>
    ///赠送列表(一键领取并赠送使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.User_id_list SendList {
      get { return sendList_; }
      set {
        sendList_ = value;
      }
    }

    /// <summary>Field number for the "recv_list" field.</summary>
    public const int RecvListFieldNumber = 3;
    private global::GameProto.User_id_list recvList_;
    /// <summary>
    ///领取列表(一键领取并赠送使用）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.User_id_list RecvList {
      get { return recvList_; }
      set {
        recvList_ = value;
      }
    }

    /// <summary>Field number for the "dst_user_id" field.</summary>
    public const int DstUserIdFieldNumber = 4;
    private uint dstUserId_;
    /// <summary>
    ///目标用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstUserId {
      get { return dstUserId_; }
      set {
        dstUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend_ap_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend_ap_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(SendList, other.SendList)) return false;
      if (!object.Equals(RecvList, other.RecvList)) return false;
      if (DstUserId != other.DstUserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (sendList_ != null) hash ^= SendList.GetHashCode();
      if (recvList_ != null) hash ^= RecvList.GetHashCode();
      if (DstUserId != 0) hash ^= DstUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (sendList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SendList);
      }
      if (recvList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RecvList);
      }
      if (DstUserId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DstUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (sendList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendList);
      }
      if (recvList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecvList);
      }
      if (DstUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend_ap_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.sendList_ != null) {
        if (sendList_ == null) {
          sendList_ = new global::GameProto.User_id_list();
        }
        SendList.MergeFrom(other.SendList);
      }
      if (other.recvList_ != null) {
        if (recvList_ == null) {
          recvList_ = new global::GameProto.User_id_list();
        }
        RecvList.MergeFrom(other.RecvList);
      }
      if (other.DstUserId != 0) {
        DstUserId = other.DstUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (sendList_ == null) {
              sendList_ = new global::GameProto.User_id_list();
            }
            input.ReadMessage(sendList_);
            break;
          }
          case 26: {
            if (recvList_ == null) {
              recvList_ = new global::GameProto.User_id_list();
            }
            input.ReadMessage(recvList_);
            break;
          }
          case 32: {
            DstUserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Recv_ap_data : pb::IMessage<Recv_ap_data> {
    private static readonly pb::MessageParser<Recv_ap_data> _parser = new pb::MessageParser<Recv_ap_data>(() => new Recv_ap_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recv_ap_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recv_ap_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recv_ap_data(Recv_ap_data other) : this() {
      userId_ = other.userId_;
      isGet_ = other.isGet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recv_ap_data Clone() {
      return new Recv_ap_data(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "is_get" field.</summary>
    public const int IsGetFieldNumber = 2;
    private bool isGet_;
    /// <summary>
    ///是否领取
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsGet {
      get { return isGet_; }
      set {
        isGet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recv_ap_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recv_ap_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (IsGet != other.IsGet) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (IsGet != false) hash ^= IsGet.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (IsGet != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsGet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (IsGet != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recv_ap_data other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.IsGet != false) {
        IsGet = other.IsGet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 16: {
            IsGet = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///收到好友赠送体力列表
  /// </summary>
  public sealed partial class Recv_ap_list : pb::IMessage<Recv_ap_list> {
    private static readonly pb::MessageParser<Recv_ap_list> _parser = new pb::MessageParser<Recv_ap_list>(() => new Recv_ap_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recv_ap_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recv_ap_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recv_ap_list(Recv_ap_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recv_ap_list Clone() {
      return new Recv_ap_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Recv_ap_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Recv_ap_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Recv_ap_data> list_ = new pbc::RepeatedField<global::GameProto.Recv_ap_data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Recv_ap_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recv_ap_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recv_ap_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recv_ap_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家id列表
  /// </summary>
  public sealed partial class User_id_list : pb::IMessage<User_id_list> {
    private static readonly pb::MessageParser<User_id_list> _parser = new pb::MessageParser<User_id_list>(() => new User_id_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User_id_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User_id_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User_id_list(User_id_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User_id_list Clone() {
      return new User_id_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_list_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> list_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User_id_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User_id_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User_id_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户列表和好友数据
  /// </summary>
  public sealed partial class Friend_list_response : pb::IMessage<Friend_list_response> {
    private static readonly pb::MessageParser<Friend_list_response> _parser = new pb::MessageParser<Friend_list_response>(() => new Friend_list_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Friend_list_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_list_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_list_response(Friend_list_response other) : this() {
      status_ = other.status_;
      FriendList = other.friendList_ != null ? other.FriendList.Clone() : null;
      SendList = other.sendList_ != null ? other.SendList.Clone() : null;
      RecvList = other.recvList_ != null ? other.RecvList.Clone() : null;
      ApplyList = other.applyList_ != null ? other.ApplyList.Clone() : null;
      apResetTime_ = other.apResetTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Friend_list_response Clone() {
      return new Friend_list_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "friend_list" field.</summary>
    public const int FriendListFieldNumber = 2;
    private global::GameProto.Friend_data_list friendList_;
    /// <summary>
    ///好友数据列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Friend_data_list FriendList {
      get { return friendList_; }
      set {
        friendList_ = value;
      }
    }

    /// <summary>Field number for the "send_list" field.</summary>
    public const int SendListFieldNumber = 3;
    private global::GameProto.User_id_list sendList_;
    /// <summary>
    ///赠送体力的好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.User_id_list SendList {
      get { return sendList_; }
      set {
        sendList_ = value;
      }
    }

    /// <summary>Field number for the "recv_list" field.</summary>
    public const int RecvListFieldNumber = 4;
    private global::GameProto.Recv_ap_list recvList_;
    /// <summary>
    ///收到赠送体力的好友列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Recv_ap_list RecvList {
      get { return recvList_; }
      set {
        recvList_ = value;
      }
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 5;
    private global::GameProto.Friend_data_list applyList_;
    /// <summary>
    ///申请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Friend_data_list ApplyList {
      get { return applyList_; }
      set {
        applyList_ = value;
      }
    }

    /// <summary>Field number for the "ap_reset_time" field.</summary>
    public const int ApResetTimeFieldNumber = 6;
    private ulong apResetTime_;
    /// <summary>
    ///体力数据重置时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ApResetTime {
      get { return apResetTime_; }
      set {
        apResetTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Friend_list_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Friend_list_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(FriendList, other.FriendList)) return false;
      if (!object.Equals(SendList, other.SendList)) return false;
      if (!object.Equals(RecvList, other.RecvList)) return false;
      if (!object.Equals(ApplyList, other.ApplyList)) return false;
      if (ApResetTime != other.ApResetTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (friendList_ != null) hash ^= FriendList.GetHashCode();
      if (sendList_ != null) hash ^= SendList.GetHashCode();
      if (recvList_ != null) hash ^= RecvList.GetHashCode();
      if (applyList_ != null) hash ^= ApplyList.GetHashCode();
      if (ApResetTime != 0UL) hash ^= ApResetTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (friendList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FriendList);
      }
      if (sendList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SendList);
      }
      if (recvList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RecvList);
      }
      if (applyList_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ApplyList);
      }
      if (ApResetTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ApResetTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (friendList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FriendList);
      }
      if (sendList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendList);
      }
      if (recvList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RecvList);
      }
      if (applyList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplyList);
      }
      if (ApResetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ApResetTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Friend_list_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.friendList_ != null) {
        if (friendList_ == null) {
          friendList_ = new global::GameProto.Friend_data_list();
        }
        FriendList.MergeFrom(other.FriendList);
      }
      if (other.sendList_ != null) {
        if (sendList_ == null) {
          sendList_ = new global::GameProto.User_id_list();
        }
        SendList.MergeFrom(other.SendList);
      }
      if (other.recvList_ != null) {
        if (recvList_ == null) {
          recvList_ = new global::GameProto.Recv_ap_list();
        }
        RecvList.MergeFrom(other.RecvList);
      }
      if (other.applyList_ != null) {
        if (applyList_ == null) {
          applyList_ = new global::GameProto.Friend_data_list();
        }
        ApplyList.MergeFrom(other.ApplyList);
      }
      if (other.ApResetTime != 0UL) {
        ApResetTime = other.ApResetTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (friendList_ == null) {
              friendList_ = new global::GameProto.Friend_data_list();
            }
            input.ReadMessage(friendList_);
            break;
          }
          case 26: {
            if (sendList_ == null) {
              sendList_ = new global::GameProto.User_id_list();
            }
            input.ReadMessage(sendList_);
            break;
          }
          case 34: {
            if (recvList_ == null) {
              recvList_ = new global::GameProto.Recv_ap_list();
            }
            input.ReadMessage(recvList_);
            break;
          }
          case 42: {
            if (applyList_ == null) {
              applyList_ = new global::GameProto.Friend_data_list();
            }
            input.ReadMessage(applyList_);
            break;
          }
          case 48: {
            ApResetTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送消息 请求
  ///广播聊天消息
  /// </summary>
  public sealed partial class Chat_event : pb::IMessage<Chat_event> {
    private static readonly pb::MessageParser<Chat_event> _parser = new pb::MessageParser<Chat_event>(() => new Chat_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chat_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat_event(Chat_event other) : this() {
      userId_ = other.userId_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      Essential = other.essential_ != null ? other.Essential.Clone() : null;
      msgBuf_ = other.msgBuf_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat_event Clone() {
      return new Chat_event(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::GameProto.Player_data player_;
    /// <summary>
    ///玩家基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "essential" field.</summary>
    public const int EssentialFieldNumber = 3;
    private global::GameProto.Essential_data essential_;
    /// <summary>
    ///玩家重要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Essential_data Essential {
      get { return essential_; }
      set {
        essential_ = value;
      }
    }

    /// <summary>Field number for the "msg_buf" field.</summary>
    public const int MsgBufFieldNumber = 4;
    private string msgBuf_ = "";
    /// <summary>
    ///消息内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MsgBuf {
      get { return msgBuf_; }
      set {
        msgBuf_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 5;
    private ulong time_;
    /// <summary>
    ///发送时间（服务器填充）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chat_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chat_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Essential, other.Essential)) return false;
      if (MsgBuf != other.MsgBuf) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (essential_ != null) hash ^= Essential.GetHashCode();
      if (MsgBuf.Length != 0) hash ^= MsgBuf.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (essential_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Essential);
      }
      if (MsgBuf.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MsgBuf);
      }
      if (Time != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (essential_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Essential);
      }
      if (MsgBuf.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgBuf);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chat_event other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::GameProto.Player_data();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.essential_ != null) {
        if (essential_ == null) {
          essential_ = new global::GameProto.Essential_data();
        }
        Essential.MergeFrom(other.Essential);
      }
      if (other.MsgBuf.Length != 0) {
        MsgBuf = other.MsgBuf;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(player_);
            break;
          }
          case 26: {
            if (essential_ == null) {
              essential_ = new global::GameProto.Essential_data();
            }
            input.ReadMessage(essential_);
            break;
          }
          case 34: {
            MsgBuf = input.ReadString();
            break;
          }
          case 40: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///发送消息 回复
  /// </summary>
  public sealed partial class Chat_response : pb::IMessage<Chat_response> {
    private static readonly pb::MessageParser<Chat_response> _parser = new pb::MessageParser<Chat_response>(() => new Chat_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chat_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat_response(Chat_response other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chat_response Clone() {
      return new Chat_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chat_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chat_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chat_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获得玩家更多信息
  /// </summary>
  public sealed partial class Get_more_info_event : pb::IMessage<Get_more_info_event> {
    private static readonly pb::MessageParser<Get_more_info_event> _parser = new pb::MessageParser<Get_more_info_event>(() => new Get_more_info_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get_more_info_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_more_info_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_more_info_event(Get_more_info_event other) : this() {
      dstUserId_ = other.dstUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_more_info_event Clone() {
      return new Get_more_info_event(this);
    }

    /// <summary>Field number for the "dst_user_id" field.</summary>
    public const int DstUserIdFieldNumber = 1;
    private uint dstUserId_;
    /// <summary>
    ///目标用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstUserId {
      get { return dstUserId_; }
      set {
        dstUserId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get_more_info_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get_more_info_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DstUserId != other.DstUserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DstUserId != 0) hash ^= DstUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DstUserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DstUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DstUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get_more_info_event other) {
      if (other == null) {
        return;
      }
      if (other.DstUserId != 0) {
        DstUserId = other.DstUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DstUserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复 获得玩家更多信息
  /// </summary>
  public sealed partial class Get_more_info_response : pb::IMessage<Get_more_info_response> {
    private static readonly pb::MessageParser<Get_more_info_response> _parser = new pb::MessageParser<Get_more_info_response>(() => new Get_more_info_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get_more_info_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_more_info_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_more_info_response(Get_more_info_response other) : this() {
      status_ = other.status_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      Essential = other.essential_ != null ? other.Essential.Clone() : null;
      PlunderArmyData = other.plunderArmyData_ != null ? other.PlunderArmyData.Clone() : null;
      AllianceBase = other.allianceBase_ != null ? other.AllianceBase.Clone() : null;
      dstUserId_ = other.dstUserId_;
      BlackTech = other.blackTech_ != null ? other.BlackTech.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_more_info_response Clone() {
      return new Get_more_info_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::GameProto.Player_data player_;
    /// <summary>
    ///玩家基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "essential" field.</summary>
    public const int EssentialFieldNumber = 3;
    private global::GameProto.Essential_data essential_;
    /// <summary>
    ///玩家重要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Essential_data Essential {
      get { return essential_; }
      set {
        essential_ = value;
      }
    }

    /// <summary>Field number for the "plunder_army_data" field.</summary>
    public const int PlunderArmyDataFieldNumber = 4;
    private global::GameProto.Plunder_army_data plunderArmyData_;
    /// <summary>
    ///攻防阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_army_data PlunderArmyData {
      get { return plunderArmyData_; }
      set {
        plunderArmyData_ = value;
      }
    }

    /// <summary>Field number for the "alliance_base" field.</summary>
    public const int AllianceBaseFieldNumber = 5;
    private global::GameProto.Alliance_base_data allianceBase_;
    /// <summary>
    ///联盟基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data AllianceBase {
      get { return allianceBase_; }
      set {
        allianceBase_ = value;
      }
    }

    /// <summary>Field number for the "dst_user_id" field.</summary>
    public const int DstUserIdFieldNumber = 6;
    private uint dstUserId_;
    /// <summary>
    ///目标用户id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DstUserId {
      get { return dstUserId_; }
      set {
        dstUserId_ = value;
      }
    }

    /// <summary>Field number for the "black_tech" field.</summary>
    public const int BlackTechFieldNumber = 7;
    private global::GameProto.Alliance_black_tech blackTech_;
    /// <summary>
    ///联盟黑科技
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_black_tech BlackTech {
      get { return blackTech_; }
      set {
        blackTech_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get_more_info_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get_more_info_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Essential, other.Essential)) return false;
      if (!object.Equals(PlunderArmyData, other.PlunderArmyData)) return false;
      if (!object.Equals(AllianceBase, other.AllianceBase)) return false;
      if (DstUserId != other.DstUserId) return false;
      if (!object.Equals(BlackTech, other.BlackTech)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (essential_ != null) hash ^= Essential.GetHashCode();
      if (plunderArmyData_ != null) hash ^= PlunderArmyData.GetHashCode();
      if (allianceBase_ != null) hash ^= AllianceBase.GetHashCode();
      if (DstUserId != 0) hash ^= DstUserId.GetHashCode();
      if (blackTech_ != null) hash ^= BlackTech.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (essential_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Essential);
      }
      if (plunderArmyData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PlunderArmyData);
      }
      if (allianceBase_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AllianceBase);
      }
      if (DstUserId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DstUserId);
      }
      if (blackTech_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BlackTech);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (essential_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Essential);
      }
      if (plunderArmyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlunderArmyData);
      }
      if (allianceBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllianceBase);
      }
      if (DstUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DstUserId);
      }
      if (blackTech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackTech);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get_more_info_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::GameProto.Player_data();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.essential_ != null) {
        if (essential_ == null) {
          essential_ = new global::GameProto.Essential_data();
        }
        Essential.MergeFrom(other.Essential);
      }
      if (other.plunderArmyData_ != null) {
        if (plunderArmyData_ == null) {
          plunderArmyData_ = new global::GameProto.Plunder_army_data();
        }
        PlunderArmyData.MergeFrom(other.PlunderArmyData);
      }
      if (other.allianceBase_ != null) {
        if (allianceBase_ == null) {
          allianceBase_ = new global::GameProto.Alliance_base_data();
        }
        AllianceBase.MergeFrom(other.AllianceBase);
      }
      if (other.DstUserId != 0) {
        DstUserId = other.DstUserId;
      }
      if (other.blackTech_ != null) {
        if (blackTech_ == null) {
          blackTech_ = new global::GameProto.Alliance_black_tech();
        }
        BlackTech.MergeFrom(other.BlackTech);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(player_);
            break;
          }
          case 26: {
            if (essential_ == null) {
              essential_ = new global::GameProto.Essential_data();
            }
            input.ReadMessage(essential_);
            break;
          }
          case 34: {
            if (plunderArmyData_ == null) {
              plunderArmyData_ = new global::GameProto.Plunder_army_data();
            }
            input.ReadMessage(plunderArmyData_);
            break;
          }
          case 42: {
            if (allianceBase_ == null) {
              allianceBase_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(allianceBase_);
            break;
          }
          case 48: {
            DstUserId = input.ReadUInt32();
            break;
          }
          case 58: {
            if (blackTech_ == null) {
              blackTech_ = new global::GameProto.Alliance_black_tech();
            }
            input.ReadMessage(blackTech_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟相关**************************** 消息拆分的写法 Start ************************************
  ///申请联盟(需要盟主同意才可以加入联盟)
  /// </summary>
  public sealed partial class Apply_alliance_event : pb::IMessage<Apply_alliance_event> {
    private static readonly pb::MessageParser<Apply_alliance_event> _parser = new pb::MessageParser<Apply_alliance_event>(() => new Apply_alliance_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Apply_alliance_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_alliance_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_alliance_event(Apply_alliance_event other) : this() {
      allianceId_ = other.allianceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_alliance_event Clone() {
      return new Apply_alliance_event(this);
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private uint allianceId_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Apply_alliance_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Apply_alliance_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AllianceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Apply_alliance_event other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllianceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入联盟（直接可以加入联盟）
  /// </summary>
  public sealed partial class Join_alliance_event : pb::IMessage<Join_alliance_event> {
    private static readonly pb::MessageParser<Join_alliance_event> _parser = new pb::MessageParser<Join_alliance_event>(() => new Join_alliance_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Join_alliance_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_alliance_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_alliance_event(Join_alliance_event other) : this() {
      allianceId_ = other.allianceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_alliance_event Clone() {
      return new Join_alliance_event(this);
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private uint allianceId_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Join_alliance_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Join_alliance_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AllianceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Join_alliance_event other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllianceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入联盟回复
  /// </summary>
  public sealed partial class Join_alliance_response : pb::IMessage<Join_alliance_response> {
    private static readonly pb::MessageParser<Join_alliance_response> _parser = new pb::MessageParser<Join_alliance_response>(() => new Join_alliance_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Join_alliance_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_alliance_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_alliance_response(Join_alliance_response other) : this() {
      status_ = other.status_;
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      userList_ = other.userList_.Clone();
      applyList_ = other.applyList_.Clone();
      BlackTech = other.blackTech_ != null ? other.BlackTech.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_alliance_response Clone() {
      return new Join_alliance_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 2;
    private global::GameProto.Alliance_base_data baseData_;
    /// <summary>
    ///联盟基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    /// <summary>Field number for the "user_list" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> userList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///联盟成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> UserList {
      get { return userList_; }
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_applyList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> applyList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///申请列表（盟主才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> ApplyList {
      get { return applyList_; }
    }

    /// <summary>Field number for the "black_tech" field.</summary>
    public const int BlackTechFieldNumber = 5;
    private global::GameProto.Alliance_black_tech blackTech_;
    /// <summary>
    ///黑科技数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_black_tech BlackTech {
      get { return blackTech_; }
      set {
        blackTech_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Join_alliance_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Join_alliance_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(BaseData, other.BaseData)) return false;
      if(!userList_.Equals(other.userList_)) return false;
      if(!applyList_.Equals(other.applyList_)) return false;
      if (!object.Equals(BlackTech, other.BlackTech)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      hash ^= userList_.GetHashCode();
      hash ^= applyList_.GetHashCode();
      if (blackTech_ != null) hash ^= BlackTech.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (baseData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseData);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      applyList_.WriteTo(output, _repeated_applyList_codec);
      if (blackTech_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BlackTech);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      if (blackTech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackTech);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Join_alliance_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::GameProto.Alliance_base_data();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      userList_.Add(other.userList_);
      applyList_.Add(other.applyList_);
      if (other.blackTech_ != null) {
        if (blackTech_ == null) {
          blackTech_ = new global::GameProto.Alliance_black_tech();
        }
        BlackTech.MergeFrom(other.BlackTech);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (baseData_ == null) {
              baseData_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(baseData_);
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
          case 34: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
          case 42: {
            if (blackTech_ == null) {
              blackTech_ = new global::GameProto.Alliance_black_tech();
            }
            input.ReadMessage(blackTech_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取推荐联盟列表
  /// </summary>
  public sealed partial class Recommend_alliance_event : pb::IMessage<Recommend_alliance_event> {
    private static readonly pb::MessageParser<Recommend_alliance_event> _parser = new pb::MessageParser<Recommend_alliance_event>(() => new Recommend_alliance_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recommend_alliance_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recommend_alliance_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recommend_alliance_event(Recommend_alliance_event other) : this() {
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recommend_alliance_event Clone() {
      return new Recommend_alliance_event(this);
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 1;
    private string language_ = "";
    /// <summary>
    ///玩家语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recommend_alliance_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recommend_alliance_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Language.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recommend_alliance_event other) {
      if (other == null) {
        return;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取推荐联盟列表回复
  /// </summary>
  public sealed partial class Recommend_alliance_response : pb::IMessage<Recommend_alliance_response> {
    private static readonly pb::MessageParser<Recommend_alliance_response> _parser = new pb::MessageParser<Recommend_alliance_response>(() => new Recommend_alliance_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recommend_alliance_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recommend_alliance_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recommend_alliance_response(Recommend_alliance_response other) : this() {
      status_ = other.status_;
      baseList_ = other.baseList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recommend_alliance_response Clone() {
      return new Recommend_alliance_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "base_list" field.</summary>
    public const int BaseListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_base_data> _repeated_baseList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Alliance_base_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_base_data> baseList_ = new pbc::RepeatedField<global::GameProto.Alliance_base_data>();
    /// <summary>
    ///联盟列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_base_data> BaseList {
      get { return baseList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recommend_alliance_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recommend_alliance_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!baseList_.Equals(other.baseList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= baseList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      baseList_.WriteTo(output, _repeated_baseList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += baseList_.CalculateSize(_repeated_baseList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recommend_alliance_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      baseList_.Add(other.baseList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            baseList_.AddEntriesFrom(input, _repeated_baseList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查找联盟
  /// </summary>
  public sealed partial class Search_alliance_event : pb::IMessage<Search_alliance_event> {
    private static readonly pb::MessageParser<Search_alliance_event> _parser = new pb::MessageParser<Search_alliance_event>(() => new Search_alliance_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Search_alliance_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search_alliance_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search_alliance_event(Search_alliance_event other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search_alliance_event Clone() {
      return new Search_alliance_event(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///搜索联盟名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Search_alliance_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Search_alliance_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Search_alliance_event other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///查找联盟回复
  /// </summary>
  public sealed partial class Search_alliance_response : pb::IMessage<Search_alliance_response> {
    private static readonly pb::MessageParser<Search_alliance_response> _parser = new pb::MessageParser<Search_alliance_response>(() => new Search_alliance_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Search_alliance_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search_alliance_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search_alliance_response(Search_alliance_response other) : this() {
      status_ = other.status_;
      baseList_ = other.baseList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Search_alliance_response Clone() {
      return new Search_alliance_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "base_list" field.</summary>
    public const int BaseListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_base_data> _repeated_baseList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Alliance_base_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_base_data> baseList_ = new pbc::RepeatedField<global::GameProto.Alliance_base_data>();
    /// <summary>
    ///联盟列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_base_data> BaseList {
      get { return baseList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Search_alliance_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Search_alliance_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!baseList_.Equals(other.baseList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= baseList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      baseList_.WriteTo(output, _repeated_baseList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += baseList_.CalculateSize(_repeated_baseList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Search_alliance_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      baseList_.Add(other.baseList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            baseList_.AddEntriesFrom(input, _repeated_baseList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求联盟数据
  /// </summary>
  public sealed partial class Alliance_data_event : pb::IMessage<Alliance_data_event> {
    private static readonly pb::MessageParser<Alliance_data_event> _parser = new pb::MessageParser<Alliance_data_event>(() => new Alliance_data_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_data_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data_event(Alliance_data_event other) : this() {
      allianceId_ = other.allianceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data_event Clone() {
      return new Alliance_data_event(this);
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private uint allianceId_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_data_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_data_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AllianceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_data_event other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllianceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求联盟数据回复
  /// </summary>
  public sealed partial class Alliance_data_response : pb::IMessage<Alliance_data_response> {
    private static readonly pb::MessageParser<Alliance_data_response> _parser = new pb::MessageParser<Alliance_data_response>(() => new Alliance_data_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_data_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data_response(Alliance_data_response other) : this() {
      status_ = other.status_;
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      userList_ = other.userList_.Clone();
      applyList_ = other.applyList_.Clone();
      BlackTech = other.blackTech_ != null ? other.BlackTech.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data_response Clone() {
      return new Alliance_data_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 2;
    private global::GameProto.Alliance_base_data baseData_;
    /// <summary>
    ///联盟基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    /// <summary>Field number for the "user_list" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> userList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///联盟成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> UserList {
      get { return userList_; }
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_applyList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> applyList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///申请列表（盟主才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> ApplyList {
      get { return applyList_; }
    }

    /// <summary>Field number for the "black_tech" field.</summary>
    public const int BlackTechFieldNumber = 5;
    private global::GameProto.Alliance_black_tech blackTech_;
    /// <summary>
    ///黑科技数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_black_tech BlackTech {
      get { return blackTech_; }
      set {
        blackTech_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_data_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_data_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(BaseData, other.BaseData)) return false;
      if(!userList_.Equals(other.userList_)) return false;
      if(!applyList_.Equals(other.applyList_)) return false;
      if (!object.Equals(BlackTech, other.BlackTech)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      hash ^= userList_.GetHashCode();
      hash ^= applyList_.GetHashCode();
      if (blackTech_ != null) hash ^= BlackTech.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (baseData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseData);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      applyList_.WriteTo(output, _repeated_applyList_codec);
      if (blackTech_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BlackTech);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      if (blackTech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackTech);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_data_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::GameProto.Alliance_base_data();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      userList_.Add(other.userList_);
      applyList_.Add(other.applyList_);
      if (other.blackTech_ != null) {
        if (blackTech_ == null) {
          blackTech_ = new global::GameProto.Alliance_black_tech();
        }
        BlackTech.MergeFrom(other.BlackTech);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (baseData_ == null) {
              baseData_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(baseData_);
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
          case 34: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
          case 42: {
            if (blackTech_ == null) {
              blackTech_ = new global::GameProto.Alliance_black_tech();
            }
            input.ReadMessage(blackTech_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建联盟
  /// </summary>
  public sealed partial class Create_alliance_event : pb::IMessage<Create_alliance_event> {
    private static readonly pb::MessageParser<Create_alliance_event> _parser = new pb::MessageParser<Create_alliance_event>(() => new Create_alliance_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Create_alliance_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_alliance_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_alliance_event(Create_alliance_event other) : this() {
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_alliance_event Clone() {
      return new Create_alliance_event(this);
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 1;
    private global::GameProto.Alliance_base_data baseData_;
    /// <summary>
    ///联盟数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Create_alliance_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Create_alliance_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseData, other.BaseData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Create_alliance_event other) {
      if (other == null) {
        return;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::GameProto.Alliance_base_data();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (baseData_ == null) {
              baseData_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(baseData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建联盟回复
  /// </summary>
  public sealed partial class Create_alliance_response : pb::IMessage<Create_alliance_response> {
    private static readonly pb::MessageParser<Create_alliance_response> _parser = new pb::MessageParser<Create_alliance_response>(() => new Create_alliance_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Create_alliance_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_alliance_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_alliance_response(Create_alliance_response other) : this() {
      status_ = other.status_;
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      userList_ = other.userList_.Clone();
      applyList_ = other.applyList_.Clone();
      BlackTech = other.blackTech_ != null ? other.BlackTech.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_alliance_response Clone() {
      return new Create_alliance_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 2;
    private global::GameProto.Alliance_base_data baseData_;
    /// <summary>
    ///联盟基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    /// <summary>Field number for the "user_list" field.</summary>
    public const int UserListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> userList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///联盟成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> UserList {
      get { return userList_; }
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_applyList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> applyList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///申请列表（盟主才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> ApplyList {
      get { return applyList_; }
    }

    /// <summary>Field number for the "black_tech" field.</summary>
    public const int BlackTechFieldNumber = 5;
    private global::GameProto.Alliance_black_tech blackTech_;
    /// <summary>
    ///黑科技数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_black_tech BlackTech {
      get { return blackTech_; }
      set {
        blackTech_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Create_alliance_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Create_alliance_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(BaseData, other.BaseData)) return false;
      if(!userList_.Equals(other.userList_)) return false;
      if(!applyList_.Equals(other.applyList_)) return false;
      if (!object.Equals(BlackTech, other.BlackTech)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      hash ^= userList_.GetHashCode();
      hash ^= applyList_.GetHashCode();
      if (blackTech_ != null) hash ^= BlackTech.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (baseData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseData);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      applyList_.WriteTo(output, _repeated_applyList_codec);
      if (blackTech_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BlackTech);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      if (blackTech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackTech);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Create_alliance_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::GameProto.Alliance_base_data();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      userList_.Add(other.userList_);
      applyList_.Add(other.applyList_);
      if (other.blackTech_ != null) {
        if (blackTech_ == null) {
          blackTech_ = new global::GameProto.Alliance_black_tech();
        }
        BlackTech.MergeFrom(other.BlackTech);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (baseData_ == null) {
              baseData_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(baseData_);
            break;
          }
          case 26: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
          case 34: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
          case 42: {
            if (blackTech_ == null) {
              blackTech_ = new global::GameProto.Alliance_black_tech();
            }
            input.ReadMessage(blackTech_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟更新请求
  /// </summary>
  public sealed partial class Alliance_update_event : pb::IMessage<Alliance_update_event> {
    private static readonly pb::MessageParser<Alliance_update_event> _parser = new pb::MessageParser<Alliance_update_event>(() => new Alliance_update_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_update_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_update_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_update_event(Alliance_update_event other) : this() {
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_update_event Clone() {
      return new Alliance_update_event(this);
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 1;
    private global::GameProto.Alliance_base_data baseData_;
    /// <summary>
    ///联盟基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_update_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_update_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BaseData, other.BaseData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (baseData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BaseData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_update_event other) {
      if (other == null) {
        return;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::GameProto.Alliance_base_data();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (baseData_ == null) {
              baseData_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(baseData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新联盟信息返回
  /// </summary>
  public sealed partial class Alliance_update_response : pb::IMessage<Alliance_update_response> {
    private static readonly pb::MessageParser<Alliance_update_response> _parser = new pb::MessageParser<Alliance_update_response>(() => new Alliance_update_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_update_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_update_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_update_response(Alliance_update_response other) : this() {
      status_ = other.status_;
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_update_response Clone() {
      return new Alliance_update_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 2;
    private global::GameProto.Alliance_base_data baseData_;
    /// <summary>
    ///联盟基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_update_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_update_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(BaseData, other.BaseData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (baseData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_update_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::GameProto.Alliance_base_data();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (baseData_ == null) {
              baseData_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(baseData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同意联盟申请
  /// </summary>
  public sealed partial class Alliance_agree_apply_event : pb::IMessage<Alliance_agree_apply_event> {
    private static readonly pb::MessageParser<Alliance_agree_apply_event> _parser = new pb::MessageParser<Alliance_agree_apply_event>(() => new Alliance_agree_apply_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_agree_apply_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_agree_apply_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_agree_apply_event(Alliance_agree_apply_event other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_agree_apply_event Clone() {
      return new Alliance_agree_apply_event(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///申请该联盟的用户id（盟主才有该操作）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_agree_apply_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_agree_apply_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_agree_apply_event other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///同意申请返回
  /// </summary>
  public sealed partial class Alliance_agree_apply_response : pb::IMessage<Alliance_agree_apply_response> {
    private static readonly pb::MessageParser<Alliance_agree_apply_response> _parser = new pb::MessageParser<Alliance_agree_apply_response>(() => new Alliance_agree_apply_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_agree_apply_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_agree_apply_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_agree_apply_response(Alliance_agree_apply_response other) : this() {
      status_ = other.status_;
      userList_ = other.userList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_agree_apply_response Clone() {
      return new Alliance_agree_apply_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "user_list" field.</summary>
    public const int UserListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> userList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///联盟成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> UserList {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_agree_apply_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_agree_apply_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= userList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_agree_apply_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      userList_.Add(other.userList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除联盟申请
  /// </summary>
  public sealed partial class Alliance_delete_apply_event : pb::IMessage<Alliance_delete_apply_event> {
    private static readonly pb::MessageParser<Alliance_delete_apply_event> _parser = new pb::MessageParser<Alliance_delete_apply_event>(() => new Alliance_delete_apply_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_delete_apply_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_delete_apply_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_delete_apply_event(Alliance_delete_apply_event other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_delete_apply_event Clone() {
      return new Alliance_delete_apply_event(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///申请该联盟的用户id（盟主才有该操作）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_delete_apply_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_delete_apply_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_delete_apply_event other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除联盟申请返回
  /// </summary>
  public sealed partial class Alliance_delete_apply_response : pb::IMessage<Alliance_delete_apply_response> {
    private static readonly pb::MessageParser<Alliance_delete_apply_response> _parser = new pb::MessageParser<Alliance_delete_apply_response>(() => new Alliance_delete_apply_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_delete_apply_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_delete_apply_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_delete_apply_response(Alliance_delete_apply_response other) : this() {
      status_ = other.status_;
      applyList_ = other.applyList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_delete_apply_response Clone() {
      return new Alliance_delete_apply_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_applyList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> applyList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///申请列表（盟主才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> ApplyList {
      get { return applyList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_delete_apply_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_delete_apply_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!applyList_.Equals(other.applyList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= applyList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      applyList_.WriteTo(output, _repeated_applyList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += applyList_.CalculateSize(_repeated_applyList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_delete_apply_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      applyList_.Add(other.applyList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            applyList_.AddEntriesFrom(input, _repeated_applyList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟任命盟主
  /// </summary>
  public sealed partial class Alliance_appoint_leader_event : pb::IMessage<Alliance_appoint_leader_event> {
    private static readonly pb::MessageParser<Alliance_appoint_leader_event> _parser = new pb::MessageParser<Alliance_appoint_leader_event>(() => new Alliance_appoint_leader_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_appoint_leader_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_appoint_leader_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_appoint_leader_event(Alliance_appoint_leader_event other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_appoint_leader_event Clone() {
      return new Alliance_appoint_leader_event(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///联盟的用户id（盟主才有该操作）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_appoint_leader_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_appoint_leader_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_appoint_leader_event other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任命盟主返回
  /// </summary>
  public sealed partial class Alliance_appoint_leader_response : pb::IMessage<Alliance_appoint_leader_response> {
    private static readonly pb::MessageParser<Alliance_appoint_leader_response> _parser = new pb::MessageParser<Alliance_appoint_leader_response>(() => new Alliance_appoint_leader_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_appoint_leader_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_appoint_leader_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_appoint_leader_response(Alliance_appoint_leader_response other) : this() {
      status_ = other.status_;
      BaseData = other.baseData_ != null ? other.BaseData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_appoint_leader_response Clone() {
      return new Alliance_appoint_leader_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "base_data" field.</summary>
    public const int BaseDataFieldNumber = 2;
    private global::GameProto.Alliance_base_data baseData_;
    /// <summary>
    ///联盟基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_base_data BaseData {
      get { return baseData_; }
      set {
        baseData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_appoint_leader_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_appoint_leader_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(BaseData, other.BaseData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (baseData_ != null) hash ^= BaseData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (baseData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BaseData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (baseData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_appoint_leader_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.baseData_ != null) {
        if (baseData_ == null) {
          baseData_ = new global::GameProto.Alliance_base_data();
        }
        BaseData.MergeFrom(other.BaseData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (baseData_ == null) {
              baseData_ = new global::GameProto.Alliance_base_data();
            }
            input.ReadMessage(baseData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///踢出联盟成员
  /// </summary>
  public sealed partial class Alliance_kickout_user_event : pb::IMessage<Alliance_kickout_user_event> {
    private static readonly pb::MessageParser<Alliance_kickout_user_event> _parser = new pb::MessageParser<Alliance_kickout_user_event>(() => new Alliance_kickout_user_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_kickout_user_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_kickout_user_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_kickout_user_event(Alliance_kickout_user_event other) : this() {
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_kickout_user_event Clone() {
      return new Alliance_kickout_user_event(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///联盟的用户id（盟主才有该操作）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_kickout_user_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_kickout_user_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_kickout_user_event other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///踢出联盟成员返回
  /// </summary>
  public sealed partial class Alliance_kickout_user_response : pb::IMessage<Alliance_kickout_user_response> {
    private static readonly pb::MessageParser<Alliance_kickout_user_response> _parser = new pb::MessageParser<Alliance_kickout_user_response>(() => new Alliance_kickout_user_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_kickout_user_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_kickout_user_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_kickout_user_response(Alliance_kickout_user_response other) : this() {
      status_ = other.status_;
      userList_ = other.userList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_kickout_user_response Clone() {
      return new Alliance_kickout_user_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "user_list" field.</summary>
    public const int UserListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_user_data> _repeated_userList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Alliance_user_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_user_data> userList_ = new pbc::RepeatedField<global::GameProto.Alliance_user_data>();
    /// <summary>
    ///联盟成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_user_data> UserList {
      get { return userList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_kickout_user_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_kickout_user_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!userList_.Equals(other.userList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= userList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      userList_.WriteTo(output, _repeated_userList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += userList_.CalculateSize(_repeated_userList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_kickout_user_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      userList_.Add(other.userList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            userList_.AddEntriesFrom(input, _repeated_userList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出联盟
  /// </summary>
  public sealed partial class Alliance_quit_event : pb::IMessage<Alliance_quit_event> {
    private static readonly pb::MessageParser<Alliance_quit_event> _parser = new pb::MessageParser<Alliance_quit_event>(() => new Alliance_quit_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_quit_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_quit_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_quit_event(Alliance_quit_event other) : this() {
      allianceId_ = other.allianceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_quit_event Clone() {
      return new Alliance_quit_event(this);
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private uint allianceId_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_quit_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_quit_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AllianceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_quit_event other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllianceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///捐献
  /// </summary>
  public sealed partial class Alliance_donate_event : pb::IMessage<Alliance_donate_event> {
    private static readonly pb::MessageParser<Alliance_donate_event> _parser = new pb::MessageParser<Alliance_donate_event>(() => new Alliance_donate_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_donate_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_donate_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_donate_event(Alliance_donate_event other) : this() {
      blackType_ = other.blackType_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_donate_event Clone() {
      return new Alliance_donate_event(this);
    }

    /// <summary>Field number for the "black_type" field.</summary>
    public const int BlackTypeFieldNumber = 1;
    private global::GameProto.Black_tech_type blackType_ = 0;
    /// <summary>
    ///捐献黑科技类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Black_tech_type BlackType {
      get { return blackType_; }
      set {
        blackType_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private ulong count_;
    /// <summary>
    ///捐献数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_donate_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_donate_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlackType != other.BlackType) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlackType != 0) hash ^= BlackType.GetHashCode();
      if (Count != 0UL) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlackType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BlackType);
      }
      if (Count != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlackType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BlackType);
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_donate_event other) {
      if (other == null) {
        return;
      }
      if (other.BlackType != 0) {
        BlackType = other.BlackType;
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            blackType_ = (global::GameProto.Black_tech_type) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///捐献回复
  /// </summary>
  public sealed partial class Alliance_donate_response : pb::IMessage<Alliance_donate_response> {
    private static readonly pb::MessageParser<Alliance_donate_response> _parser = new pb::MessageParser<Alliance_donate_response>(() => new Alliance_donate_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_donate_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_donate_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_donate_response(Alliance_donate_response other) : this() {
      status_ = other.status_;
      BlackTech = other.blackTech_ != null ? other.BlackTech.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_donate_response Clone() {
      return new Alliance_donate_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "black_tech" field.</summary>
    public const int BlackTechFieldNumber = 2;
    private global::GameProto.Alliance_black_tech blackTech_;
    /// <summary>
    ///科技列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_black_tech BlackTech {
      get { return blackTech_; }
      set {
        blackTech_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_donate_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_donate_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(BlackTech, other.BlackTech)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (blackTech_ != null) hash ^= BlackTech.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (blackTech_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlackTech);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (blackTech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackTech);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_donate_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.blackTech_ != null) {
        if (blackTech_ == null) {
          blackTech_ = new global::GameProto.Alliance_black_tech();
        }
        BlackTech.MergeFrom(other.BlackTech);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (blackTech_ == null) {
              blackTech_ = new global::GameProto.Alliance_black_tech();
            }
            input.ReadMessage(blackTech_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///主动下发联盟ID，请求加入联盟申请被盟主同意， 服务器下发；
  /// </summary>
  public sealed partial class Alliance_id_response : pb::IMessage<Alliance_id_response> {
    private static readonly pb::MessageParser<Alliance_id_response> _parser = new pb::MessageParser<Alliance_id_response>(() => new Alliance_id_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_id_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_id_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_id_response(Alliance_id_response other) : this() {
      status_ = other.status_;
      allianceId_ = other.allianceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_id_response Clone() {
      return new Alliance_id_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 2;
    private uint allianceId_;
    /// <summary>
    ///联盟ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_id_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_id_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (AllianceId != other.AllianceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (AllianceId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AllianceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_id_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 16: {
            AllianceId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///所有请求没有特殊声明均使用Game_common_response作为返回的pb
  ///修改基础数据的请求
  /// </summary>
  public sealed partial class Modify_base_info_event : pb::IMessage<Modify_base_info_event> {
    private static readonly pb::MessageParser<Modify_base_info_event> _parser = new pb::MessageParser<Modify_base_info_event>(() => new Modify_base_info_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Modify_base_info_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Modify_base_info_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Modify_base_info_event(Modify_base_info_event other) : this() {
      name_ = other.name_;
      icon_ = other.icon_;
      payFlag_ = other.payFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Modify_base_info_event Clone() {
      return new Modify_base_info_event(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 2;
    private uint icon_;
    /// <summary>
    ///头像和头像框 复合值        
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "pay_flag" field.</summary>
    public const int PayFlagFieldNumber = 3;
    private bool payFlag_;
    /// <summary>
    ///增加用户免费改名次数的flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PayFlag {
      get { return payFlag_; }
      set {
        payFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Modify_base_info_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Modify_base_info_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Icon != other.Icon) return false;
      if (PayFlag != other.PayFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (PayFlag != false) hash ^= PayFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Icon != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Icon);
      }
      if (PayFlag != false) {
        output.WriteRawTag(24);
        output.WriteBool(PayFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (PayFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Modify_base_info_event other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.PayFlag != false) {
        PayFlag = other.PayFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Icon = input.ReadUInt32();
            break;
          }
          case 24: {
            PayFlag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///圖簽處理
  /// </summary>
  public sealed partial class Update_sign_event : pb::IMessage<Update_sign_event> {
    private static readonly pb::MessageParser<Update_sign_event> _parser = new pb::MessageParser<Update_sign_event>(() => new Update_sign_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_sign_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_sign_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_sign_event(Update_sign_event other) : this() {
      type_ = other.type_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_sign_event Clone() {
      return new Update_sign_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Act_sign_type type_ = 0;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Act_sign_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    /// <summary>
    ///解锁的物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_sign_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_sign_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_sign_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Act_sign_type) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Game 通用返回
  /// </summary>
  public sealed partial class Game_common_response : pb::IMessage<Game_common_response> {
    private static readonly pb::MessageParser<Game_common_response> _parser = new pb::MessageParser<Game_common_response>(() => new Game_common_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Game_common_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_common_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_common_response(Game_common_response other) : this() {
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_common_response Clone() {
      return new Game_common_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Game_common_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Game_common_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Game_common_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///移动, 合成等请求中的索引均为repeated结构中的索引
  ///物体变更通用请求proto协议 (龙采集的物品放置到地图上，点击物品，物品衍生物品，自动死亡产出，
  ///拖动物体改变位置，物体位置改变产生战利品球，删除物品，龙摧毁物品）
  ///其他操作使用命令字：eCTS_GAMESER_UPDATE_OBJECT = 0x03211, //更新物体
  /// </summary>
  public sealed partial class Update_object_event : pb::IMessage<Update_object_event> {
    private static readonly pb::MessageParser<Update_object_event> _parser = new pb::MessageParser<Update_object_event>(() => new Update_object_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_object_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_object_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_object_event(Update_object_event other) : this() {
      type_ = other.type_;
      removeCoord_ = other.removeCoord_.Clone();
      addObject_ = other.addObject_.Clone();
      addMonster_ = other.addMonster_.Clone();
      addFloating_ = other.addFloating_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_object_event Clone() {
      return new Update_object_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Object_act_type type_ = 0;
    /// <summary>
    ///操作类型[仅用来定位问题]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Object_act_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "remove_coord" field.</summary>
    public const int RemoveCoordFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Coord> _repeated_removeCoord_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Coord.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Coord> removeCoord_ = new pbc::RepeatedField<global::GameProto.Coord>();
    /// <summary>
    ///移除这些坐标的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Coord> RemoveCoord {
      get { return removeCoord_; }
    }

    /// <summary>Field number for the "add_object" field.</summary>
    public const int AddObjectFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Add_object_info> _repeated_addObject_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Add_object_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Add_object_info> addObject_ = new pbc::RepeatedField<global::GameProto.Add_object_info>();
    /// <summary>
    ///在这些位置上添加物品[或者更新这些位置上的物品]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Add_object_info> AddObject {
      get { return addObject_; }
    }

    /// <summary>Field number for the "add_monster" field.</summary>
    public const int AddMonsterFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Monster_data> _repeated_addMonster_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_data> addMonster_ = new pbc::RepeatedField<global::GameProto.Monster_data>();
    /// <summary>
    ///添加合成的龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_data> AddMonster {
      get { return addMonster_; }
    }

    /// <summary>Field number for the "add_floating" field.</summary>
    public const int AddFloatingFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GameProto.Map_object_data> _repeated_addFloating_codec
        = pb::FieldCodec.ForMessage(42, global::GameProto.Map_object_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Map_object_data> addFloating_ = new pbc::RepeatedField<global::GameProto.Map_object_data>();
    /// <summary>
    ///添加的浮空物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Map_object_data> AddFloating {
      get { return addFloating_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_object_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_object_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!removeCoord_.Equals(other.removeCoord_)) return false;
      if(!addObject_.Equals(other.addObject_)) return false;
      if(!addMonster_.Equals(other.addMonster_)) return false;
      if(!addFloating_.Equals(other.addFloating_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= removeCoord_.GetHashCode();
      hash ^= addObject_.GetHashCode();
      hash ^= addMonster_.GetHashCode();
      hash ^= addFloating_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      removeCoord_.WriteTo(output, _repeated_removeCoord_codec);
      addObject_.WriteTo(output, _repeated_addObject_codec);
      addMonster_.WriteTo(output, _repeated_addMonster_codec);
      addFloating_.WriteTo(output, _repeated_addFloating_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += removeCoord_.CalculateSize(_repeated_removeCoord_codec);
      size += addObject_.CalculateSize(_repeated_addObject_codec);
      size += addMonster_.CalculateSize(_repeated_addMonster_codec);
      size += addFloating_.CalculateSize(_repeated_addFloating_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_object_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      removeCoord_.Add(other.removeCoord_);
      addObject_.Add(other.addObject_);
      addMonster_.Add(other.addMonster_);
      addFloating_.Add(other.addFloating_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Object_act_type) input.ReadEnum();
            break;
          }
          case 18: {
            removeCoord_.AddEntriesFrom(input, _repeated_removeCoord_codec);
            break;
          }
          case 26: {
            addObject_.AddEntriesFrom(input, _repeated_addObject_codec);
            break;
          }
          case 34: {
            addMonster_.AddEntriesFrom(input, _repeated_addMonster_codec);
            break;
          }
          case 42: {
            addFloating_.AddEntriesFrom(input, _repeated_addFloating_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///龙采集物品
  ///采集到的物品不会立即放到地图上，而是由龙持有，放下时才发送Monster_lay_down_event添加该物品
  /// </summary>
  public sealed partial class Monster_collect_event : pb::IMessage<Monster_collect_event> {
    private static readonly pb::MessageParser<Monster_collect_event> _parser = new pb::MessageParser<Monster_collect_event>(() => new Monster_collect_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_collect_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_collect_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_collect_event(Monster_collect_event other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      removeAp_ = other.removeAp_;
      targetObject_ = other.targetObject_.Clone();
      removeCoord_ = other.removeCoord_.Clone();
      mountId_ = other.mountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_collect_event Clone() {
      return new Monster_collect_event(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Monster_identity_data identity_;
    /// <summary>
    ///怪物的唯一标识数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_identity_data Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "remove_ap" field.</summary>
    public const int RemoveApFieldNumber = 2;
    private uint removeAp_;
    /// <summary>
    ///扣除的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemoveAp {
      get { return removeAp_; }
      set {
        removeAp_ = value;
      }
    }

    /// <summary>Field number for the "target_object" field.</summary>
    public const int TargetObjectFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Add_object_info> _repeated_targetObject_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Add_object_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Add_object_info> targetObject_ = new pbc::RepeatedField<global::GameProto.Add_object_info>();
    /// <summary>
    ///采集目标的新数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Add_object_info> TargetObject {
      get { return targetObject_; }
    }

    /// <summary>Field number for the "remove_coord" field.</summary>
    public const int RemoveCoordFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Coord> _repeated_removeCoord_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Coord.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Coord> removeCoord_ = new pbc::RepeatedField<global::GameProto.Coord>();
    /// <summary>
    ///移除这些坐标的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Coord> RemoveCoord {
      get { return removeCoord_; }
    }

    /// <summary>Field number for the "mount_id" field.</summary>
    public const int MountIdFieldNumber = 5;
    private uint mountId_;
    /// <summary>
    ///生物头顶挂载物体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountId {
      get { return mountId_; }
      set {
        mountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_collect_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_collect_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if (RemoveAp != other.RemoveAp) return false;
      if(!targetObject_.Equals(other.targetObject_)) return false;
      if(!removeCoord_.Equals(other.removeCoord_)) return false;
      if (MountId != other.MountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (RemoveAp != 0) hash ^= RemoveAp.GetHashCode();
      hash ^= targetObject_.GetHashCode();
      hash ^= removeCoord_.GetHashCode();
      if (MountId != 0) hash ^= MountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (RemoveAp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RemoveAp);
      }
      targetObject_.WriteTo(output, _repeated_targetObject_codec);
      removeCoord_.WriteTo(output, _repeated_removeCoord_codec);
      if (MountId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (RemoveAp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemoveAp);
      }
      size += targetObject_.CalculateSize(_repeated_targetObject_codec);
      size += removeCoord_.CalculateSize(_repeated_removeCoord_codec);
      if (MountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_collect_event other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Monster_identity_data();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.RemoveAp != 0) {
        RemoveAp = other.RemoveAp;
      }
      targetObject_.Add(other.targetObject_);
      removeCoord_.Add(other.removeCoord_);
      if (other.MountId != 0) {
        MountId = other.MountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Monster_identity_data();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 16: {
            RemoveAp = input.ReadUInt32();
            break;
          }
          case 26: {
            targetObject_.AddEntriesFrom(input, _repeated_targetObject_codec);
            break;
          }
          case 34: {
            removeCoord_.AddEntriesFrom(input, _repeated_removeCoord_codec);
            break;
          }
          case 40: {
            MountId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///生物放下物品
  /// </summary>
  public sealed partial class Monster_lay_down_event : pb::IMessage<Monster_lay_down_event> {
    private static readonly pb::MessageParser<Monster_lay_down_event> _parser = new pb::MessageParser<Monster_lay_down_event>(() => new Monster_lay_down_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_lay_down_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_lay_down_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_lay_down_event(Monster_lay_down_event other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      addObject_ = other.addObject_.Clone();
      addFloating_ = other.addFloating_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_lay_down_event Clone() {
      return new Monster_lay_down_event(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Monster_identity_data identity_;
    /// <summary>
    ///怪物的唯一标识数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_identity_data Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "add_object" field.</summary>
    public const int AddObjectFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Add_object_info> _repeated_addObject_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Add_object_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Add_object_info> addObject_ = new pbc::RepeatedField<global::GameProto.Add_object_info>();
    /// <summary>
    ///在该位置上添加物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Add_object_info> AddObject {
      get { return addObject_; }
    }

    /// <summary>Field number for the "add_floating" field.</summary>
    public const int AddFloatingFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Map_object_data> _repeated_addFloating_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Map_object_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Map_object_data> addFloating_ = new pbc::RepeatedField<global::GameProto.Map_object_data>();
    /// <summary>
    ///添加的浮空物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Map_object_data> AddFloating {
      get { return addFloating_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_lay_down_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_lay_down_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if(!addObject_.Equals(other.addObject_)) return false;
      if(!addFloating_.Equals(other.addFloating_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      hash ^= addObject_.GetHashCode();
      hash ^= addFloating_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      addObject_.WriteTo(output, _repeated_addObject_codec);
      addFloating_.WriteTo(output, _repeated_addFloating_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      size += addObject_.CalculateSize(_repeated_addObject_codec);
      size += addFloating_.CalculateSize(_repeated_addFloating_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_lay_down_event other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Monster_identity_data();
        }
        Identity.MergeFrom(other.Identity);
      }
      addObject_.Add(other.addObject_);
      addFloating_.Add(other.addFloating_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Monster_identity_data();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 18: {
            addObject_.AddEntriesFrom(input, _repeated_addObject_codec);
            break;
          }
          case 26: {
            addFloating_.AddEntriesFrom(input, _repeated_addFloating_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///龙建造房屋完成
  /// </summary>
  public sealed partial class Monster_built_event : pb::IMessage<Monster_built_event> {
    private static readonly pb::MessageParser<Monster_built_event> _parser = new pb::MessageParser<Monster_built_event>(() => new Monster_built_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_built_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_built_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_built_event(Monster_built_event other) : this() {
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      diamondCount_ = other.diamondCount_;
      NewBuilding = other.newBuilding_ != null ? other.NewBuilding.Clone() : null;
      monsterList_ = other.monsterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_built_event Clone() {
      return new Monster_built_event(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private global::GameProto.Coord coord_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "diamond_count" field.</summary>
    public const int DiamondCountFieldNumber = 2;
    private uint diamondCount_;
    /// <summary>
    ///要扣除的钻石数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DiamondCount {
      get { return diamondCount_; }
      set {
        diamondCount_ = value;
      }
    }

    /// <summary>Field number for the "new_building" field.</summary>
    public const int NewBuildingFieldNumber = 3;
    private global::GameProto.Map_object_data newBuilding_;
    /// <summary>
    ///最终生成的建筑
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data NewBuilding {
      get { return newBuilding_; }
      set {
        newBuilding_ = value;
      }
    }

    /// <summary>Field number for the "monster_list" field.</summary>
    public const int MonsterListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Change_monster_ap> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Change_monster_ap.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Change_monster_ap> monsterList_ = new pbc::RepeatedField<global::GameProto.Change_monster_ap>();
    /// <summary>
    ///要扣除体力的龙的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Change_monster_ap> MonsterList {
      get { return monsterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_built_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_built_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coord, other.Coord)) return false;
      if (DiamondCount != other.DiamondCount) return false;
      if (!object.Equals(NewBuilding, other.NewBuilding)) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (DiamondCount != 0) hash ^= DiamondCount.GetHashCode();
      if (newBuilding_ != null) hash ^= NewBuilding.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coord);
      }
      if (DiamondCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DiamondCount);
      }
      if (newBuilding_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NewBuilding);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (DiamondCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiamondCount);
      }
      if (newBuilding_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewBuilding);
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_built_event other) {
      if (other == null) {
        return;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.DiamondCount != 0) {
        DiamondCount = other.DiamondCount;
      }
      if (other.newBuilding_ != null) {
        if (newBuilding_ == null) {
          newBuilding_ = new global::GameProto.Map_object_data();
        }
        NewBuilding.MergeFrom(other.NewBuilding);
      }
      monsterList_.Add(other.monsterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 16: {
            DiamondCount = input.ReadUInt32();
            break;
          }
          case 26: {
            if (newBuilding_ == null) {
              newBuilding_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(newBuilding_);
            break;
          }
          case 34: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///龙进入龙屋（休息或者闲置，合并龙屋导致切换龙屋）
  /// </summary>
  public sealed partial class Monster_enter_home_event : pb::IMessage<Monster_enter_home_event> {
    private static readonly pb::MessageParser<Monster_enter_home_event> _parser = new pb::MessageParser<Monster_enter_home_event>(() => new Monster_enter_home_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_enter_home_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_enter_home_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_enter_home_event(Monster_enter_home_event other) : this() {
      timestamp_ = other.timestamp_;
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      monsterList_ = other.monsterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_enter_home_event Clone() {
      return new Monster_enter_home_event(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    ///龙巢的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 2;
    private global::GameProto.Coord coord_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "monster_list" field.</summary>
    public const int MonsterListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Monster_identity_data> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Monster_identity_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_identity_data> monsterList_ = new pbc::RepeatedField<global::GameProto.Monster_identity_data>();
    /// <summary>
    ///进入龙巢的龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_identity_data> MonsterList {
      get { return monsterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_enter_home_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_enter_home_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Coord, other.Coord)) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (coord_ != null) hash ^= Coord.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (coord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Coord);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_enter_home_event other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      monsterList_.Add(other.monsterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 26: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///龙出龙屋（补满体力或者直接出来）
  /// </summary>
  public sealed partial class Monster_exit_home_event : pb::IMessage<Monster_exit_home_event> {
    private static readonly pb::MessageParser<Monster_exit_home_event> _parser = new pb::MessageParser<Monster_exit_home_event>(() => new Monster_exit_home_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_exit_home_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_exit_home_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_exit_home_event(Monster_exit_home_event other) : this() {
      timestamp_ = other.timestamp_;
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      diamondCount_ = other.diamondCount_;
      monsterList_ = other.monsterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_exit_home_event Clone() {
      return new Monster_exit_home_event(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    ///龙巢的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 2;
    private global::GameProto.Coord coord_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "diamond_count" field.</summary>
    public const int DiamondCountFieldNumber = 3;
    private uint diamondCount_;
    /// <summary>
    ///要扣除的钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DiamondCount {
      get { return diamondCount_; }
      set {
        diamondCount_ = value;
      }
    }

    /// <summary>Field number for the "monster_list" field.</summary>
    public const int MonsterListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Change_monster_ap> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Change_monster_ap.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Change_monster_ap> monsterList_ = new pbc::RepeatedField<global::GameProto.Change_monster_ap>();
    /// <summary>
    ///离开龙巢的龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Change_monster_ap> MonsterList {
      get { return monsterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_exit_home_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_exit_home_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Coord, other.Coord)) return false;
      if (DiamondCount != other.DiamondCount) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (DiamondCount != 0) hash ^= DiamondCount.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (coord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Coord);
      }
      if (DiamondCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DiamondCount);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (DiamondCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiamondCount);
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_exit_home_event other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.DiamondCount != 0) {
        DiamondCount = other.DiamondCount;
      }
      monsterList_.Add(other.monsterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 24: {
            DiamondCount = input.ReadUInt32();
            break;
          }
          case 34: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Change_monster_ap : pb::IMessage<Change_monster_ap> {
    private static readonly pb::MessageParser<Change_monster_ap> _parser = new pb::MessageParser<Change_monster_ap>(() => new Change_monster_ap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Change_monster_ap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change_monster_ap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change_monster_ap(Change_monster_ap other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      ap_ = other.ap_;
      flag_ = other.flag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change_monster_ap Clone() {
      return new Change_monster_ap(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Monster_identity_data identity_;
    /// <summary>
    ///龙的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_identity_data Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "ap" field.</summary>
    public const int ApFieldNumber = 2;
    private int ap_;
    /// <summary>
    ///改变后的体力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ap {
      get { return ap_; }
      set {
        ap_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 3;
    private bool flag_;
    /// <summary>
    ///是否从龙屋里出来
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Change_monster_ap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Change_monster_ap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if (Ap != other.Ap) return false;
      if (Flag != other.Flag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (Ap != 0) hash ^= Ap.GetHashCode();
      if (Flag != false) hash ^= Flag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (Ap != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ap);
      }
      if (Flag != false) {
        output.WriteRawTag(24);
        output.WriteBool(Flag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (Ap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ap);
      }
      if (Flag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Change_monster_ap other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Monster_identity_data();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.Ap != 0) {
        Ap = other.Ap;
      }
      if (other.Flag != false) {
        Flag = other.Flag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Monster_identity_data();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 16: {
            Ap = input.ReadInt32();
            break;
          }
          case 24: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///龙的变更协议(龙合成龙，龙合成蛋，售卖龙，Debug加龙）
  /// </summary>
  public sealed partial class Remove_monster_data : pb::IMessage<Remove_monster_data> {
    private static readonly pb::MessageParser<Remove_monster_data> _parser = new pb::MessageParser<Remove_monster_data>(() => new Remove_monster_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Remove_monster_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Remove_monster_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Remove_monster_data(Remove_monster_data other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Remove_monster_data Clone() {
      return new Remove_monster_data(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Monster_identity_data identity_;
    /// <summary>
    ///龙的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_identity_data Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Remove_monster_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Remove_monster_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Remove_monster_data other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Monster_identity_data();
        }
        Identity.MergeFrom(other.Identity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Monster_identity_data();
            }
            input.ReadMessage(identity_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Update_monster_event : pb::IMessage<Update_monster_event> {
    private static readonly pb::MessageParser<Update_monster_event> _parser = new pb::MessageParser<Update_monster_event>(() => new Update_monster_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_monster_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_monster_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_monster_event(Update_monster_event other) : this() {
      type_ = other.type_;
      remove_ = other.remove_.Clone();
      addMonster_ = other.addMonster_.Clone();
      addObject_ = other.addObject_.Clone();
      addFloating_ = other.addFloating_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_monster_event Clone() {
      return new Update_monster_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Monster_act_type type_ = 0;
    /// <summary>
    ///操作类型[仅用来定位问题]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_act_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "remove" field.</summary>
    public const int RemoveFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Remove_monster_data> _repeated_remove_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Remove_monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Remove_monster_data> remove_ = new pbc::RepeatedField<global::GameProto.Remove_monster_data>();
    /// <summary>
    ///删除的龙的信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Remove_monster_data> Remove {
      get { return remove_; }
    }

    /// <summary>Field number for the "add_monster" field.</summary>
    public const int AddMonsterFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Monster_data> _repeated_addMonster_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_data> addMonster_ = new pbc::RepeatedField<global::GameProto.Monster_data>();
    /// <summary>
    ///添加合成的龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_data> AddMonster {
      get { return addMonster_; }
    }

    /// <summary>Field number for the "add_object" field.</summary>
    public const int AddObjectFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GameProto.Add_object_info> _repeated_addObject_codec
        = pb::FieldCodec.ForMessage(42, global::GameProto.Add_object_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Add_object_info> addObject_ = new pbc::RepeatedField<global::GameProto.Add_object_info>();
    /// <summary>
    ///添加合成地图的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Add_object_info> AddObject {
      get { return addObject_; }
    }

    /// <summary>Field number for the "add_floating" field.</summary>
    public const int AddFloatingFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GameProto.Map_object_data> _repeated_addFloating_codec
        = pb::FieldCodec.ForMessage(50, global::GameProto.Map_object_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Map_object_data> addFloating_ = new pbc::RepeatedField<global::GameProto.Map_object_data>();
    /// <summary>
    ///添加的浮空物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Map_object_data> AddFloating {
      get { return addFloating_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_monster_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_monster_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!remove_.Equals(other.remove_)) return false;
      if(!addMonster_.Equals(other.addMonster_)) return false;
      if(!addObject_.Equals(other.addObject_)) return false;
      if(!addFloating_.Equals(other.addFloating_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= remove_.GetHashCode();
      hash ^= addMonster_.GetHashCode();
      hash ^= addObject_.GetHashCode();
      hash ^= addFloating_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      remove_.WriteTo(output, _repeated_remove_codec);
      addMonster_.WriteTo(output, _repeated_addMonster_codec);
      addObject_.WriteTo(output, _repeated_addObject_codec);
      addFloating_.WriteTo(output, _repeated_addFloating_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += remove_.CalculateSize(_repeated_remove_codec);
      size += addMonster_.CalculateSize(_repeated_addMonster_codec);
      size += addObject_.CalculateSize(_repeated_addObject_codec);
      size += addFloating_.CalculateSize(_repeated_addFloating_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_monster_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      remove_.Add(other.remove_);
      addMonster_.Add(other.addMonster_);
      addObject_.Add(other.addObject_);
      addFloating_.Add(other.addFloating_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Monster_act_type) input.ReadEnum();
            break;
          }
          case 18: {
            remove_.AddEntriesFrom(input, _repeated_remove_codec);
            break;
          }
          case 34: {
            addMonster_.AddEntriesFrom(input, _repeated_addMonster_codec);
            break;
          }
          case 42: {
            addObject_.AddEntriesFrom(input, _repeated_addObject_codec);
            break;
          }
          case 50: {
            addFloating_.AddEntriesFrom(input, _repeated_addFloating_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///龙的名字修改
  /// </summary>
  public sealed partial class Monster_rename_event : pb::IMessage<Monster_rename_event> {
    private static readonly pb::MessageParser<Monster_rename_event> _parser = new pb::MessageParser<Monster_rename_event>(() => new Monster_rename_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_rename_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_rename_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_rename_event(Monster_rename_event other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_rename_event Clone() {
      return new Monster_rename_event(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Monster_identity_data identity_;
    /// <summary>
    ///离开龙巢的龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_identity_data Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///变更后龙的名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_rename_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_rename_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_rename_event other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Monster_identity_data();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Monster_identity_data();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///添加的message信息
  /// </summary>
  public sealed partial class Add_object_info : pb::IMessage<Add_object_info> {
    private static readonly pb::MessageParser<Add_object_info> _parser = new pb::MessageParser<Add_object_info>(() => new Add_object_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Add_object_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Add_object_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Add_object_info(Add_object_info other) : this() {
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      Object = other.object_ != null ? other.Object.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Add_object_info Clone() {
      return new Add_object_info(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private global::GameProto.Coord coord_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 2;
    private global::GameProto.Map_object_data object_;
    /// <summary>
    ///增加的物件信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data Object {
      get { return object_; }
      set {
        object_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Add_object_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Add_object_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coord, other.Coord)) return false;
      if (!object.Equals(Object, other.Object)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (object_ != null) hash ^= Object.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coord);
      }
      if (object_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Object);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (object_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Object);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Add_object_info other) {
      if (other == null) {
        return;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.object_ != null) {
        if (object_ == null) {
          object_ = new global::GameProto.Map_object_data();
        }
        Object.MergeFrom(other.Object);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 18: {
            if (object_ == null) {
              object_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(object_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作体力协议
  /// </summary>
  public sealed partial class AP_act_event : pb::IMessage<AP_act_event> {
    private static readonly pb::MessageParser<AP_act_event> _parser = new pb::MessageParser<AP_act_event>(() => new AP_act_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AP_act_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AP_act_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AP_act_event(AP_act_event other) : this() {
      type_ = other.type_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AP_act_event Clone() {
      return new AP_act_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.AP_act_type type_ = 0;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.AP_act_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///体力数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AP_act_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AP_act_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AP_act_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.AP_act_type) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///浮空物体变更proto协议
  ///浮空物品变更需求
  ///浮空物品只有变更时，服务端才会存储数据
  ///浮空物体位置变化时（服务端不存储位置），客户端会缓存在内存中，当正常退出游戏或切到后台时，会将数据保存到客户端本地sqlite数据库中，删除游戏重新下载，或者清理数据都会导致战利品球位置丢失，回到默认位置
  ///!!! count为要移除一个战利品球中的数量，从后往前移除（作废）
  ///例1：战利品球中有10个物体，count为3时，移除第10个，第9个，第8个（作废）
  ///例2：战利器球中所有都要移除掉的话，直接使用DELETE，而不是UPDATE！！！
  ///例3：战利器球中有10个物体，客户端传[1，3，7]时，删除第2个，第4个，第8个（注意删除的顺序，避免删除后索引发生变化，导致删除了错误的物体）
  /// </summary>
  public sealed partial class Update_floating_event : pb::IMessage<Update_floating_event> {
    private static readonly pb::MessageParser<Update_floating_event> _parser = new pb::MessageParser<Update_floating_event>(() => new Update_floating_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_floating_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_floating_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_floating_event(Update_floating_event other) : this() {
      type_ = other.type_;
      UpdateObject = other.updateObject_ != null ? other.UpdateObject.Clone() : null;
      index_ = other.index_;
      FloatingObject = other.floatingObject_ != null ? other.FloatingObject.Clone() : null;
      count_ = other.count_;
      removeIncludedObjects_ = other.removeIncludedObjects_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_floating_event Clone() {
      return new Update_floating_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Update_floating_type type_ = 0;
    /// <summary>
    ///添加还是删除
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Update_floating_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "update_object" field.</summary>
    public const int UpdateObjectFieldNumber = 2;
    private global::GameProto.Update_object_event updateObject_;
    /// <summary>
    ///变更的物体 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Update_object_event UpdateObject {
      get { return updateObject_; }
      set {
        updateObject_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private uint index_;
    /// <summary>
    ///type == delete 一定需要的字段
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "floating_object" field.</summary>
    public const int FloatingObjectFieldNumber = 4;
    private global::GameProto.Map_object_data floatingObject_;
    /// <summary>
    ///type == add 一定需要的浮空对象 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data FloatingObject {
      get { return floatingObject_; }
      set {
        floatingObject_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private uint count_;
    /// <summary>
    ///已废弃
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "remove_included_objects" field.</summary>
    public const int RemoveIncludedObjectsFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_removeIncludedObjects_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> removeIncludedObjects_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///type == update 时需要，代替上一个字段实现移除部分物品功能，内含要删除的物体下标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RemoveIncludedObjects {
      get { return removeIncludedObjects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_floating_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_floating_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(UpdateObject, other.UpdateObject)) return false;
      if (Index != other.Index) return false;
      if (!object.Equals(FloatingObject, other.FloatingObject)) return false;
      if (Count != other.Count) return false;
      if(!removeIncludedObjects_.Equals(other.removeIncludedObjects_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (updateObject_ != null) hash ^= UpdateObject.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (floatingObject_ != null) hash ^= FloatingObject.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= removeIncludedObjects_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (updateObject_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateObject);
      }
      if (Index != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Index);
      }
      if (floatingObject_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FloatingObject);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      removeIncludedObjects_.WriteTo(output, _repeated_removeIncludedObjects_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (updateObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateObject);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (floatingObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatingObject);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += removeIncludedObjects_.CalculateSize(_repeated_removeIncludedObjects_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_floating_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.updateObject_ != null) {
        if (updateObject_ == null) {
          updateObject_ = new global::GameProto.Update_object_event();
        }
        UpdateObject.MergeFrom(other.UpdateObject);
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.floatingObject_ != null) {
        if (floatingObject_ == null) {
          floatingObject_ = new global::GameProto.Map_object_data();
        }
        FloatingObject.MergeFrom(other.FloatingObject);
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      removeIncludedObjects_.Add(other.removeIncludedObjects_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Update_floating_type) input.ReadEnum();
            break;
          }
          case 18: {
            if (updateObject_ == null) {
              updateObject_ = new global::GameProto.Update_object_event();
            }
            input.ReadMessage(updateObject_);
            break;
          }
          case 24: {
            Index = input.ReadUInt32();
            break;
          }
          case 34: {
            if (floatingObject_ == null) {
              floatingObject_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(floatingObject_);
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            removeIncludedObjects_.AddEntriesFrom(input, _repeated_removeIncludedObjects_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///打开每日宝箱
  /// </summary>
  public sealed partial class Get_daily_box_event : pb::IMessage<Get_daily_box_event> {
    private static readonly pb::MessageParser<Get_daily_box_event> _parser = new pb::MessageParser<Get_daily_box_event>(() => new Get_daily_box_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get_daily_box_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_daily_box_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_daily_box_event(Get_daily_box_event other) : this() {
      nextBoxId_ = other.nextBoxId_;
      nextConfigIndex_ = other.nextConfigIndex_;
      finishTime_ = other.finishTime_;
      place_ = other.place_;
      Object = other.object_ != null ? other.Object.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_daily_box_event Clone() {
      return new Get_daily_box_event(this);
    }

    /// <summary>Field number for the "next_box_id" field.</summary>
    public const int NextBoxIdFieldNumber = 1;
    private uint nextBoxId_;
    /// <summary>
    ///服务端修改状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextBoxId {
      get { return nextBoxId_; }
      set {
        nextBoxId_ = value;
      }
    }

    /// <summary>Field number for the "next_config_index" field.</summary>
    public const int NextConfigIndexFieldNumber = 2;
    private uint nextConfigIndex_;
    /// <summary>
    ///新的宝箱在配置中index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NextConfigIndex {
      get { return nextConfigIndex_; }
      set {
        nextConfigIndex_ = value;
      }
    }

    /// <summary>Field number for the "finish_time" field.</summary>
    public const int FinishTimeFieldNumber = 3;
    private ulong finishTime_;
    /// <summary>
    ///可以打开的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 4;
    private global::GameProto.Box_lay_place place_ = 0;
    /// <summary>
    ///将宝箱放在大本营还是浮空列表中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Box_lay_place Place {
      get { return place_; }
      set {
        place_ = value;
      }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 5;
    private global::GameProto.Add_object_info object_;
    /// <summary>
    ///添加的物体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Add_object_info Object {
      get { return object_; }
      set {
        object_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get_daily_box_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get_daily_box_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextBoxId != other.NextBoxId) return false;
      if (NextConfigIndex != other.NextConfigIndex) return false;
      if (FinishTime != other.FinishTime) return false;
      if (Place != other.Place) return false;
      if (!object.Equals(Object, other.Object)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextBoxId != 0) hash ^= NextBoxId.GetHashCode();
      if (NextConfigIndex != 0) hash ^= NextConfigIndex.GetHashCode();
      if (FinishTime != 0UL) hash ^= FinishTime.GetHashCode();
      if (Place != 0) hash ^= Place.GetHashCode();
      if (object_ != null) hash ^= Object.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextBoxId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NextBoxId);
      }
      if (NextConfigIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NextConfigIndex);
      }
      if (FinishTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FinishTime);
      }
      if (Place != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Place);
      }
      if (object_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Object);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextBoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextBoxId);
      }
      if (NextConfigIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NextConfigIndex);
      }
      if (FinishTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FinishTime);
      }
      if (Place != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Place);
      }
      if (object_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Object);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get_daily_box_event other) {
      if (other == null) {
        return;
      }
      if (other.NextBoxId != 0) {
        NextBoxId = other.NextBoxId;
      }
      if (other.NextConfigIndex != 0) {
        NextConfigIndex = other.NextConfigIndex;
      }
      if (other.FinishTime != 0UL) {
        FinishTime = other.FinishTime;
      }
      if (other.Place != 0) {
        Place = other.Place;
      }
      if (other.object_ != null) {
        if (object_ == null) {
          object_ = new global::GameProto.Add_object_info();
        }
        Object.MergeFrom(other.Object);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NextBoxId = input.ReadUInt32();
            break;
          }
          case 16: {
            NextConfigIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            FinishTime = input.ReadUInt64();
            break;
          }
          case 32: {
            place_ = (global::GameProto.Box_lay_place) input.ReadEnum();
            break;
          }
          case 42: {
            if (object_ == null) {
              object_ = new global::GameProto.Add_object_info();
            }
            input.ReadMessage(object_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///操作关卡宝箱 解锁 打开
  ///宝箱获得之后是lock
  /// </summary>
  public sealed partial class Act_level_treasure_box_event : pb::IMessage<Act_level_treasure_box_event> {
    private static readonly pb::MessageParser<Act_level_treasure_box_event> _parser = new pb::MessageParser<Act_level_treasure_box_event>(() => new Act_level_treasure_box_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Act_level_treasure_box_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_level_treasure_box_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_level_treasure_box_event(Act_level_treasure_box_event other) : this() {
      type_ = other.type_;
      index_ = other.index_;
      diamondCount_ = other.diamondCount_;
      finishTime_ = other.finishTime_;
      place_ = other.place_;
      Object = other.object_ != null ? other.Object.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_level_treasure_box_event Clone() {
      return new Act_level_treasure_box_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Act_treasure_box_type type_ = 0;
    /// <summary>
    ///操作类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Act_treasure_box_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    /// <summary>
    ///宝箱位置index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "diamond_count" field.</summary>
    public const int DiamondCountFieldNumber = 3;
    private uint diamondCount_;
    /// <summary>
    ///花费的钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DiamondCount {
      get { return diamondCount_; }
      set {
        diamondCount_ = value;
      }
    }

    /// <summary>Field number for the "finish_time" field.</summary>
    public const int FinishTimeFieldNumber = 4;
    private ulong finishTime_;
    /// <summary>
    ///宝箱可以打开的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "place" field.</summary>
    public const int PlaceFieldNumber = 5;
    private global::GameProto.Box_lay_place place_ = 0;
    /// <summary>
    ///将宝箱放在大本营还是浮空列表中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Box_lay_place Place {
      get { return place_; }
      set {
        place_ = value;
      }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 6;
    private global::GameProto.Add_object_info object_;
    /// <summary>
    ///添加的物体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Add_object_info Object {
      get { return object_; }
      set {
        object_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Act_level_treasure_box_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Act_level_treasure_box_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Index != other.Index) return false;
      if (DiamondCount != other.DiamondCount) return false;
      if (FinishTime != other.FinishTime) return false;
      if (Place != other.Place) return false;
      if (!object.Equals(Object, other.Object)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (DiamondCount != 0) hash ^= DiamondCount.GetHashCode();
      if (FinishTime != 0UL) hash ^= FinishTime.GetHashCode();
      if (Place != 0) hash ^= Place.GetHashCode();
      if (object_ != null) hash ^= Object.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (DiamondCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DiamondCount);
      }
      if (FinishTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FinishTime);
      }
      if (Place != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Place);
      }
      if (object_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Object);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (DiamondCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiamondCount);
      }
      if (FinishTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FinishTime);
      }
      if (Place != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Place);
      }
      if (object_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Object);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Act_level_treasure_box_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.DiamondCount != 0) {
        DiamondCount = other.DiamondCount;
      }
      if (other.FinishTime != 0UL) {
        FinishTime = other.FinishTime;
      }
      if (other.Place != 0) {
        Place = other.Place;
      }
      if (other.object_ != null) {
        if (object_ == null) {
          object_ = new global::GameProto.Add_object_info();
        }
        Object.MergeFrom(other.Object);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Act_treasure_box_type) input.ReadEnum();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            DiamondCount = input.ReadUInt32();
            break;
          }
          case 32: {
            FinishTime = input.ReadUInt64();
            break;
          }
          case 40: {
            place_ = (global::GameProto.Box_lay_place) input.ReadEnum();
            break;
          }
          case 50: {
            if (object_ == null) {
              object_ = new global::GameProto.Add_object_info();
            }
            input.ReadMessage(object_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///关卡开始请求
  /// </summary>
  public sealed partial class Start_level_event : pb::IMessage<Start_level_event> {
    private static readonly pb::MessageParser<Start_level_event> _parser = new pb::MessageParser<Start_level_event>(() => new Start_level_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Start_level_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Start_level_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Start_level_event(Start_level_event other) : this() {
      level_ = other.level_;
      exitHalfwayCount_ = other.exitHalfwayCount_;
      needApCount_ = other.needApCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Start_level_event Clone() {
      return new Start_level_event(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///标志开始的是那个关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exit_halfway_count" field.</summary>
    public const int ExitHalfwayCountFieldNumber = 2;
    private uint exitHalfwayCount_;
    /// <summary>
    ///中途退出的次数[根据此值计算实际需要的体力值]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExitHalfwayCount {
      get { return exitHalfwayCount_; }
      set {
        exitHalfwayCount_ = value;
      }
    }

    /// <summary>Field number for the "need_ap_count" field.</summary>
    public const int NeedApCountFieldNumber = 3;
    private uint needApCount_;
    /// <summary>
    ///服务端来校验此值是否正确
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeedApCount {
      get { return needApCount_; }
      set {
        needApCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Start_level_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Start_level_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (ExitHalfwayCount != other.ExitHalfwayCount) return false;
      if (NeedApCount != other.NeedApCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (ExitHalfwayCount != 0) hash ^= ExitHalfwayCount.GetHashCode();
      if (NeedApCount != 0) hash ^= NeedApCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (ExitHalfwayCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ExitHalfwayCount);
      }
      if (NeedApCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NeedApCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (ExitHalfwayCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExitHalfwayCount);
      }
      if (NeedApCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NeedApCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Start_level_event other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.ExitHalfwayCount != 0) {
        ExitHalfwayCount = other.ExitHalfwayCount;
      }
      if (other.NeedApCount != 0) {
        NeedApCount = other.NeedApCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            ExitHalfwayCount = input.ReadUInt32();
            break;
          }
          case 24: {
            NeedApCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///关卡完成请求
  /// </summary>
  public sealed partial class Finish_level_event : pb::IMessage<Finish_level_event> {
    private static readonly pb::MessageParser<Finish_level_event> _parser = new pb::MessageParser<Finish_level_event>(() => new Finish_level_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Finish_level_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finish_level_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finish_level_event(Finish_level_event other) : this() {
      level_ = other.level_;
      boxId_ = other.boxId_;
      configIndex_ = other.configIndex_;
      spendDiamond_ = other.spendDiamond_;
      objectList_ = other.objectList_.Clone();
      floatingList_ = other.floatingList_.Clone();
      ChapterInfo = other.chapterInfo_ != null ? other.ChapterInfo.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Finish_level_event Clone() {
      return new Finish_level_event(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///标志完成的是那个关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "box_id" field.</summary>
    public const int BoxIdFieldNumber = 2;
    private uint boxId_;
    /// <summary>
    ///关卡奖励的宝箱id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    /// <summary>Field number for the "config_index" field.</summary>
    public const int ConfigIndexFieldNumber = 3;
    private uint configIndex_;
    /// <summary>
    ///关卡奖励的宝箱在配置中index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigIndex {
      get { return configIndex_; }
      set {
        configIndex_ = value;
      }
    }

    /// <summary>Field number for the "spend_diamond" field.</summary>
    public const int SpendDiamondFieldNumber = 4;
    private uint spendDiamond_;
    /// <summary>
    ///花费的钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SpendDiamond {
      get { return spendDiamond_; }
      set {
        spendDiamond_ = value;
      }
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GameProto.Add_object_info> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(42, global::GameProto.Add_object_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Add_object_info> objectList_ = new pbc::RepeatedField<global::GameProto.Add_object_info>();
    /// <summary>
    ///在大本营中增加的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Add_object_info> ObjectList {
      get { return objectList_; }
    }

    /// <summary>Field number for the "floating_list" field.</summary>
    public const int FloatingListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GameProto.Map_object_data> _repeated_floatingList_codec
        = pb::FieldCodec.ForMessage(50, global::GameProto.Map_object_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Map_object_data> floatingList_ = new pbc::RepeatedField<global::GameProto.Map_object_data>();
    /// <summary>
    ///添加到浮空列表中的物体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Map_object_data> FloatingList {
      get { return floatingList_; }
    }

    /// <summary>Field number for the "chapter_info" field.</summary>
    public const int ChapterInfoFieldNumber = 7;
    private global::GameProto.Chapter_info chapterInfo_;
    /// <summary>
    ///完成关卡时的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Chapter_info ChapterInfo {
      get { return chapterInfo_; }
      set {
        chapterInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Finish_level_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Finish_level_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (BoxId != other.BoxId) return false;
      if (ConfigIndex != other.ConfigIndex) return false;
      if (SpendDiamond != other.SpendDiamond) return false;
      if(!objectList_.Equals(other.objectList_)) return false;
      if(!floatingList_.Equals(other.floatingList_)) return false;
      if (!object.Equals(ChapterInfo, other.ChapterInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (BoxId != 0) hash ^= BoxId.GetHashCode();
      if (ConfigIndex != 0) hash ^= ConfigIndex.GetHashCode();
      if (SpendDiamond != 0) hash ^= SpendDiamond.GetHashCode();
      hash ^= objectList_.GetHashCode();
      hash ^= floatingList_.GetHashCode();
      if (chapterInfo_ != null) hash ^= ChapterInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (BoxId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoxId);
      }
      if (ConfigIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ConfigIndex);
      }
      if (SpendDiamond != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(SpendDiamond);
      }
      objectList_.WriteTo(output, _repeated_objectList_codec);
      floatingList_.WriteTo(output, _repeated_floatingList_codec);
      if (chapterInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ChapterInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxId);
      }
      if (ConfigIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigIndex);
      }
      if (SpendDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SpendDiamond);
      }
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      size += floatingList_.CalculateSize(_repeated_floatingList_codec);
      if (chapterInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChapterInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Finish_level_event other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.BoxId != 0) {
        BoxId = other.BoxId;
      }
      if (other.ConfigIndex != 0) {
        ConfigIndex = other.ConfigIndex;
      }
      if (other.SpendDiamond != 0) {
        SpendDiamond = other.SpendDiamond;
      }
      objectList_.Add(other.objectList_);
      floatingList_.Add(other.floatingList_);
      if (other.chapterInfo_ != null) {
        if (chapterInfo_ == null) {
          chapterInfo_ = new global::GameProto.Chapter_info();
        }
        ChapterInfo.MergeFrom(other.ChapterInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            BoxId = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            SpendDiamond = input.ReadUInt32();
            break;
          }
          case 42: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
          case 50: {
            floatingList_.AddEntriesFrom(input, _repeated_floatingList_codec);
            break;
          }
          case 58: {
            if (chapterInfo_ == null) {
              chapterInfo_ = new global::GameProto.Chapter_info();
            }
            input.ReadMessage(chapterInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Report_level_action_event : pb::IMessage<Report_level_action_event> {
    private static readonly pb::MessageParser<Report_level_action_event> _parser = new pb::MessageParser<Report_level_action_event>(() => new Report_level_action_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Report_level_action_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report_level_action_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report_level_action_event(Report_level_action_event other) : this() {
      level_ = other.level_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Report_level_action_event Clone() {
      return new Report_level_action_event(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::GameProto.Level_action_type type_ = 0;
    /// <summary>
    ///上报的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Level_action_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Report_level_action_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Report_level_action_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Report_level_action_event other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            type_ = (global::GameProto.Level_action_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Level_add_data_event : pb::IMessage<Level_add_data_event> {
    private static readonly pb::MessageParser<Level_add_data_event> _parser = new pb::MessageParser<Level_add_data_event>(() => new Level_add_data_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Level_add_data_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_add_data_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_add_data_event(Level_add_data_event other) : this() {
      level_ = other.level_;
      type_ = other.type_;
      addValue_ = other.addValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_add_data_event Clone() {
      return new Level_add_data_event(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::GameProto.DATA_TYPE type_ = 0;
    /// <summary>
    ///变更的数据类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.DATA_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "add_value" field.</summary>
    public const int AddValueFieldNumber = 3;
    private uint addValue_;
    /// <summary>
    ///增加的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddValue {
      get { return addValue_; }
      set {
        addValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Level_add_data_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Level_add_data_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Type != other.Type) return false;
      if (AddValue != other.AddValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (AddValue != 0) hash ^= AddValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (AddValue != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AddValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (AddValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Level_add_data_event other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.AddValue != 0) {
        AddValue = other.AddValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            type_ = (global::GameProto.DATA_TYPE) input.ReadEnum();
            break;
          }
          case 24: {
            AddValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///迷雾解锁
  /// </summary>
  public sealed partial class Unlock_foggy_event : pb::IMessage<Unlock_foggy_event> {
    private static readonly pb::MessageParser<Unlock_foggy_event> _parser = new pb::MessageParser<Unlock_foggy_event>(() => new Unlock_foggy_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Unlock_foggy_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unlock_foggy_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unlock_foggy_event(Unlock_foggy_event other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Unlock_foggy_event Clone() {
      return new Unlock_foggy_event(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///迷雾id 根据配置表判断龙力是否足够 或者判断是否被购买
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Unlock_foggy_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Unlock_foggy_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Unlock_foggy_event other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Update_terrain_info : pb::IMessage<Update_terrain_info> {
    private static readonly pb::MessageParser<Update_terrain_info> _parser = new pb::MessageParser<Update_terrain_info>(() => new Update_terrain_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_terrain_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_terrain_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_terrain_info(Update_terrain_info other) : this() {
      type_ = other.type_;
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      state_ = other.state_;
      deadLevel_ = other.deadLevel_;
      cureCount_ = other.cureCount_;
      removeFlag_ = other.removeFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_terrain_info Clone() {
      return new Update_terrain_info(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private uint type_;
    /// <summary>
    ///请求状态[Update_terrain_type按位与的结果]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 2;
    private global::GameProto.Coord coord_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::GameProto.Grid_state state_ = 0;
    /// <summary>
    ///格子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Grid_state State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "dead_level" field.</summary>
    public const int DeadLevelFieldNumber = 4;
    private uint deadLevel_;
    /// <summary>
    ///deal_level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadLevel {
      get { return deadLevel_; }
      set {
        deadLevel_ = value;
      }
    }

    /// <summary>Field number for the "cure_count" field.</summary>
    public const int CureCountFieldNumber = 5;
    private uint cureCount_;
    /// <summary>
    ///cure_count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CureCount {
      get { return cureCount_; }
      set {
        cureCount_ = value;
      }
    }

    /// <summary>Field number for the "remove_flag" field.</summary>
    public const int RemoveFlagFieldNumber = 6;
    private bool removeFlag_;
    /// <summary>
    ///地形解锁会将封印在地上的部分物品移除，变更相关数据之后，存储到浮空物品中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoveFlag {
      get { return removeFlag_; }
      set {
        removeFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_terrain_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_terrain_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Coord, other.Coord)) return false;
      if (State != other.State) return false;
      if (DeadLevel != other.DeadLevel) return false;
      if (CureCount != other.CureCount) return false;
      if (RemoveFlag != other.RemoveFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (DeadLevel != 0) hash ^= DeadLevel.GetHashCode();
      if (CureCount != 0) hash ^= CureCount.GetHashCode();
      if (RemoveFlag != false) hash ^= RemoveFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Type);
      }
      if (coord_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Coord);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (DeadLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DeadLevel);
      }
      if (CureCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CureCount);
      }
      if (RemoveFlag != false) {
        output.WriteRawTag(48);
        output.WriteBool(RemoveFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (DeadLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadLevel);
      }
      if (CureCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CureCount);
      }
      if (RemoveFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_terrain_info other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.DeadLevel != 0) {
        DeadLevel = other.DeadLevel;
      }
      if (other.CureCount != 0) {
        CureCount = other.CureCount;
      }
      if (other.RemoveFlag != false) {
        RemoveFlag = other.RemoveFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadUInt32();
            break;
          }
          case 18: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 24: {
            state_ = (global::GameProto.Grid_state) input.ReadEnum();
            break;
          }
          case 32: {
            DeadLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            CureCount = input.ReadUInt32();
            break;
          }
          case 48: {
            RemoveFlag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Update_terrain_event : pb::IMessage<Update_terrain_event> {
    private static readonly pb::MessageParser<Update_terrain_event> _parser = new pb::MessageParser<Update_terrain_event>(() => new Update_terrain_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_terrain_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_terrain_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_terrain_event(Update_terrain_event other) : this() {
      list_ = other.list_.Clone();
      object_ = other.object_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_terrain_event Clone() {
      return new Update_terrain_event(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Update_terrain_info> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Update_terrain_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Update_terrain_info> list_ = new pbc::RepeatedField<global::GameProto.Update_terrain_info>();
    /// <summary>
    ///需要更新的格子列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Update_terrain_info> List {
      get { return list_; }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Map_object_data> _repeated_object_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Map_object_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Map_object_data> object_ = new pbc::RepeatedField<global::GameProto.Map_object_data>();
    /// <summary>
    ///增加的浮空物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Map_object_data> Object {
      get { return object_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_terrain_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_terrain_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if(!object_.Equals(other.object_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      hash ^= object_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      object_.WriteTo(output, _repeated_object_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      size += object_.CalculateSize(_repeated_object_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_terrain_event other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      object_.Add(other.object_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 18: {
            object_.AddEntriesFrom(input, _repeated_object_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///創建任務
  /// </summary>
  public sealed partial class Create_task_event : pb::IMessage<Create_task_event> {
    private static readonly pb::MessageParser<Create_task_event> _parser = new pb::MessageParser<Create_task_event>(() => new Create_task_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Create_task_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_task_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_task_event(Create_task_event other) : this() {
      oldId_ = other.oldId_;
      NextData = other.nextData_ != null ? other.NextData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Create_task_event Clone() {
      return new Create_task_event(this);
    }

    /// <summary>Field number for the "old_id" field.</summary>
    public const int OldIdFieldNumber = 1;
    private uint oldId_;
    /// <summary>
    ///要变更的任務ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OldId {
      get { return oldId_; }
      set {
        oldId_ = value;
      }
    }

    /// <summary>Field number for the "next_data" field.</summary>
    public const int NextDataFieldNumber = 2;
    private global::GameProto.Task_data nextData_;
    /// <summary>
    ///新的任务的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Task_data NextData {
      get { return nextData_; }
      set {
        nextData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Create_task_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Create_task_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OldId != other.OldId) return false;
      if (!object.Equals(NextData, other.NextData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OldId != 0) hash ^= OldId.GetHashCode();
      if (nextData_ != null) hash ^= NextData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OldId);
      }
      if (nextData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NextData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OldId);
      }
      if (nextData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Create_task_event other) {
      if (other == null) {
        return;
      }
      if (other.OldId != 0) {
        OldId = other.OldId;
      }
      if (other.nextData_ != null) {
        if (nextData_ == null) {
          nextData_ = new global::GameProto.Task_data();
        }
        NextData.MergeFrom(other.NextData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OldId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (nextData_ == null) {
              nextData_ = new global::GameProto.Task_data();
            }
            input.ReadMessage(nextData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新任務
  /// </summary>
  public sealed partial class Change_task_event : pb::IMessage<Change_task_event> {
    private static readonly pb::MessageParser<Change_task_event> _parser = new pb::MessageParser<Change_task_event>(() => new Change_task_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Change_task_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change_task_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change_task_event(Change_task_event other) : this() {
      id_ = other.id_;
      addCount_ = other.addCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Change_task_event Clone() {
      return new Change_task_event(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///要变更的任務ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "add_count" field.</summary>
    public const int AddCountFieldNumber = 2;
    private uint addCount_;
    /// <summary>
    ///任务增加的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AddCount {
      get { return addCount_; }
      set {
        addCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Change_task_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Change_task_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AddCount != other.AddCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AddCount != 0) hash ^= AddCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (AddCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AddCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (AddCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AddCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Change_task_event other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AddCount != 0) {
        AddCount = other.AddCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            AddCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///完成任务
  /// </summary>
  public sealed partial class Complete_task_event : pb::IMessage<Complete_task_event> {
    private static readonly pb::MessageParser<Complete_task_event> _parser = new pb::MessageParser<Complete_task_event>(() => new Complete_task_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Complete_task_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Complete_task_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Complete_task_event(Complete_task_event other) : this() {
      id_ = other.id_;
      diamondCount_ = other.diamondCount_;
      RewardObject = other.rewardObject_ != null ? other.RewardObject.Clone() : null;
      RewardFloating = other.rewardFloating_ != null ? other.RewardFloating.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Complete_task_event Clone() {
      return new Complete_task_event(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///要完成的任務ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "diamond_count" field.</summary>
    public const int DiamondCountFieldNumber = 2;
    private uint diamondCount_;
    /// <summary>
    ///使用的钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DiamondCount {
      get { return diamondCount_; }
      set {
        diamondCount_ = value;
      }
    }

    /// <summary>Field number for the "reward_object" field.</summary>
    public const int RewardObjectFieldNumber = 3;
    private global::GameProto.Add_object_info rewardObject_;
    /// <summary>
    ///往地图上添加的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Add_object_info RewardObject {
      get { return rewardObject_; }
      set {
        rewardObject_ = value;
      }
    }

    /// <summary>Field number for the "reward_floating" field.</summary>
    public const int RewardFloatingFieldNumber = 4;
    private global::GameProto.Map_object_data rewardFloating_;
    /// <summary>
    ///生成战利品球
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data RewardFloating {
      get { return rewardFloating_; }
      set {
        rewardFloating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Complete_task_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Complete_task_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DiamondCount != other.DiamondCount) return false;
      if (!object.Equals(RewardObject, other.RewardObject)) return false;
      if (!object.Equals(RewardFloating, other.RewardFloating)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DiamondCount != 0) hash ^= DiamondCount.GetHashCode();
      if (rewardObject_ != null) hash ^= RewardObject.GetHashCode();
      if (rewardFloating_ != null) hash ^= RewardFloating.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (DiamondCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DiamondCount);
      }
      if (rewardObject_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RewardObject);
      }
      if (rewardFloating_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RewardFloating);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (DiamondCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DiamondCount);
      }
      if (rewardObject_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardObject);
      }
      if (rewardFloating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardFloating);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Complete_task_event other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DiamondCount != 0) {
        DiamondCount = other.DiamondCount;
      }
      if (other.rewardObject_ != null) {
        if (rewardObject_ == null) {
          rewardObject_ = new global::GameProto.Add_object_info();
        }
        RewardObject.MergeFrom(other.RewardObject);
      }
      if (other.rewardFloating_ != null) {
        if (rewardFloating_ == null) {
          rewardFloating_ = new global::GameProto.Map_object_data();
        }
        RewardFloating.MergeFrom(other.RewardFloating);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            DiamondCount = input.ReadUInt32();
            break;
          }
          case 26: {
            if (rewardObject_ == null) {
              rewardObject_ = new global::GameProto.Add_object_info();
            }
            input.ReadMessage(rewardObject_);
            break;
          }
          case 34: {
            if (rewardFloating_ == null) {
              rewardFloating_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(rewardFloating_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Random_data : pb::IMessage<Random_data> {
    private static readonly pb::MessageParser<Random_data> _parser = new pb::MessageParser<Random_data>(() => new Random_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Random_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Random_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Random_data(Random_data other) : this() {
      randomMinValue_ = other.randomMinValue_;
      randomMaxValue_ = other.randomMaxValue_;
      randomAction_ = other.randomAction_;
      randomResult_ = other.randomResult_;
      randomResultValue_ = other.randomResultValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Random_data Clone() {
      return new Random_data(this);
    }

    /// <summary>Field number for the "random_min_value" field.</summary>
    public const int RandomMinValueFieldNumber = 1;
    private uint randomMinValue_;
    /// <summary>
    ///随机最小数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandomMinValue {
      get { return randomMinValue_; }
      set {
        randomMinValue_ = value;
      }
    }

    /// <summary>Field number for the "random_max_value" field.</summary>
    public const int RandomMaxValueFieldNumber = 2;
    private uint randomMaxValue_;
    /// <summary>
    ///随机最大数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandomMaxValue {
      get { return randomMaxValue_; }
      set {
        randomMaxValue_ = value;
      }
    }

    /// <summary>Field number for the "random_action" field.</summary>
    public const int RandomActionFieldNumber = 3;
    private global::GameProto.Random_action randomAction_ = 0;
    /// <summary>
    ///随机行为
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Random_action RandomAction {
      get { return randomAction_; }
      set {
        randomAction_ = value;
      }
    }

    /// <summary>Field number for the "random_result" field.</summary>
    public const int RandomResultFieldNumber = 4;
    private global::GameProto.Random_result randomResult_ = 0;
    /// <summary>
    ///随机结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Random_result RandomResult {
      get { return randomResult_; }
      set {
        randomResult_ = value;
      }
    }

    /// <summary>Field number for the "random_result_value" field.</summary>
    public const int RandomResultValueFieldNumber = 5;
    private uint randomResultValue_;
    /// <summary>
    ///随机结果数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandomResultValue {
      get { return randomResultValue_; }
      set {
        randomResultValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Random_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Random_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RandomMinValue != other.RandomMinValue) return false;
      if (RandomMaxValue != other.RandomMaxValue) return false;
      if (RandomAction != other.RandomAction) return false;
      if (RandomResult != other.RandomResult) return false;
      if (RandomResultValue != other.RandomResultValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RandomMinValue != 0) hash ^= RandomMinValue.GetHashCode();
      if (RandomMaxValue != 0) hash ^= RandomMaxValue.GetHashCode();
      if (RandomAction != 0) hash ^= RandomAction.GetHashCode();
      if (RandomResult != 0) hash ^= RandomResult.GetHashCode();
      if (RandomResultValue != 0) hash ^= RandomResultValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RandomMinValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RandomMinValue);
      }
      if (RandomMaxValue != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(RandomMaxValue);
      }
      if (RandomAction != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RandomAction);
      }
      if (RandomResult != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) RandomResult);
      }
      if (RandomResultValue != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RandomResultValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RandomMinValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomMinValue);
      }
      if (RandomMaxValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomMaxValue);
      }
      if (RandomAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RandomAction);
      }
      if (RandomResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RandomResult);
      }
      if (RandomResultValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandomResultValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Random_data other) {
      if (other == null) {
        return;
      }
      if (other.RandomMinValue != 0) {
        RandomMinValue = other.RandomMinValue;
      }
      if (other.RandomMaxValue != 0) {
        RandomMaxValue = other.RandomMaxValue;
      }
      if (other.RandomAction != 0) {
        RandomAction = other.RandomAction;
      }
      if (other.RandomResult != 0) {
        RandomResult = other.RandomResult;
      }
      if (other.RandomResultValue != 0) {
        RandomResultValue = other.RandomResultValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RandomMinValue = input.ReadUInt32();
            break;
          }
          case 16: {
            RandomMaxValue = input.ReadUInt32();
            break;
          }
          case 24: {
            randomAction_ = (global::GameProto.Random_action) input.ReadEnum();
            break;
          }
          case 32: {
            randomResult_ = (global::GameProto.Random_result) input.ReadEnum();
            break;
          }
          case 40: {
            RandomResultValue = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///掠夺相关内容-----------
  ///客户端请求掠夺数据
  /// </summary>
  public sealed partial class Plunder_event : pb::IMessage<Plunder_event> {
    private static readonly pb::MessageParser<Plunder_event> _parser = new pb::MessageParser<Plunder_event>(() => new Plunder_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_event(Plunder_event other) : this() {
      operate_ = other.operate_;
      enemyId_ = other.enemyId_;
      CheckData = other.checkData_ != null ? other.CheckData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_event Clone() {
      return new Plunder_event(this);
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 1;
    private global::GameProto.Plunder_operate operate_ = 0;
    /// <summary>
    ///请求操作的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_operate Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "enemy_id" field.</summary>
    public const int EnemyIdFieldNumber = 2;
    private uint enemyId_;
    /// <summary>
    ///被掠夺玩家的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyId {
      get { return enemyId_; }
      set {
        enemyId_ = value;
      }
    }

    /// <summary>Field number for the "check_data" field.</summary>
    public const int CheckDataFieldNumber = 3;
    private global::GameProto.Plunder_check_data checkData_;
    /// <summary>
    ///请求验证的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_check_data CheckData {
      get { return checkData_; }
      set {
        checkData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operate != other.Operate) return false;
      if (EnemyId != other.EnemyId) return false;
      if (!object.Equals(CheckData, other.CheckData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operate != 0) hash ^= Operate.GetHashCode();
      if (EnemyId != 0) hash ^= EnemyId.GetHashCode();
      if (checkData_ != null) hash ^= CheckData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operate != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operate);
      }
      if (EnemyId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(EnemyId);
      }
      if (checkData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CheckData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operate);
      }
      if (EnemyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyId);
      }
      if (checkData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CheckData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_event other) {
      if (other == null) {
        return;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      if (other.EnemyId != 0) {
        EnemyId = other.EnemyId;
      }
      if (other.checkData_ != null) {
        if (checkData_ == null) {
          checkData_ = new global::GameProto.Plunder_check_data();
        }
        CheckData.MergeFrom(other.CheckData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            operate_ = (global::GameProto.Plunder_operate) input.ReadEnum();
            break;
          }
          case 16: {
            EnemyId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (checkData_ == null) {
              checkData_ = new global::GameProto.Plunder_check_data();
            }
            input.ReadMessage(checkData_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务端返回掠夺数据
  /// </summary>
  public sealed partial class Plunder_response : pb::IMessage<Plunder_response> {
    private static readonly pb::MessageParser<Plunder_response> _parser = new pb::MessageParser<Plunder_response>(() => new Plunder_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_response(Plunder_response other) : this() {
      destUserId_ = other.destUserId_;
      state_ = other.state_;
      ResultData = other.resultData_ != null ? other.ResultData.Clone() : null;
      defenseArmy_ = other.defenseArmy_.Clone();
      grid_ = other.grid_.Clone();
      RankData = other.rankData_ != null ? other.RankData.Clone() : null;
      PlayerData = other.playerData_ != null ? other.PlayerData.Clone() : null;
      level_ = other.level_;
      AllncTech = other.allncTech_ != null ? other.AllncTech.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_response Clone() {
      return new Plunder_response(this);
    }

    /// <summary>Field number for the "dest_user_id" field.</summary>
    public const int DestUserIdFieldNumber = 1;
    private uint destUserId_;
    /// <summary>
    ///被掠夺的
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestUserId {
      get { return destUserId_; }
      set {
        destUserId_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::GameProto.Plunder_event_state state_ = 0;
    /// <summary>
    ///掠夺请求的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_event_state State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "result_data" field.</summary>
    public const int ResultDataFieldNumber = 3;
    private global::GameProto.Plunder_check_result resultData_;
    /// <summary>
    ///效验返回的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_check_result ResultData {
      get { return resultData_; }
      set {
        resultData_ = value;
      }
    }

    /// <summary>Field number for the "defense_army" field.</summary>
    public const int DefenseArmyFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Monster_data> _repeated_defenseArmy_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_data> defenseArmy_ = new pbc::RepeatedField<global::GameProto.Monster_data>();
    /// <summary>
    ///防守阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_data> DefenseArmy {
      get { return defenseArmy_; }
    }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GameProto.Grid_data> _repeated_grid_codec
        = pb::FieldCodec.ForMessage(42, global::GameProto.Grid_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Grid_data> grid_ = new pbc::RepeatedField<global::GameProto.Grid_data>();
    /// <summary>
    ///地图格子数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Grid_data> Grid {
      get { return grid_; }
    }

    /// <summary>Field number for the "rank_data" field.</summary>
    public const int RankDataFieldNumber = 6;
    private global::GameProto.Plunder_rank_data rankData_;
    /// <summary>
    ///排名数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_rank_data RankData {
      get { return rankData_; }
      set {
        rankData_ = value;
      }
    }

    /// <summary>Field number for the "player_data" field.</summary>
    public const int PlayerDataFieldNumber = 7;
    private global::GameProto.Player_data playerData_;
    /// <summary>
    ///敌方玩家基本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private uint level_;
    /// <summary>
    ///敌方玩家的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "allnc_tech" field.</summary>
    public const int AllncTechFieldNumber = 9;
    private global::GameProto.Alliance_black_tech allncTech_;
    /// <summary>
    ///联盟科技
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_black_tech AllncTech {
      get { return allncTech_; }
      set {
        allncTech_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DestUserId != other.DestUserId) return false;
      if (State != other.State) return false;
      if (!object.Equals(ResultData, other.ResultData)) return false;
      if(!defenseArmy_.Equals(other.defenseArmy_)) return false;
      if(!grid_.Equals(other.grid_)) return false;
      if (!object.Equals(RankData, other.RankData)) return false;
      if (!object.Equals(PlayerData, other.PlayerData)) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(AllncTech, other.AllncTech)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DestUserId != 0) hash ^= DestUserId.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (resultData_ != null) hash ^= ResultData.GetHashCode();
      hash ^= defenseArmy_.GetHashCode();
      hash ^= grid_.GetHashCode();
      if (rankData_ != null) hash ^= RankData.GetHashCode();
      if (playerData_ != null) hash ^= PlayerData.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (allncTech_ != null) hash ^= AllncTech.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DestUserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DestUserId);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (resultData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ResultData);
      }
      defenseArmy_.WriteTo(output, _repeated_defenseArmy_codec);
      grid_.WriteTo(output, _repeated_grid_codec);
      if (rankData_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RankData);
      }
      if (playerData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayerData);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Level);
      }
      if (allncTech_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AllncTech);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DestUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DestUserId);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (resultData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResultData);
      }
      size += defenseArmy_.CalculateSize(_repeated_defenseArmy_codec);
      size += grid_.CalculateSize(_repeated_grid_codec);
      if (rankData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankData);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (allncTech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllncTech);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_response other) {
      if (other == null) {
        return;
      }
      if (other.DestUserId != 0) {
        DestUserId = other.DestUserId;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.resultData_ != null) {
        if (resultData_ == null) {
          resultData_ = new global::GameProto.Plunder_check_result();
        }
        ResultData.MergeFrom(other.ResultData);
      }
      defenseArmy_.Add(other.defenseArmy_);
      grid_.Add(other.grid_);
      if (other.rankData_ != null) {
        if (rankData_ == null) {
          rankData_ = new global::GameProto.Plunder_rank_data();
        }
        RankData.MergeFrom(other.RankData);
      }
      if (other.playerData_ != null) {
        if (playerData_ == null) {
          playerData_ = new global::GameProto.Player_data();
        }
        PlayerData.MergeFrom(other.PlayerData);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.allncTech_ != null) {
        if (allncTech_ == null) {
          allncTech_ = new global::GameProto.Alliance_black_tech();
        }
        AllncTech.MergeFrom(other.AllncTech);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DestUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            state_ = (global::GameProto.Plunder_event_state) input.ReadEnum();
            break;
          }
          case 26: {
            if (resultData_ == null) {
              resultData_ = new global::GameProto.Plunder_check_result();
            }
            input.ReadMessage(resultData_);
            break;
          }
          case 34: {
            defenseArmy_.AddEntriesFrom(input, _repeated_defenseArmy_codec);
            break;
          }
          case 42: {
            grid_.AddEntriesFrom(input, _repeated_grid_codec);
            break;
          }
          case 50: {
            if (rankData_ == null) {
              rankData_ = new global::GameProto.Plunder_rank_data();
            }
            input.ReadMessage(rankData_);
            break;
          }
          case 58: {
            if (playerData_ == null) {
              playerData_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 64: {
            Level = input.ReadUInt32();
            break;
          }
          case 74: {
            if (allncTech_ == null) {
              allncTech_ = new global::GameProto.Alliance_black_tech();
            }
            input.ReadMessage(allncTech_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端请求验证掠夺数据
  /// </summary>
  public sealed partial class Plunder_check_data : pb::IMessage<Plunder_check_data> {
    private static readonly pb::MessageParser<Plunder_check_data> _parser = new pb::MessageParser<Plunder_check_data>(() => new Plunder_check_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_check_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_check_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_check_data(Plunder_check_data other) : this() {
      aIFlag_ = other.aIFlag_;
      starLevel_ = other.starLevel_;
      myResult_ = other.myResult_.Clone();
      enemyResult_ = other.enemyResult_.Clone();
      colList_ = other.colList_.Clone();
      coordList_ = other.coordList_.Clone();
      startTime_ = other.startTime_;
      myTrophy_ = other.myTrophy_;
      enemyTrophy_ = other.enemyTrophy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_check_data Clone() {
      return new Plunder_check_data(this);
    }

    /// <summary>Field number for the "AI_flag" field.</summary>
    public const int AIFlagFieldNumber = 1;
    private bool aIFlag_;
    /// <summary>
    ///请求的是AI ture:是  false:否
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AIFlag {
      get { return aIFlag_; }
      set {
        aIFlag_ = value;
      }
    }

    /// <summary>Field number for the "star_level" field.</summary>
    public const int StarLevelFieldNumber = 2;
    private uint starLevel_;
    /// <summary>
    ///星级评分(0星为失败)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "my_result" field.</summary>
    public const int MyResultFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Plunder_monster_result> _repeated_myResult_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Plunder_monster_result.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Plunder_monster_result> myResult_ = new pbc::RepeatedField<global::GameProto.Plunder_monster_result>();
    /// <summary>
    ///我方掠夺剩余怪兽结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Plunder_monster_result> MyResult {
      get { return myResult_; }
    }

    /// <summary>Field number for the "enemy_result" field.</summary>
    public const int EnemyResultFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Plunder_monster_result> _repeated_enemyResult_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Plunder_monster_result.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Plunder_monster_result> enemyResult_ = new pbc::RepeatedField<global::GameProto.Plunder_monster_result>();
    /// <summary>
    ///敌方掠夺剩余怪兽结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Plunder_monster_result> EnemyResult {
      get { return enemyResult_; }
    }

    /// <summary>Field number for the "col_list" field.</summary>
    public const int ColListFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_colList_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> colList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///掠夺的物品id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ColList {
      get { return colList_; }
    }

    /// <summary>Field number for the "coord_list" field.</summary>
    public const int CoordListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GameProto.Coord> _repeated_coordList_codec
        = pb::FieldCodec.ForMessage(50, global::GameProto.Coord.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Coord> coordList_ = new pbc::RepeatedField<global::GameProto.Coord>();
    /// <summary>
    ///坐标数据               
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Coord> CoordList {
      get { return coordList_; }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 7;
    private ulong startTime_;
    /// <summary>
    ///开始掠夺的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "my_trophy" field.</summary>
    public const int MyTrophyFieldNumber = 8;
    private int myTrophy_;
    /// <summary>
    ///我方奖杯数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyTrophy {
      get { return myTrophy_; }
      set {
        myTrophy_ = value;
      }
    }

    /// <summary>Field number for the "enemy_trophy" field.</summary>
    public const int EnemyTrophyFieldNumber = 9;
    private int enemyTrophy_;
    /// <summary>
    ///敌方奖杯数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnemyTrophy {
      get { return enemyTrophy_; }
      set {
        enemyTrophy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_check_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_check_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AIFlag != other.AIFlag) return false;
      if (StarLevel != other.StarLevel) return false;
      if(!myResult_.Equals(other.myResult_)) return false;
      if(!enemyResult_.Equals(other.enemyResult_)) return false;
      if(!colList_.Equals(other.colList_)) return false;
      if(!coordList_.Equals(other.coordList_)) return false;
      if (StartTime != other.StartTime) return false;
      if (MyTrophy != other.MyTrophy) return false;
      if (EnemyTrophy != other.EnemyTrophy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AIFlag != false) hash ^= AIFlag.GetHashCode();
      if (StarLevel != 0) hash ^= StarLevel.GetHashCode();
      hash ^= myResult_.GetHashCode();
      hash ^= enemyResult_.GetHashCode();
      hash ^= colList_.GetHashCode();
      hash ^= coordList_.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (MyTrophy != 0) hash ^= MyTrophy.GetHashCode();
      if (EnemyTrophy != 0) hash ^= EnemyTrophy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AIFlag != false) {
        output.WriteRawTag(8);
        output.WriteBool(AIFlag);
      }
      if (StarLevel != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StarLevel);
      }
      myResult_.WriteTo(output, _repeated_myResult_codec);
      enemyResult_.WriteTo(output, _repeated_enemyResult_codec);
      colList_.WriteTo(output, _repeated_colList_codec);
      coordList_.WriteTo(output, _repeated_coordList_codec);
      if (StartTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(StartTime);
      }
      if (MyTrophy != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MyTrophy);
      }
      if (EnemyTrophy != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EnemyTrophy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AIFlag != false) {
        size += 1 + 1;
      }
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StarLevel);
      }
      size += myResult_.CalculateSize(_repeated_myResult_codec);
      size += enemyResult_.CalculateSize(_repeated_enemyResult_codec);
      size += colList_.CalculateSize(_repeated_colList_codec);
      size += coordList_.CalculateSize(_repeated_coordList_codec);
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (MyTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyTrophy);
      }
      if (EnemyTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemyTrophy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_check_data other) {
      if (other == null) {
        return;
      }
      if (other.AIFlag != false) {
        AIFlag = other.AIFlag;
      }
      if (other.StarLevel != 0) {
        StarLevel = other.StarLevel;
      }
      myResult_.Add(other.myResult_);
      enemyResult_.Add(other.enemyResult_);
      colList_.Add(other.colList_);
      coordList_.Add(other.coordList_);
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.MyTrophy != 0) {
        MyTrophy = other.MyTrophy;
      }
      if (other.EnemyTrophy != 0) {
        EnemyTrophy = other.EnemyTrophy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AIFlag = input.ReadBool();
            break;
          }
          case 16: {
            StarLevel = input.ReadUInt32();
            break;
          }
          case 26: {
            myResult_.AddEntriesFrom(input, _repeated_myResult_codec);
            break;
          }
          case 34: {
            enemyResult_.AddEntriesFrom(input, _repeated_enemyResult_codec);
            break;
          }
          case 42:
          case 40: {
            colList_.AddEntriesFrom(input, _repeated_colList_codec);
            break;
          }
          case 50: {
            coordList_.AddEntriesFrom(input, _repeated_coordList_codec);
            break;
          }
          case 56: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 64: {
            MyTrophy = input.ReadInt32();
            break;
          }
          case 72: {
            EnemyTrophy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Plunder_change_info : pb::IMessage<Plunder_change_info> {
    private static readonly pb::MessageParser<Plunder_change_info> _parser = new pb::MessageParser<Plunder_change_info>(() => new Plunder_change_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_change_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_change_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_change_info(Plunder_change_info other) : this() {
      attackFlag_ = other.attackFlag_;
      userId_ = other.userId_;
      resultTrophy_ = other.resultTrophy_;
      colList_ = other.colList_.Clone();
      coordList_ = other.coordList_.Clone();
      winFlag_ = other.winFlag_;
      protectTime_ = other.protectTime_;
      lastTrophy_ = other.lastTrophy_;
      PlayerData = other.playerData_ != null ? other.PlayerData.Clone() : null;
      startTime_ = other.startTime_;
      aIFlag_ = other.aIFlag_;
      ArmyData = other.armyData_ != null ? other.ArmyData.Clone() : null;
      level_ = other.level_;
      attTrophy_ = other.attTrophy_;
      defenTrophy_ = other.defenTrophy_;
      attChange_ = other.attChange_;
      defenChange_ = other.defenChange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_change_info Clone() {
      return new Plunder_change_info(this);
    }

    /// <summary>Field number for the "attack_flag" field.</summary>
    public const int AttackFlagFieldNumber = 1;
    private bool attackFlag_;
    /// <summary>
    ///是否是掠夺方
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AttackFlag {
      get { return attackFlag_; }
      set {
        attackFlag_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private uint userId_;
    /// <summary>
    ///目标用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "result_trophy" field.</summary>
    public const int ResultTrophyFieldNumber = 3;
    private uint resultTrophy_;
    /// <summary>
    ///计算之后的奖杯数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ResultTrophy {
      get { return resultTrophy_; }
      set {
        resultTrophy_ = value;
      }
    }

    /// <summary>Field number for the "col_list" field.</summary>
    public const int ColListFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_colList_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> colList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///收集的漂浮物列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ColList {
      get { return colList_; }
    }

    /// <summary>Field number for the "coord_list" field.</summary>
    public const int CoordListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GameProto.Coord> _repeated_coordList_codec
        = pb::FieldCodec.ForMessage(42, global::GameProto.Coord.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Coord> coordList_ = new pbc::RepeatedField<global::GameProto.Coord>();
    /// <summary>
    ///用户地图数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Coord> CoordList {
      get { return coordList_; }
    }

    /// <summary>Field number for the "win_flag" field.</summary>
    public const int WinFlagFieldNumber = 6;
    private bool winFlag_;
    /// <summary>
    ///胜利的标识 true: 我方胜利, false: 敌方胜利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WinFlag {
      get { return winFlag_; }
      set {
        winFlag_ = value;
      }
    }

    /// <summary>Field number for the "protect_time" field.</summary>
    public const int ProtectTimeFieldNumber = 7;
    private ulong protectTime_;
    /// <summary>
    ///保护到期的时间点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProtectTime {
      get { return protectTime_; }
      set {
        protectTime_ = value;
      }
    }

    /// <summary>Field number for the "last_trophy" field.</summary>
    public const int LastTrophyFieldNumber = 8;
    private uint lastTrophy_;
    /// <summary>
    ///上一次的奖杯变更数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastTrophy {
      get { return lastTrophy_; }
      set {
        lastTrophy_ = value;
      }
    }

    /// <summary>Field number for the "player_data" field.</summary>
    public const int PlayerDataFieldNumber = 9;
    private global::GameProto.Player_data playerData_;
    /// <summary>
    ///玩家的基础数据信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 10;
    private ulong startTime_;
    /// <summary>
    ///开始的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "AI_flag" field.</summary>
    public const int AIFlagFieldNumber = 11;
    private bool aIFlag_;
    /// <summary>
    ///是否为AI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AIFlag {
      get { return aIFlag_; }
      set {
        aIFlag_ = value;
      }
    }

    /// <summary>Field number for the "army_data" field.</summary>
    public const int ArmyDataFieldNumber = 12;
    private global::GameProto.Plunder_army_data armyData_;
    /// <summary>
    ///敌方阵容 (代表的是敌方的阵容)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_army_data ArmyData {
      get { return armyData_; }
      set {
        armyData_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 13;
    private uint level_;
    /// <summary>
    ///敌方等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "att_trophy" field.</summary>
    public const int AttTrophyFieldNumber = 14;
    private uint attTrophy_;
    /// <summary>
    ///进攻方掠夺值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttTrophy {
      get { return attTrophy_; }
      set {
        attTrophy_ = value;
      }
    }

    /// <summary>Field number for the "defen_trophy" field.</summary>
    public const int DefenTrophyFieldNumber = 15;
    private uint defenTrophy_;
    /// <summary>
    ///防守方掠夺值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefenTrophy {
      get { return defenTrophy_; }
      set {
        defenTrophy_ = value;
      }
    }

    /// <summary>Field number for the "att_change" field.</summary>
    public const int AttChangeFieldNumber = 16;
    private int attChange_;
    /// <summary>
    ///进攻方变更值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttChange {
      get { return attChange_; }
      set {
        attChange_ = value;
      }
    }

    /// <summary>Field number for the "defen_change" field.</summary>
    public const int DefenChangeFieldNumber = 17;
    private int defenChange_;
    /// <summary>
    ///防守放进攻值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenChange {
      get { return defenChange_; }
      set {
        defenChange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_change_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_change_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackFlag != other.AttackFlag) return false;
      if (UserId != other.UserId) return false;
      if (ResultTrophy != other.ResultTrophy) return false;
      if(!colList_.Equals(other.colList_)) return false;
      if(!coordList_.Equals(other.coordList_)) return false;
      if (WinFlag != other.WinFlag) return false;
      if (ProtectTime != other.ProtectTime) return false;
      if (LastTrophy != other.LastTrophy) return false;
      if (!object.Equals(PlayerData, other.PlayerData)) return false;
      if (StartTime != other.StartTime) return false;
      if (AIFlag != other.AIFlag) return false;
      if (!object.Equals(ArmyData, other.ArmyData)) return false;
      if (Level != other.Level) return false;
      if (AttTrophy != other.AttTrophy) return false;
      if (DefenTrophy != other.DefenTrophy) return false;
      if (AttChange != other.AttChange) return false;
      if (DefenChange != other.DefenChange) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackFlag != false) hash ^= AttackFlag.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (ResultTrophy != 0) hash ^= ResultTrophy.GetHashCode();
      hash ^= colList_.GetHashCode();
      hash ^= coordList_.GetHashCode();
      if (WinFlag != false) hash ^= WinFlag.GetHashCode();
      if (ProtectTime != 0UL) hash ^= ProtectTime.GetHashCode();
      if (LastTrophy != 0) hash ^= LastTrophy.GetHashCode();
      if (playerData_ != null) hash ^= PlayerData.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (AIFlag != false) hash ^= AIFlag.GetHashCode();
      if (armyData_ != null) hash ^= ArmyData.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (AttTrophy != 0) hash ^= AttTrophy.GetHashCode();
      if (DefenTrophy != 0) hash ^= DefenTrophy.GetHashCode();
      if (AttChange != 0) hash ^= AttChange.GetHashCode();
      if (DefenChange != 0) hash ^= DefenChange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackFlag != false) {
        output.WriteRawTag(8);
        output.WriteBool(AttackFlag);
      }
      if (UserId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UserId);
      }
      if (ResultTrophy != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ResultTrophy);
      }
      colList_.WriteTo(output, _repeated_colList_codec);
      coordList_.WriteTo(output, _repeated_coordList_codec);
      if (WinFlag != false) {
        output.WriteRawTag(48);
        output.WriteBool(WinFlag);
      }
      if (ProtectTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ProtectTime);
      }
      if (LastTrophy != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(LastTrophy);
      }
      if (playerData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(PlayerData);
      }
      if (StartTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(StartTime);
      }
      if (AIFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(AIFlag);
      }
      if (armyData_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ArmyData);
      }
      if (Level != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(Level);
      }
      if (AttTrophy != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(AttTrophy);
      }
      if (DefenTrophy != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(DefenTrophy);
      }
      if (AttChange != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AttChange);
      }
      if (DefenChange != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(DefenChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackFlag != false) {
        size += 1 + 1;
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (ResultTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ResultTrophy);
      }
      size += colList_.CalculateSize(_repeated_colList_codec);
      size += coordList_.CalculateSize(_repeated_coordList_codec);
      if (WinFlag != false) {
        size += 1 + 1;
      }
      if (ProtectTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProtectTime);
      }
      if (LastTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastTrophy);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (AIFlag != false) {
        size += 1 + 1;
      }
      if (armyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyData);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (AttTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttTrophy);
      }
      if (DefenTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefenTrophy);
      }
      if (AttChange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttChange);
      }
      if (DefenChange != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefenChange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_change_info other) {
      if (other == null) {
        return;
      }
      if (other.AttackFlag != false) {
        AttackFlag = other.AttackFlag;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.ResultTrophy != 0) {
        ResultTrophy = other.ResultTrophy;
      }
      colList_.Add(other.colList_);
      coordList_.Add(other.coordList_);
      if (other.WinFlag != false) {
        WinFlag = other.WinFlag;
      }
      if (other.ProtectTime != 0UL) {
        ProtectTime = other.ProtectTime;
      }
      if (other.LastTrophy != 0) {
        LastTrophy = other.LastTrophy;
      }
      if (other.playerData_ != null) {
        if (playerData_ == null) {
          playerData_ = new global::GameProto.Player_data();
        }
        PlayerData.MergeFrom(other.PlayerData);
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.AIFlag != false) {
        AIFlag = other.AIFlag;
      }
      if (other.armyData_ != null) {
        if (armyData_ == null) {
          armyData_ = new global::GameProto.Plunder_army_data();
        }
        ArmyData.MergeFrom(other.ArmyData);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.AttTrophy != 0) {
        AttTrophy = other.AttTrophy;
      }
      if (other.DefenTrophy != 0) {
        DefenTrophy = other.DefenTrophy;
      }
      if (other.AttChange != 0) {
        AttChange = other.AttChange;
      }
      if (other.DefenChange != 0) {
        DefenChange = other.DefenChange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackFlag = input.ReadBool();
            break;
          }
          case 16: {
            UserId = input.ReadUInt32();
            break;
          }
          case 24: {
            ResultTrophy = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            colList_.AddEntriesFrom(input, _repeated_colList_codec);
            break;
          }
          case 42: {
            coordList_.AddEntriesFrom(input, _repeated_coordList_codec);
            break;
          }
          case 48: {
            WinFlag = input.ReadBool();
            break;
          }
          case 56: {
            ProtectTime = input.ReadUInt64();
            break;
          }
          case 64: {
            LastTrophy = input.ReadUInt32();
            break;
          }
          case 74: {
            if (playerData_ == null) {
              playerData_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 80: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 88: {
            AIFlag = input.ReadBool();
            break;
          }
          case 98: {
            if (armyData_ == null) {
              armyData_ = new global::GameProto.Plunder_army_data();
            }
            input.ReadMessage(armyData_);
            break;
          }
          case 104: {
            Level = input.ReadUInt32();
            break;
          }
          case 112: {
            AttTrophy = input.ReadUInt32();
            break;
          }
          case 120: {
            DefenTrophy = input.ReadUInt32();
            break;
          }
          case 128: {
            AttChange = input.ReadInt32();
            break;
          }
          case 136: {
            DefenChange = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务端返回数据效验
  /// </summary>
  public sealed partial class Plunder_check_result : pb::IMessage<Plunder_check_result> {
    private static readonly pb::MessageParser<Plunder_check_result> _parser = new pb::MessageParser<Plunder_check_result>(() => new Plunder_check_result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_check_result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_check_result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_check_result(Plunder_check_result other) : this() {
      starLevel_ = other.starLevel_;
      MyRank = other.myRank_ != null ? other.MyRank.Clone() : null;
      EnemyRank = other.enemyRank_ != null ? other.EnemyRank.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_check_result Clone() {
      return new Plunder_check_result(this);
    }

    /// <summary>Field number for the "star_level" field.</summary>
    public const int StarLevelFieldNumber = 1;
    private uint starLevel_;
    /// <summary>
    ///掠夺结束的星级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StarLevel {
      get { return starLevel_; }
      set {
        starLevel_ = value;
      }
    }

    /// <summary>Field number for the "my_rank" field.</summary>
    public const int MyRankFieldNumber = 2;
    private global::GameProto.Plunder_rank_data myRank_;
    /// <summary>
    ///掠夺之后我的奖杯数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_rank_data MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    /// <summary>Field number for the "enemy_rank" field.</summary>
    public const int EnemyRankFieldNumber = 3;
    private global::GameProto.Plunder_rank_data enemyRank_;
    /// <summary>
    ///掠夺之后敌方的奖杯数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_rank_data EnemyRank {
      get { return enemyRank_; }
      set {
        enemyRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_check_result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_check_result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StarLevel != other.StarLevel) return false;
      if (!object.Equals(MyRank, other.MyRank)) return false;
      if (!object.Equals(EnemyRank, other.EnemyRank)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StarLevel != 0) hash ^= StarLevel.GetHashCode();
      if (myRank_ != null) hash ^= MyRank.GetHashCode();
      if (enemyRank_ != null) hash ^= EnemyRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StarLevel != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(StarLevel);
      }
      if (myRank_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MyRank);
      }
      if (enemyRank_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EnemyRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StarLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StarLevel);
      }
      if (myRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyRank);
      }
      if (enemyRank_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnemyRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_check_result other) {
      if (other == null) {
        return;
      }
      if (other.StarLevel != 0) {
        StarLevel = other.StarLevel;
      }
      if (other.myRank_ != null) {
        if (myRank_ == null) {
          myRank_ = new global::GameProto.Plunder_rank_data();
        }
        MyRank.MergeFrom(other.MyRank);
      }
      if (other.enemyRank_ != null) {
        if (enemyRank_ == null) {
          enemyRank_ = new global::GameProto.Plunder_rank_data();
        }
        EnemyRank.MergeFrom(other.EnemyRank);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StarLevel = input.ReadUInt32();
            break;
          }
          case 18: {
            if (myRank_ == null) {
              myRank_ = new global::GameProto.Plunder_rank_data();
            }
            input.ReadMessage(myRank_);
            break;
          }
          case 26: {
            if (enemyRank_ == null) {
              enemyRank_ = new global::GameProto.Plunder_rank_data();
            }
            input.ReadMessage(enemyRank_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///客户端请求删除被黑的地
  /// </summary>
  public sealed partial class Plunder_del_dark : pb::IMessage<Plunder_del_dark> {
    private static readonly pb::MessageParser<Plunder_del_dark> _parser = new pb::MessageParser<Plunder_del_dark>(() => new Plunder_del_dark());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_del_dark> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_del_dark() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_del_dark(Plunder_del_dark other) : this() {
      coordList_ = other.coordList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_del_dark Clone() {
      return new Plunder_del_dark(this);
    }

    /// <summary>Field number for the "coord_list" field.</summary>
    public const int CoordListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Coord> _repeated_coordList_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Coord.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Coord> coordList_ = new pbc::RepeatedField<global::GameProto.Coord>();
    /// <summary>
    ///删除被黑的地的合集
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Coord> CoordList {
      get { return coordList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_del_dark);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_del_dark other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!coordList_.Equals(other.coordList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= coordList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      coordList_.WriteTo(output, _repeated_coordList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += coordList_.CalculateSize(_repeated_coordList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_del_dark other) {
      if (other == null) {
        return;
      }
      coordList_.Add(other.coordList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            coordList_.AddEntriesFrom(input, _repeated_coordList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗结束后巨龙的属性 //当前没有用到
  /// </summary>
  public sealed partial class Plunder_monster_result : pb::IMessage<Plunder_monster_result> {
    private static readonly pb::MessageParser<Plunder_monster_result> _parser = new pb::MessageParser<Plunder_monster_result>(() => new Plunder_monster_result());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_monster_result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_monster_result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_monster_result(Plunder_monster_result other) : this() {
      typeId_ = other.typeId_;
      surFlag_ = other.surFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_monster_result Clone() {
      return new Plunder_monster_result(this);
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 1;
    private uint typeId_;
    /// <summary>
    ///巨龙的种类ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TypeId {
      get { return typeId_; }
      set {
        typeId_ = value;
      }
    }

    /// <summary>Field number for the "sur_flag" field.</summary>
    public const int SurFlagFieldNumber = 2;
    private bool surFlag_;
    /// <summary>
    ///巨龙的存活状态    true 存活, false 失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SurFlag {
      get { return surFlag_; }
      set {
        surFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_monster_result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_monster_result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeId != other.TypeId) return false;
      if (SurFlag != other.SurFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeId != 0) hash ^= TypeId.GetHashCode();
      if (SurFlag != false) hash ^= SurFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TypeId);
      }
      if (SurFlag != false) {
        output.WriteRawTag(16);
        output.WriteBool(SurFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TypeId);
      }
      if (SurFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_monster_result other) {
      if (other == null) {
        return;
      }
      if (other.TypeId != 0) {
        TypeId = other.TypeId;
      }
      if (other.SurFlag != false) {
        SurFlag = other.SurFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TypeId = input.ReadUInt32();
            break;
          }
          case 16: {
            SurFlag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///上线之后给用户的数据
  /// </summary>
  public sealed partial class Plunder_login_data : pb::IMessage<Plunder_login_data> {
    private static readonly pb::MessageParser<Plunder_login_data> _parser = new pb::MessageParser<Plunder_login_data>(() => new Plunder_login_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_login_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_login_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_login_data(Plunder_login_data other) : this() {
      defenList_ = other.defenList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_login_data Clone() {
      return new Plunder_login_data(this);
    }

    /// <summary>Field number for the "defen_list" field.</summary>
    public const int DefenListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Plunder_history> _repeated_defenList_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Plunder_history.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Plunder_history> defenList_ = new pbc::RepeatedField<global::GameProto.Plunder_history>();
    /// <summary>
    ///掠夺历史记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Plunder_history> DefenList {
      get { return defenList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_login_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_login_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!defenList_.Equals(other.defenList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= defenList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      defenList_.WriteTo(output, _repeated_defenList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += defenList_.CalculateSize(_repeated_defenList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_login_data other) {
      if (other == null) {
        return;
      }
      defenList_.Add(other.defenList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            defenList_.AddEntriesFrom(input, _repeated_defenList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商店操作行为
  /// </summary>
  public sealed partial class Shop_event : pb::IMessage<Shop_event> {
    private static readonly pb::MessageParser<Shop_event> _parser = new pb::MessageParser<Shop_event>(() => new Shop_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shop_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_event(Shop_event other) : this() {
      operate_ = other.operate_;
      objectList_ = other.objectList_.Clone();
      Data = other.data_ != null ? other.Data.Clone() : null;
      type_ = other.type_;
      levelIndex_ = other.levelIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_event Clone() {
      return new Shop_event(this);
    }

    /// <summary>Field number for the "operate" field.</summary>
    public const int OperateFieldNumber = 1;
    private global::GameProto.Shop_operate operate_ = 0;
    /// <summary>
    ///操作
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Shop_operate Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "object_list" field.</summary>
    public const int ObjectListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Shop_act_data> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Shop_act_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Shop_act_data> objectList_ = new pbc::RepeatedField<global::GameProto.Shop_act_data>();
    /// <summary>
    ///放置的物品数据 和 修改状态的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Shop_act_data> ObjectList {
      get { return objectList_; }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private global::GameProto.Shop_item_data data_;
    /// <summary>
    ///商品数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Shop_item_data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::GameProto.Shop_type type_ = 0;
    /// <summary>
    ///商店类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Shop_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level_index" field.</summary>
    public const int LevelIndexFieldNumber = 5;
    private uint levelIndex_;
    /// <summary>
    ///关卡的索引(第多少关, 只在购买关卡商店物品时有用)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LevelIndex {
      get { return levelIndex_; }
      set {
        levelIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shop_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shop_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operate != other.Operate) return false;
      if(!objectList_.Equals(other.objectList_)) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (Type != other.Type) return false;
      if (LevelIndex != other.LevelIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operate != 0) hash ^= Operate.GetHashCode();
      hash ^= objectList_.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (LevelIndex != 0) hash ^= LevelIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operate != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operate);
      }
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (LevelIndex != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(LevelIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operate);
      }
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (LevelIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LevelIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shop_event other) {
      if (other == null) {
        return;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      objectList_.Add(other.objectList_);
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Shop_item_data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.LevelIndex != 0) {
        LevelIndex = other.LevelIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            operate_ = (global::GameProto.Shop_operate) input.ReadEnum();
            break;
          }
          case 18: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::GameProto.Shop_item_data();
            }
            input.ReadMessage(data_);
            break;
          }
          case 32: {
            type_ = (global::GameProto.Shop_type) input.ReadEnum();
            break;
          }
          case 40: {
            LevelIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商店需要操作的数据
  /// </summary>
  public sealed partial class Shop_act_data : pb::IMessage<Shop_act_data> {
    private static readonly pb::MessageParser<Shop_act_data> _parser = new pb::MessageParser<Shop_act_data>(() => new Shop_act_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shop_act_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_act_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_act_data(Shop_act_data other) : this() {
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      Entity = other.entity_ != null ? other.Entity.Clone() : null;
      floatingFlag_ = other.floatingFlag_;
      ItemData = other.itemData_ != null ? other.ItemData.Clone() : null;
      Monster = other.monster_ != null ? other.Monster.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_act_data Clone() {
      return new Shop_act_data(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private global::GameProto.Coord coord_;
    /// <summary>
    ///奖励物品保存的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 2;
    private global::GameProto.Map_object_data entity_;
    /// <summary>
    ///物品属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "floating_flag" field.</summary>
    public const int FloatingFlagFieldNumber = 3;
    private bool floatingFlag_;
    /// <summary>
    ///战利品球flag
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FloatingFlag {
      get { return floatingFlag_; }
      set {
        floatingFlag_ = value;
      }
    }

    /// <summary>Field number for the "item_data" field.</summary>
    public const int ItemDataFieldNumber = 4;
    private global::GameProto.Shop_item_data itemData_;
    /// <summary>
    ///创建限时订单, 和解锁商品时有用.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Shop_item_data ItemData {
      get { return itemData_; }
      set {
        itemData_ = value;
      }
    }

    /// <summary>Field number for the "monster" field.</summary>
    public const int MonsterFieldNumber = 5;
    private global::GameProto.Monster_data monster_;
    /// <summary>
    ///商店购买龙的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_data Monster {
      get { return monster_; }
      set {
        monster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shop_act_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shop_act_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coord, other.Coord)) return false;
      if (!object.Equals(Entity, other.Entity)) return false;
      if (FloatingFlag != other.FloatingFlag) return false;
      if (!object.Equals(ItemData, other.ItemData)) return false;
      if (!object.Equals(Monster, other.Monster)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (FloatingFlag != false) hash ^= FloatingFlag.GetHashCode();
      if (itemData_ != null) hash ^= ItemData.GetHashCode();
      if (monster_ != null) hash ^= Monster.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coord);
      }
      if (entity_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Entity);
      }
      if (FloatingFlag != false) {
        output.WriteRawTag(24);
        output.WriteBool(FloatingFlag);
      }
      if (itemData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ItemData);
      }
      if (monster_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Monster);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (FloatingFlag != false) {
        size += 1 + 1;
      }
      if (itemData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ItemData);
      }
      if (monster_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Monster);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shop_act_data other) {
      if (other == null) {
        return;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          entity_ = new global::GameProto.Map_object_data();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.FloatingFlag != false) {
        FloatingFlag = other.FloatingFlag;
      }
      if (other.itemData_ != null) {
        if (itemData_ == null) {
          itemData_ = new global::GameProto.Shop_item_data();
        }
        ItemData.MergeFrom(other.ItemData);
      }
      if (other.monster_ != null) {
        if (monster_ == null) {
          monster_ = new global::GameProto.Monster_data();
        }
        Monster.MergeFrom(other.Monster);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 18: {
            if (entity_ == null) {
              entity_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(entity_);
            break;
          }
          case 24: {
            FloatingFlag = input.ReadBool();
            break;
          }
          case 34: {
            if (itemData_ == null) {
              itemData_ = new global::GameProto.Shop_item_data();
            }
            input.ReadMessage(itemData_);
            break;
          }
          case 42: {
            if (monster_ == null) {
              monster_ = new global::GameProto.Monster_data();
            }
            input.ReadMessage(monster_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///充值的协议, 返回通用返回1 只返回成功或者失败
  ///后边还有什么东西再往里边加
  /// </summary>
  public sealed partial class Purchase_event : pb::IMessage<Purchase_event> {
    private static readonly pb::MessageParser<Purchase_event> _parser = new pb::MessageParser<Purchase_event>(() => new Purchase_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Purchase_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase_event(Purchase_event other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase_event Clone() {
      return new Purchase_event(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///充值的Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Purchase_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Purchase_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Purchase_event other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Purchase_response : pb::IMessage<Purchase_response> {
    private static readonly pb::MessageParser<Purchase_response> _parser = new pb::MessageParser<Purchase_response>(() => new Purchase_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Purchase_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase_response(Purchase_response other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Purchase_response Clone() {
      return new Purchase_response(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///返回的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///返回的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Purchase_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Purchase_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Purchase_response other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Game_common_response_list : pb::IMessage<Game_common_response_list> {
    private static readonly pb::MessageParser<Game_common_response_list> _parser = new pb::MessageParser<Game_common_response_list>(() => new Game_common_response_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Game_common_response_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_common_response_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_common_response_list(Game_common_response_list other) : this() {
      statusList_ = other.statusList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_common_response_list Clone() {
      return new Game_common_response_list(this);
    }

    /// <summary>Field number for the "status_list" field.</summary>
    public const int StatusListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Game_common_status> _repeated_statusList_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::GameProto.Game_common_status) x);
    private readonly pbc::RepeatedField<global::GameProto.Game_common_status> statusList_ = new pbc::RepeatedField<global::GameProto.Game_common_status>();
    /// <summary>
    ///返回的状态列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Game_common_status> StatusList {
      get { return statusList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Game_common_response_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Game_common_response_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!statusList_.Equals(other.statusList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= statusList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      statusList_.WriteTo(output, _repeated_statusList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += statusList_.CalculateSize(_repeated_statusList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Game_common_response_list other) {
      if (other == null) {
        return;
      }
      statusList_.Add(other.statusList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            statusList_.AddEntriesFrom(input, _repeated_statusList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Buy_plunder_time : pb::IMessage<Buy_plunder_time> {
    private static readonly pb::MessageParser<Buy_plunder_time> _parser = new pb::MessageParser<Buy_plunder_time>(() => new Buy_plunder_time());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Buy_plunder_time> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buy_plunder_time() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buy_plunder_time(Buy_plunder_time other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buy_plunder_time Clone() {
      return new Buy_plunder_time(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///购买保护时间的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Buy_plunder_time);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Buy_plunder_time other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Buy_plunder_time other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Avatar_event : pb::IMessage<Avatar_event> {
    private static readonly pb::MessageParser<Avatar_event> _parser = new pb::MessageParser<Avatar_event>(() => new Avatar_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Avatar_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_event(Avatar_event other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_event Clone() {
      return new Avatar_event(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Avatar_request> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Avatar_request.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Avatar_request> list_ = new pbc::RepeatedField<global::GameProto.Avatar_request>();
    /// <summary>
    ///头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Avatar_request> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Avatar_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Avatar_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Avatar_event other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Avatar_request : pb::IMessage<Avatar_request> {
    private static readonly pb::MessageParser<Avatar_request> _parser = new pb::MessageParser<Avatar_request>(() => new Avatar_request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Avatar_request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_request(Avatar_request other) : this() {
      type_ = other.type_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_request Clone() {
      return new Avatar_request(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.ICON_TYPE type_ = 0;
    /// <summary>
    ///头像还是头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ICON_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::GameProto.Icon_data data_;
    /// <summary>
    ///修改的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Icon_data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Avatar_request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Avatar_request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Avatar_request other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Icon_data();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.ICON_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::GameProto.Icon_data();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新物资事件
  /// </summary>
  public sealed partial class Update_material_event : pb::IMessage<Update_material_event> {
    private static readonly pb::MessageParser<Update_material_event> _parser = new pb::MessageParser<Update_material_event>(() => new Update_material_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_material_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_material_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_material_event(Update_material_event other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_material_event Clone() {
      return new Update_material_event(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Update_material> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Update_material.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Update_material> list_ = new pbc::RepeatedField<global::GameProto.Update_material>();
    /// <summary>
    ///更新的物资
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Update_material> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_material_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_material_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_material_event other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Update_material : pb::IMessage<Update_material> {
    private static readonly pb::MessageParser<Update_material> _parser = new pb::MessageParser<Update_material>(() => new Update_material());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_material(Update_material other) : this() {
      count_ = other.count_;
      dataType_ = other.dataType_;
      actType_ = other.actType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_material Clone() {
      return new Update_material(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    /// <summary>
    ///大小(+表示增加-表示扣除)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "data_type" field.</summary>
    public const int DataTypeFieldNumber = 2;
    private global::GameProto.MATERIAL_TYPE dataType_ = 0;
    /// <summary>
    ///要操作的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.MATERIAL_TYPE DataType {
      get { return dataType_; }
      set {
        dataType_ = value;
      }
    }

    /// <summary>Field number for the "act_type" field.</summary>
    public const int ActTypeFieldNumber = 3;
    private global::GameProto.AFFECT_MATERIAL_TYPE actType_ = 0;
    /// <summary>
    ///来源类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.AFFECT_MATERIAL_TYPE ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if (DataType != other.DataType) return false;
      if (ActType != other.ActType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      if (DataType != 0) hash ^= DataType.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
      if (DataType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) DataType);
      }
      if (ActType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ActType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (DataType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
      }
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_material other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.DataType != 0) {
        DataType = other.DataType;
      }
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
          case 16: {
            dataType_ = (global::GameProto.MATERIAL_TYPE) input.ReadEnum();
            break;
          }
          case 24: {
            actType_ = (global::GameProto.AFFECT_MATERIAL_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rank_Data : pb::IMessage<Rank_Data> {
    private static readonly pb::MessageParser<Rank_Data> _parser = new pb::MessageParser<Rank_Data>(() => new Rank_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rank_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_Data(Rank_Data other) : this() {
      type_ = other.type_;
      info_ = other.info_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_Data Clone() {
      return new Rank_Data(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.RANK_TYPE type_ = 0;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.RANK_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Rank_Info> _repeated_info_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Rank_Info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Rank_Info> info_ = new pbc::RepeatedField<global::GameProto.Rank_Info>();
    /// <summary>
    ///排行榜信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Rank_Info> Info {
      get { return info_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rank_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rank_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!info_.Equals(other.info_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= info_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      info_.WriteTo(output, _repeated_info_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += info_.CalculateSize(_repeated_info_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rank_Data other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      info_.Add(other.info_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.RANK_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            info_.AddEntriesFrom(input, _repeated_info_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rank_Info : pb::IMessage<Rank_Info> {
    private static readonly pb::MessageParser<Rank_Info> _parser = new pb::MessageParser<Rank_Info>(() => new Rank_Info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rank_Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_Info(Rank_Info other) : this() {
      userId_ = other.userId_;
      PlayerData = other.playerData_ != null ? other.PlayerData.Clone() : null;
      allncIcon_ = other.allncIcon_;
      allncName_ = other.allncName_;
      allncId_ = other.allncId_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_Info Clone() {
      return new Rank_Info(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///用户Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "player_data" field.</summary>
    public const int PlayerDataFieldNumber = 2;
    private global::GameProto.Player_data playerData_;
    /// <summary>
    ///用户基础信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    /// <summary>Field number for the "allnc_icon" field.</summary>
    public const int AllncIconFieldNumber = 3;
    private uint allncIcon_;
    /// <summary>
    ///联盟Icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllncIcon {
      get { return allncIcon_; }
      set {
        allncIcon_ = value;
      }
    }

    /// <summary>Field number for the "allnc_name" field.</summary>
    public const int AllncNameFieldNumber = 4;
    private string allncName_ = "";
    /// <summary>
    ///联盟名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllncName {
      get { return allncName_; }
      set {
        allncName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allnc_id" field.</summary>
    public const int AllncIdFieldNumber = 5;
    private uint allncId_;
    /// <summary>
    ///联盟头像
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllncId {
      get { return allncId_; }
      set {
        allncId_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 6;
    private uint score_;
    /// <summary>
    ///得分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rank_Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rank_Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(PlayerData, other.PlayerData)) return false;
      if (AllncIcon != other.AllncIcon) return false;
      if (AllncName != other.AllncName) return false;
      if (AllncId != other.AllncId) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (playerData_ != null) hash ^= PlayerData.GetHashCode();
      if (AllncIcon != 0) hash ^= AllncIcon.GetHashCode();
      if (AllncName.Length != 0) hash ^= AllncName.GetHashCode();
      if (AllncId != 0) hash ^= AllncId.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (playerData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerData);
      }
      if (AllncIcon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AllncIcon);
      }
      if (AllncName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AllncName);
      }
      if (AllncId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AllncId);
      }
      if (Score != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      if (AllncIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllncIcon);
      }
      if (AllncName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllncName);
      }
      if (AllncId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllncId);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rank_Info other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.playerData_ != null) {
        if (playerData_ == null) {
          playerData_ = new global::GameProto.Player_data();
        }
        PlayerData.MergeFrom(other.PlayerData);
      }
      if (other.AllncIcon != 0) {
        AllncIcon = other.AllncIcon;
      }
      if (other.AllncName.Length != 0) {
        AllncName = other.AllncName;
      }
      if (other.AllncId != 0) {
        AllncId = other.AllncId;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (playerData_ == null) {
              playerData_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 24: {
            AllncIcon = input.ReadUInt32();
            break;
          }
          case 34: {
            AllncName = input.ReadString();
            break;
          }
          case 40: {
            AllncId = input.ReadUInt32();
            break;
          }
          case 48: {
            Score = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rank_event : pb::IMessage<Rank_event> {
    private static readonly pb::MessageParser<Rank_event> _parser = new pb::MessageParser<Rank_event>(() => new Rank_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rank_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_event(Rank_event other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_event Clone() {
      return new Rank_event(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.RANK_TYPE type_ = 0;
    /// <summary>
    ///请求类型(这里要注意一定不能发0, 不然就是一个空包!)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.RANK_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rank_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rank_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rank_event other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.RANK_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Rank_response : pb::IMessage<Rank_response> {
    private static readonly pb::MessageParser<Rank_response> _parser = new pb::MessageParser<Rank_response>(() => new Rank_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Rank_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_response(Rank_response other) : this() {
      status_ = other.status_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      MyInfo = other.myInfo_ != null ? other.MyInfo.Clone() : null;
      myRank_ = other.myRank_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Rank_response Clone() {
      return new Rank_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::GameProto.Rank_Data data_;
    /// <summary>
    ///返回的排行榜数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Rank_Data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "my_info" field.</summary>
    public const int MyInfoFieldNumber = 3;
    private global::GameProto.Rank_Info myInfo_;
    /// <summary>
    ///请求用户的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Rank_Info MyInfo {
      get { return myInfo_; }
      set {
        myInfo_ = value;
      }
    }

    /// <summary>Field number for the "my_rank" field.</summary>
    public const int MyRankFieldNumber = 4;
    private int myRank_;
    /// <summary>
    ///我的排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MyRank {
      get { return myRank_; }
      set {
        myRank_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Rank_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Rank_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if (!object.Equals(MyInfo, other.MyInfo)) return false;
      if (MyRank != other.MyRank) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (myInfo_ != null) hash ^= MyInfo.GetHashCode();
      if (MyRank != 0) hash ^= MyRank.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (myInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MyInfo);
      }
      if (MyRank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MyRank);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (myInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MyInfo);
      }
      if (MyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MyRank);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Rank_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Rank_Data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.myInfo_ != null) {
        if (myInfo_ == null) {
          myInfo_ = new global::GameProto.Rank_Info();
        }
        MyInfo.MergeFrom(other.MyInfo);
      }
      if (other.MyRank != 0) {
        MyRank = other.MyRank;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::GameProto.Rank_Data();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            if (myInfo_ == null) {
              myInfo_ = new global::GameProto.Rank_Info();
            }
            input.ReadMessage(myInfo_);
            break;
          }
          case 32: {
            MyRank = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///掠夺排行单个赛季的数据
  /// </summary>
  public sealed partial class Plunder_rank : pb::IMessage<Plunder_rank> {
    private static readonly pb::MessageParser<Plunder_rank> _parser = new pb::MessageParser<Plunder_rank>(() => new Plunder_rank());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_rank> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank(Plunder_rank other) : this() {
      status_ = other.status_;
      rankTime_ = other.rankTime_;
      rewardList_ = other.rewardList_.Clone();
      infoList_ = other.infoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank Clone() {
      return new Plunder_rank(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.PLUNDER_RANK_STATUS status_ = 0;
    /// <summary>
    ///赛季开始状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.PLUNDER_RANK_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "rank_time" field.</summary>
    public const int RankTimeFieldNumber = 2;
    private ulong rankTime_;
    /// <summary>
    ///赛季时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RankTime {
      get { return rankTime_; }
      set {
        rankTime_ = value;
      }
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Plunder_rank_reward> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Plunder_rank_reward.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Plunder_rank_reward> rewardList_ = new pbc::RepeatedField<global::GameProto.Plunder_rank_reward>();
    /// <summary>
    ///赛季奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Plunder_rank_reward> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "info_list" field.</summary>
    public const int InfoListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Rank_Info> _repeated_infoList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Rank_Info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Rank_Info> infoList_ = new pbc::RepeatedField<global::GameProto.Rank_Info>();
    /// <summary>
    ///掠夺上赛季前三名玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Rank_Info> InfoList {
      get { return infoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_rank);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_rank other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (RankTime != other.RankTime) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if(!infoList_.Equals(other.infoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (RankTime != 0UL) hash ^= RankTime.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      hash ^= infoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (RankTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RankTime);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      infoList_.WriteTo(output, _repeated_infoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (RankTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RankTime);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      size += infoList_.CalculateSize(_repeated_infoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_rank other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.RankTime != 0UL) {
        RankTime = other.RankTime;
      }
      rewardList_.Add(other.rewardList_);
      infoList_.Add(other.infoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.PLUNDER_RANK_STATUS) input.ReadEnum();
            break;
          }
          case 16: {
            RankTime = input.ReadUInt64();
            break;
          }
          case 26: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 34: {
            infoList_.AddEntriesFrom(input, _repeated_infoList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///掠夺排行赛季排名奖励
  /// </summary>
  public sealed partial class Plunder_rank_reward : pb::IMessage<Plunder_rank_reward> {
    private static readonly pb::MessageParser<Plunder_rank_reward> _parser = new pb::MessageParser<Plunder_rank_reward>(() => new Plunder_rank_reward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_rank_reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_reward(Plunder_rank_reward other) : this() {
      rewardId_ = other.rewardId_;
      dataList_ = other.dataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_reward Clone() {
      return new Plunder_rank_reward(this);
    }

    /// <summary>Field number for the "reward_id" field.</summary>
    public const int RewardIdFieldNumber = 1;
    private uint rewardId_;
    /// <summary>
    ///排行奖励编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RewardId {
      get { return rewardId_; }
      set {
        rewardId_ = value;
      }
    }

    /// <summary>Field number for the "data_list" field.</summary>
    public const int DataListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_dataList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> dataList_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///物品奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> DataList {
      get { return dataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_rank_reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_rank_reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RewardId != other.RewardId) return false;
      if(!dataList_.Equals(other.dataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RewardId != 0) hash ^= RewardId.GetHashCode();
      hash ^= dataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RewardId);
      }
      dataList_.WriteTo(output, _repeated_dataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RewardId);
      }
      size += dataList_.CalculateSize(_repeated_dataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_rank_reward other) {
      if (other == null) {
        return;
      }
      if (other.RewardId != 0) {
        RewardId = other.RewardId;
      }
      dataList_.Add(other.dataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RewardId = input.ReadUInt32();
            break;
          }
          case 18: {
            dataList_.AddEntriesFrom(input, _repeated_dataList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复掠夺周赛日赛数据
  /// </summary>
  public sealed partial class Plunder_rank_response : pb::IMessage<Plunder_rank_response> {
    private static readonly pb::MessageParser<Plunder_rank_response> _parser = new pb::MessageParser<Plunder_rank_response>(() => new Plunder_rank_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_rank_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_response(Plunder_rank_response other) : this() {
      Week = other.week_ != null ? other.Week.Clone() : null;
      Day = other.day_ != null ? other.Day.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_response Clone() {
      return new Plunder_rank_response(this);
    }

    /// <summary>Field number for the "week" field.</summary>
    public const int WeekFieldNumber = 1;
    private global::GameProto.Plunder_rank week_;
    /// <summary>
    ///周赛季初始数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_rank Week {
      get { return week_; }
      set {
        week_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 2;
    private global::GameProto.Plunder_rank day_;
    /// <summary>
    ///日赛季初始数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_rank Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_rank_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_rank_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Week, other.Week)) return false;
      if (!object.Equals(Day, other.Day)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (week_ != null) hash ^= Week.GetHashCode();
      if (day_ != null) hash ^= Day.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (week_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Week);
      }
      if (day_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Day);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (week_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Week);
      }
      if (day_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Day);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_rank_response other) {
      if (other == null) {
        return;
      }
      if (other.week_ != null) {
        if (week_ == null) {
          week_ = new global::GameProto.Plunder_rank();
        }
        Week.MergeFrom(other.Week);
      }
      if (other.day_ != null) {
        if (day_ == null) {
          day_ = new global::GameProto.Plunder_rank();
        }
        Day.MergeFrom(other.Day);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (week_ == null) {
              week_ = new global::GameProto.Plunder_rank();
            }
            input.ReadMessage(week_);
            break;
          }
          case 18: {
            if (day_ == null) {
              day_ = new global::GameProto.Plunder_rank();
            }
            input.ReadMessage(day_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告数据请求协议
  /// </summary>
  public sealed partial class Notice_data_event : pb::IMessage<Notice_data_event> {
    private static readonly pb::MessageParser<Notice_data_event> _parser = new pb::MessageParser<Notice_data_event>(() => new Notice_data_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notice_data_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_event(Notice_data_event other) : this() {
      language_ = other.language_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_event Clone() {
      return new Notice_data_event(this);
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 1;
    private string language_ = "";
    /// <summary>
    ///语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notice_data_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notice_data_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Language != other.Language) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Language.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Language);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notice_data_event other) {
      if (other == null) {
        return;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Language = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复客户端请求公告
  /// </summary>
  public sealed partial class Notice_data_response : pb::IMessage<Notice_data_response> {
    private static readonly pb::MessageParser<Notice_data_response> _parser = new pb::MessageParser<Notice_data_response>(() => new Notice_data_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notice_data_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_response(Notice_data_response other) : this() {
      status_ = other.status_;
      List = other.list_ != null ? other.List.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_response Clone() {
      return new Notice_data_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private global::GameProto.Notice_list list_;
    /// <summary>
    ///公告列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Notice_list List {
      get { return list_; }
      set {
        list_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notice_data_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notice_data_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(List, other.List)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (list_ != null) hash ^= List.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (list_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(List);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (list_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(List);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notice_data_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.list_ != null) {
        if (list_ == null) {
          list_ = new global::GameProto.Notice_list();
        }
        List.MergeFrom(other.List);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (list_ == null) {
              list_ = new global::GameProto.Notice_list();
            }
            input.ReadMessage(list_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复请求邮件
  /// </summary>
  public sealed partial class Get_mail_list_response : pb::IMessage<Get_mail_list_response> {
    private static readonly pb::MessageParser<Get_mail_list_response> _parser = new pb::MessageParser<Get_mail_list_response>(() => new Get_mail_list_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get_mail_list_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_mail_list_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_mail_list_response(Get_mail_list_response other) : this() {
      status_ = other.status_;
      List = other.list_ != null ? other.List.Clone() : null;
      monthRecord_ = other.monthRecord_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_mail_list_response Clone() {
      return new Get_mail_list_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private global::GameProto.Mail_data_list list_;
    /// <summary>
    ///所有邮件的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_data_list List {
      get { return list_; }
      set {
        list_ = value;
      }
    }

    /// <summary>Field number for the "month_record" field.</summary>
    public const int MonthRecordFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Month_mail_record> _repeated_monthRecord_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Month_mail_record.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Month_mail_record> monthRecord_ = new pbc::RepeatedField<global::GameProto.Month_mail_record>();
    /// <summary>
    ///月卡记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Month_mail_record> MonthRecord {
      get { return monthRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get_mail_list_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get_mail_list_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(List, other.List)) return false;
      if(!monthRecord_.Equals(other.monthRecord_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (list_ != null) hash ^= List.GetHashCode();
      hash ^= monthRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (list_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(List);
      }
      monthRecord_.WriteTo(output, _repeated_monthRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (list_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(List);
      }
      size += monthRecord_.CalculateSize(_repeated_monthRecord_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get_mail_list_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.list_ != null) {
        if (list_ == null) {
          list_ = new global::GameProto.Mail_data_list();
        }
        List.MergeFrom(other.List);
      }
      monthRecord_.Add(other.monthRecord_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (list_ == null) {
              list_ = new global::GameProto.Mail_data_list();
            }
            input.ReadMessage(list_);
            break;
          }
          case 26: {
            monthRecord_.AddEntriesFrom(input, _repeated_monthRecord_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新状态为已读
  /// </summary>
  public sealed partial class Update_status_read_event : pb::IMessage<Update_status_read_event> {
    private static readonly pb::MessageParser<Update_status_read_event> _parser = new pb::MessageParser<Update_status_read_event>(() => new Update_status_read_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_status_read_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_status_read_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_status_read_event(Update_status_read_event other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_status_read_event Clone() {
      return new Update_status_read_event(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Mail_identity identity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_identity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_status_read_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_status_read_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_status_read_event other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Mail_identity();
        }
        Identity.MergeFrom(other.Identity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Mail_identity();
            }
            input.ReadMessage(identity_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///更新状态为未领取
  /// </summary>
  public sealed partial class Update_status_not_received_event : pb::IMessage<Update_status_not_received_event> {
    private static readonly pb::MessageParser<Update_status_not_received_event> _parser = new pb::MessageParser<Update_status_not_received_event>(() => new Update_status_not_received_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Update_status_not_received_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_status_not_received_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_status_not_received_event(Update_status_not_received_event other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Update_status_not_received_event Clone() {
      return new Update_status_not_received_event(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Mail_identity identity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_identity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Update_status_not_received_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Update_status_not_received_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Update_status_not_received_event other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Mail_identity();
        }
        Identity.MergeFrom(other.Identity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Mail_identity();
            }
            input.ReadMessage(identity_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求领取奖励
  /// </summary>
  public sealed partial class Received_mail_event : pb::IMessage<Received_mail_event> {
    private static readonly pb::MessageParser<Received_mail_event> _parser = new pb::MessageParser<Received_mail_event>(() => new Received_mail_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Received_mail_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_mail_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_mail_event(Received_mail_event other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_mail_event Clone() {
      return new Received_mail_event(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Mail_identity identity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_identity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Received_mail_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Received_mail_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Received_mail_event other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Mail_identity();
        }
        Identity.MergeFrom(other.Identity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Mail_identity();
            }
            input.ReadMessage(identity_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复领取奖励
  /// </summary>
  public sealed partial class Received_mail_response : pb::IMessage<Received_mail_response> {
    private static readonly pb::MessageParser<Received_mail_response> _parser = new pb::MessageParser<Received_mail_response>(() => new Received_mail_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Received_mail_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_mail_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_mail_response(Received_mail_response other) : this() {
      status_ = other.status_;
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_mail_response Clone() {
      return new Received_mail_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> list_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///邮件附带物资
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Received_mail_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Received_mail_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Received_mail_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///删除
  /// </summary>
  public sealed partial class Delete_mail_event : pb::IMessage<Delete_mail_event> {
    private static readonly pb::MessageParser<Delete_mail_event> _parser = new pb::MessageParser<Delete_mail_event>(() => new Delete_mail_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Delete_mail_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete_mail_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete_mail_event(Delete_mail_event other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete_mail_event Clone() {
      return new Delete_mail_event(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Mail_identity identity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_identity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Delete_mail_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Delete_mail_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Delete_mail_event other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Mail_identity();
        }
        Identity.MergeFrom(other.Identity);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Mail_identity();
            }
            input.ReadMessage(identity_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复一键领取
  /// </summary>
  public sealed partial class Received_all_mail_response : pb::IMessage<Received_all_mail_response> {
    private static readonly pb::MessageParser<Received_all_mail_response> _parser = new pb::MessageParser<Received_all_mail_response>(() => new Received_all_mail_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Received_all_mail_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_all_mail_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_all_mail_response(Received_all_mail_response other) : this() {
      status_ = other.status_;
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Received_all_mail_response Clone() {
      return new Received_all_mail_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> list_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///邮件附带物资
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Received_all_mail_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Received_all_mail_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Received_all_mail_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///回复一键删除
  /// </summary>
  public sealed partial class Delete_all_mail_response : pb::IMessage<Delete_all_mail_response> {
    private static readonly pb::MessageParser<Delete_all_mail_response> _parser = new pb::MessageParser<Delete_all_mail_response>(() => new Delete_all_mail_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Delete_all_mail_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete_all_mail_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete_all_mail_response(Delete_all_mail_response other) : this() {
      status_ = other.status_;
      identityList_ = other.identityList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Delete_all_mail_response Clone() {
      return new Delete_all_mail_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "identity_list" field.</summary>
    public const int IdentityListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Mail_identity> _repeated_identityList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Mail_identity.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Mail_identity> identityList_ = new pbc::RepeatedField<global::GameProto.Mail_identity>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Mail_identity> IdentityList {
      get { return identityList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Delete_all_mail_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Delete_all_mail_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if(!identityList_.Equals(other.identityList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= identityList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      identityList_.WriteTo(output, _repeated_identityList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += identityList_.CalculateSize(_repeated_identityList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Delete_all_mail_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      identityList_.Add(other.identityList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            identityList_.AddEntriesFrom(input, _repeated_identityList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///VIP商店
  ///当购买Vip商店物品时发送该协议 （服务端需要验证数据的可靠性）
  /// </summary>
  public sealed partial class Buy_vip_shop_article_event : pb::IMessage<Buy_vip_shop_article_event> {
    private static readonly pb::MessageParser<Buy_vip_shop_article_event> _parser = new pb::MessageParser<Buy_vip_shop_article_event>(() => new Buy_vip_shop_article_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Buy_vip_shop_article_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buy_vip_shop_article_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buy_vip_shop_article_event(Buy_vip_shop_article_event other) : this() {
      index_ = other.index_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      monsterList_ = other.monsterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Buy_vip_shop_article_event Clone() {
      return new Buy_vip_shop_article_event(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private uint index_;
    /// <summary>
    ///Vip_shop_data的index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::GameProto.Map_object_data data_;
    /// <summary>
    ///产生的战利品球
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "monster_list" field.</summary>
    public const int MonsterListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Monster_data> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_data> monsterList_ = new pbc::RepeatedField<global::GameProto.Monster_data>();
    /// <summary>
    ///生成的龙宝宝数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_data> MonsterList {
      get { return monsterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Buy_vip_shop_article_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Buy_vip_shop_article_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Data, other.Data)) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Index);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Buy_vip_shop_article_event other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Map_object_data();
        }
        Data.MergeFrom(other.Data);
      }
      monsterList_.Add(other.monsterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadUInt32();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///当刷新VIP商店时发送改协议 (需要验证钻石的花费正确性，现在花费时固定的)
  /// </summary>
  public sealed partial class Refresh_vip_shop_event : pb::IMessage<Refresh_vip_shop_event> {
    private static readonly pb::MessageParser<Refresh_vip_shop_event> _parser = new pb::MessageParser<Refresh_vip_shop_event>(() => new Refresh_vip_shop_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Refresh_vip_shop_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Refresh_vip_shop_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Refresh_vip_shop_event(Refresh_vip_shop_event other) : this() {
      costMount_ = other.costMount_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Refresh_vip_shop_event Clone() {
      return new Refresh_vip_shop_event(this);
    }

    /// <summary>Field number for the "cost_mount" field.</summary>
    public const int CostMountFieldNumber = 1;
    private uint costMount_;
    /// <summary>
    ///花费的钻石数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostMount {
      get { return costMount_; }
      set {
        costMount_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::GameProto.Vip_shop_data data_;
    /// <summary>
    ///更新的新的商店数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Vip_shop_data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Refresh_vip_shop_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Refresh_vip_shop_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CostMount != other.CostMount) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CostMount != 0) hash ^= CostMount.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CostMount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CostMount);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CostMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostMount);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Refresh_vip_shop_event other) {
      if (other == null) {
        return;
      }
      if (other.CostMount != 0) {
        CostMount = other.CostMount;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Vip_shop_data();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CostMount = input.ReadUInt32();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::GameProto.Vip_shop_data();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///领取vip等级奖励
  /// </summary>
  public sealed partial class Receive_vip_reward_event : pb::IMessage<Receive_vip_reward_event> {
    private static readonly pb::MessageParser<Receive_vip_reward_event> _parser = new pb::MessageParser<Receive_vip_reward_event>(() => new Receive_vip_reward_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Receive_vip_reward_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Receive_vip_reward_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Receive_vip_reward_event(Receive_vip_reward_event other) : this() {
      addObject_ = other.addObject_.Clone();
      AddFloating = other.addFloating_ != null ? other.AddFloating.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Receive_vip_reward_event Clone() {
      return new Receive_vip_reward_event(this);
    }

    /// <summary>Field number for the "add_object" field.</summary>
    public const int AddObjectFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Add_object_info> _repeated_addObject_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Add_object_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Add_object_info> addObject_ = new pbc::RepeatedField<global::GameProto.Add_object_info>();
    /// <summary>
    ///在这些位置上添加物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Add_object_info> AddObject {
      get { return addObject_; }
    }

    /// <summary>Field number for the "add_floating" field.</summary>
    public const int AddFloatingFieldNumber = 2;
    private global::GameProto.Map_object_data addFloating_;
    /// <summary>
    ///添加的浮空物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data AddFloating {
      get { return addFloating_; }
      set {
        addFloating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Receive_vip_reward_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Receive_vip_reward_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addObject_.Equals(other.addObject_)) return false;
      if (!object.Equals(AddFloating, other.AddFloating)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addObject_.GetHashCode();
      if (addFloating_ != null) hash ^= AddFloating.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addObject_.WriteTo(output, _repeated_addObject_codec);
      if (addFloating_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AddFloating);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addObject_.CalculateSize(_repeated_addObject_codec);
      if (addFloating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddFloating);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Receive_vip_reward_event other) {
      if (other == null) {
        return;
      }
      addObject_.Add(other.addObject_);
      if (other.addFloating_ != null) {
        if (addFloating_ == null) {
          addFloating_ = new global::GameProto.Map_object_data();
        }
        AddFloating.MergeFrom(other.AddFloating);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addObject_.AddEntriesFrom(input, _repeated_addObject_codec);
            break;
          }
          case 18: {
            if (addFloating_ == null) {
              addFloating_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(addFloating_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取单个活动数据请求
  /// </summary>
  public sealed partial class Get_single_activity_data_event : pb::IMessage<Get_single_activity_data_event> {
    private static readonly pb::MessageParser<Get_single_activity_data_event> _parser = new pb::MessageParser<Get_single_activity_data_event>(() => new Get_single_activity_data_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get_single_activity_data_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_single_activity_data_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_single_activity_data_event(Get_single_activity_data_event other) : this() {
      onlyId_ = other.onlyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_single_activity_data_event Clone() {
      return new Get_single_activity_data_event(this);
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private uint onlyId_;
    /// <summary>
    ///活动的唯一标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get_single_activity_data_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get_single_activity_data_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get_single_activity_data_event other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取单个活动数据回复
  /// </summary>
  public sealed partial class Get_single_activity_data_response : pb::IMessage<Get_single_activity_data_response> {
    private static readonly pb::MessageParser<Get_single_activity_data_response> _parser = new pb::MessageParser<Get_single_activity_data_response>(() => new Get_single_activity_data_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get_single_activity_data_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_single_activity_data_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_single_activity_data_response(Get_single_activity_data_response other) : this() {
      Data = other.data_ != null ? other.Data.Clone() : null;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_single_activity_data_response Clone() {
      return new Get_single_activity_data_response(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private global::GameProto.Activity_base_data data_;
    /// <summary>
    ///单个活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Activity_base_data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get_single_activity_data_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get_single_activity_data_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Data, other.Data)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (data_ != null) hash ^= Data.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (data_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Data);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get_single_activity_data_response other) {
      if (other == null) {
        return;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Activity_base_data();
        }
        Data.MergeFrom(other.Data);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (data_ == null) {
              data_ = new global::GameProto.Activity_base_data();
            }
            input.ReadMessage(data_);
            break;
          }
          case 16: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取所有活动数据
  /// </summary>
  public sealed partial class Get_all_activity_data_response : pb::IMessage<Get_all_activity_data_response> {
    private static readonly pb::MessageParser<Get_all_activity_data_response> _parser = new pb::MessageParser<Get_all_activity_data_response>(() => new Get_all_activity_data_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Get_all_activity_data_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_all_activity_data_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_all_activity_data_response(Get_all_activity_data_response other) : this() {
      data_ = other.data_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Get_all_activity_data_response Clone() {
      return new Get_all_activity_data_response(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Activity_base_data> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Activity_base_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Activity_base_data> data_ = new pbc::RepeatedField<global::GameProto.Activity_base_data>();
    /// <summary>
    ///所有的活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Activity_base_data> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Get_all_activity_data_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Get_all_activity_data_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Get_all_activity_data_response other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 16: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///完成一个活动时发送该协议
  /// </summary>
  public sealed partial class Activity_data_update_event : pb::IMessage<Activity_data_update_event> {
    private static readonly pb::MessageParser<Activity_data_update_event> _parser = new pb::MessageParser<Activity_data_update_event>(() => new Activity_data_update_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_data_update_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_data_update_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_data_update_event(Activity_data_update_event other) : this() {
      onlyId_ = other.onlyId_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_data_update_event Clone() {
      return new Activity_data_update_event(this);
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private uint onlyId_;
    /// <summary>
    ///活动的唯一标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///完成该活动的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_data_update_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_data_update_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlyId);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_data_update_event other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///当领取活动奖励时发送该协议
  /// </summary>
  public sealed partial class Receive_activity_reward_event : pb::IMessage<Receive_activity_reward_event> {
    private static readonly pb::MessageParser<Receive_activity_reward_event> _parser = new pb::MessageParser<Receive_activity_reward_event>(() => new Receive_activity_reward_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Receive_activity_reward_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Receive_activity_reward_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Receive_activity_reward_event(Receive_activity_reward_event other) : this() {
      onlyId_ = other.onlyId_;
      AddFloating = other.addFloating_ != null ? other.AddFloating.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Receive_activity_reward_event Clone() {
      return new Receive_activity_reward_event(this);
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private uint onlyId_;
    /// <summary>
    ///活动的唯一标示
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "add_floating" field.</summary>
    public const int AddFloatingFieldNumber = 3;
    private global::GameProto.Map_object_data addFloating_;
    /// <summary>
    ///添加的浮空物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data AddFloating {
      get { return addFloating_; }
      set {
        addFloating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Receive_activity_reward_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Receive_activity_reward_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (!object.Equals(AddFloating, other.AddFloating)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (addFloating_ != null) hash ^= AddFloating.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlyId);
      }
      if (addFloating_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AddFloating);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (addFloating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddFloating);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Receive_activity_reward_event other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      if (other.addFloating_ != null) {
        if (addFloating_ == null) {
          addFloating_ = new global::GameProto.Map_object_data();
        }
        AddFloating.MergeFrom(other.AddFloating);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (addFloating_ == null) {
              addFloating_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(addFloating_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Act_activity_data_response : pb::IMessage<Act_activity_data_response> {
    private static readonly pb::MessageParser<Act_activity_data_response> _parser = new pb::MessageParser<Act_activity_data_response>(() => new Act_activity_data_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Act_activity_data_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_activity_data_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_activity_data_response(Act_activity_data_response other) : this() {
      type_ = other.type_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Act_activity_data_response Clone() {
      return new Act_activity_data_response(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.ACTIVITY_RESPONSE_TYPE type_ = 0;
    /// <summary>
    ///当前行为状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ACTIVITY_RESPONSE_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::GameProto.Activity_base_data data_;
    /// <summary>
    ///当前活动的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Activity_base_data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Act_activity_data_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Act_activity_data_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Act_activity_data_response other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Activity_base_data();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.ACTIVITY_RESPONSE_TYPE) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::GameProto.Activity_base_data();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----------------
  /// </summary>
  public sealed partial class Plunder_week_contorl : pb::IMessage<Plunder_week_contorl> {
    private static readonly pb::MessageParser<Plunder_week_contorl> _parser = new pb::MessageParser<Plunder_week_contorl>(() => new Plunder_week_contorl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_week_contorl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_week_contorl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_week_contorl(Plunder_week_contorl other) : this() {
      startTime_ = other.startTime_;
      stopTime_ = other.stopTime_;
      nextStartTime_ = other.nextStartTime_;
      nextStopTime_ = other.nextStopTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_week_contorl Clone() {
      return new Plunder_week_contorl(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private long startTime_;
    /// <summary>
    ///本次开始的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "stop_time" field.</summary>
    public const int StopTimeFieldNumber = 2;
    private long stopTime_;
    /// <summary>
    ///本次结束的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StopTime {
      get { return stopTime_; }
      set {
        stopTime_ = value;
      }
    }

    /// <summary>Field number for the "next_start_time" field.</summary>
    public const int NextStartTimeFieldNumber = 3;
    private long nextStartTime_;
    /// <summary>
    ///下一次开始的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextStartTime {
      get { return nextStartTime_; }
      set {
        nextStartTime_ = value;
      }
    }

    /// <summary>Field number for the "next_stop_time" field.</summary>
    public const int NextStopTimeFieldNumber = 4;
    private long nextStopTime_;
    /// <summary>
    ///下一次结束的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextStopTime {
      get { return nextStopTime_; }
      set {
        nextStopTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_week_contorl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_week_contorl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTime != other.StartTime) return false;
      if (StopTime != other.StopTime) return false;
      if (NextStartTime != other.NextStartTime) return false;
      if (NextStopTime != other.NextStopTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (StopTime != 0L) hash ^= StopTime.GetHashCode();
      if (NextStartTime != 0L) hash ^= NextStartTime.GetHashCode();
      if (NextStopTime != 0L) hash ^= NextStopTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTime);
      }
      if (StopTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StopTime);
      }
      if (NextStartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NextStartTime);
      }
      if (NextStopTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NextStopTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (StopTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StopTime);
      }
      if (NextStartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextStartTime);
      }
      if (NextStopTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextStopTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_week_contorl other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.StopTime != 0L) {
        StopTime = other.StopTime;
      }
      if (other.NextStartTime != 0L) {
        NextStartTime = other.NextStartTime;
      }
      if (other.NextStopTime != 0L) {
        NextStopTime = other.NextStopTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTime = input.ReadInt64();
            break;
          }
          case 16: {
            StopTime = input.ReadInt64();
            break;
          }
          case 24: {
            NextStartTime = input.ReadInt64();
            break;
          }
          case 32: {
            NextStopTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///获取所有的签到活动数据回复
  /// </summary>
  public sealed partial class Response_get_check_activity : pb::IMessage<Response_get_check_activity> {
    private static readonly pb::MessageParser<Response_get_check_activity> _parser = new pb::MessageParser<Response_get_check_activity>(() => new Response_get_check_activity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response_get_check_activity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_get_check_activity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_get_check_activity(Response_get_check_activity other) : this() {
      status_ = other.status_;
      NoviceWelfare = other.noviceWelfare_ != null ? other.NoviceWelfare.Clone() : null;
      DailyCheck = other.dailyCheck_ != null ? other.DailyCheck.Clone() : null;
      DailyCheckStage = other.dailyCheckStage_ != null ? other.DailyCheckStage.Clone() : null;
      DailyTimeStage = other.dailyTimeStage_ != null ? other.DailyTimeStage.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_get_check_activity Clone() {
      return new Response_get_check_activity(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///通用返回状态                 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "novice_welfare" field.</summary>
    public const int NoviceWelfareFieldNumber = 2;
    private global::GameProto.Novice_welfare_data noviceWelfare_;
    /// <summary>
    ///新手福利数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Novice_welfare_data NoviceWelfare {
      get { return noviceWelfare_; }
      set {
        noviceWelfare_ = value;
      }
    }

    /// <summary>Field number for the "daily_check" field.</summary>
    public const int DailyCheckFieldNumber = 3;
    private global::GameProto.Daily_check_data dailyCheck_;
    /// <summary>
    ///每日签到数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Daily_check_data DailyCheck {
      get { return dailyCheck_; }
      set {
        dailyCheck_ = value;
      }
    }

    /// <summary>Field number for the "daily_check_stage" field.</summary>
    public const int DailyCheckStageFieldNumber = 4;
    private global::GameProto.Daily_check_stage_data dailyCheckStage_;
    /// <summary>
    ///每日签到阶段性奖励数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Daily_check_stage_data DailyCheckStage {
      get { return dailyCheckStage_; }
      set {
        dailyCheckStage_ = value;
      }
    }

    /// <summary>Field number for the "daily_time_stage" field.</summary>
    public const int DailyTimeStageFieldNumber = 5;
    private global::GameProto.Daily_time_stage_data dailyTimeStage_;
    /// <summary>
    ///每日时间阶段奖励数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Daily_time_stage_data DailyTimeStage {
      get { return dailyTimeStage_; }
      set {
        dailyTimeStage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response_get_check_activity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response_get_check_activity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(NoviceWelfare, other.NoviceWelfare)) return false;
      if (!object.Equals(DailyCheck, other.DailyCheck)) return false;
      if (!object.Equals(DailyCheckStage, other.DailyCheckStage)) return false;
      if (!object.Equals(DailyTimeStage, other.DailyTimeStage)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (noviceWelfare_ != null) hash ^= NoviceWelfare.GetHashCode();
      if (dailyCheck_ != null) hash ^= DailyCheck.GetHashCode();
      if (dailyCheckStage_ != null) hash ^= DailyCheckStage.GetHashCode();
      if (dailyTimeStage_ != null) hash ^= DailyTimeStage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (noviceWelfare_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NoviceWelfare);
      }
      if (dailyCheck_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DailyCheck);
      }
      if (dailyCheckStage_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DailyCheckStage);
      }
      if (dailyTimeStage_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DailyTimeStage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (noviceWelfare_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NoviceWelfare);
      }
      if (dailyCheck_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyCheck);
      }
      if (dailyCheckStage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyCheckStage);
      }
      if (dailyTimeStage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyTimeStage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response_get_check_activity other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.noviceWelfare_ != null) {
        if (noviceWelfare_ == null) {
          noviceWelfare_ = new global::GameProto.Novice_welfare_data();
        }
        NoviceWelfare.MergeFrom(other.NoviceWelfare);
      }
      if (other.dailyCheck_ != null) {
        if (dailyCheck_ == null) {
          dailyCheck_ = new global::GameProto.Daily_check_data();
        }
        DailyCheck.MergeFrom(other.DailyCheck);
      }
      if (other.dailyCheckStage_ != null) {
        if (dailyCheckStage_ == null) {
          dailyCheckStage_ = new global::GameProto.Daily_check_stage_data();
        }
        DailyCheckStage.MergeFrom(other.DailyCheckStage);
      }
      if (other.dailyTimeStage_ != null) {
        if (dailyTimeStage_ == null) {
          dailyTimeStage_ = new global::GameProto.Daily_time_stage_data();
        }
        DailyTimeStage.MergeFrom(other.DailyTimeStage);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (noviceWelfare_ == null) {
              noviceWelfare_ = new global::GameProto.Novice_welfare_data();
            }
            input.ReadMessage(noviceWelfare_);
            break;
          }
          case 26: {
            if (dailyCheck_ == null) {
              dailyCheck_ = new global::GameProto.Daily_check_data();
            }
            input.ReadMessage(dailyCheck_);
            break;
          }
          case 34: {
            if (dailyCheckStage_ == null) {
              dailyCheckStage_ = new global::GameProto.Daily_check_stage_data();
            }
            input.ReadMessage(dailyCheckStage_);
            break;
          }
          case 42: {
            if (dailyTimeStage_ == null) {
              dailyTimeStage_ = new global::GameProto.Daily_time_stage_data();
            }
            input.ReadMessage(dailyTimeStage_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///请求签到活动奖励
  /// </summary>
  public sealed partial class Recive_check_reward_event : pb::IMessage<Recive_check_reward_event> {
    private static readonly pb::MessageParser<Recive_check_reward_event> _parser = new pb::MessageParser<Recive_check_reward_event>(() => new Recive_check_reward_event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Recive_check_reward_event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recive_check_reward_event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recive_check_reward_event(Recive_check_reward_event other) : this() {
      idList_ = other.idList_.Clone();
      AddFloating = other.addFloating_ != null ? other.AddFloating.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Recive_check_reward_event Clone() {
      return new Recive_check_reward_event(this);
    }

    /// <summary>Field number for the "id_list" field.</summary>
    public const int IdListFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_idList_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> idList_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///唯一ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> IdList {
      get { return idList_; }
    }

    /// <summary>Field number for the "add_floating" field.</summary>
    public const int AddFloatingFieldNumber = 2;
    private global::GameProto.Map_object_data addFloating_;
    /// <summary>
    ///往战利品球中添加的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data AddFloating {
      get { return addFloating_; }
      set {
        addFloating_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::GameProto.CHECK_REWARD_TYPE type_ = 0;
    /// <summary>
    ///奖励类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.CHECK_REWARD_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Recive_check_reward_event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Recive_check_reward_event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!idList_.Equals(other.idList_)) return false;
      if (!object.Equals(AddFloating, other.AddFloating)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= idList_.GetHashCode();
      if (addFloating_ != null) hash ^= AddFloating.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      idList_.WriteTo(output, _repeated_idList_codec);
      if (addFloating_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AddFloating);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += idList_.CalculateSize(_repeated_idList_codec);
      if (addFloating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddFloating);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Recive_check_reward_event other) {
      if (other == null) {
        return;
      }
      idList_.Add(other.idList_);
      if (other.addFloating_ != null) {
        if (addFloating_ == null) {
          addFloating_ = new global::GameProto.Map_object_data();
        }
        AddFloating.MergeFrom(other.AddFloating);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            idList_.AddEntriesFrom(input, _repeated_idList_codec);
            break;
          }
          case 18: {
            if (addFloating_ == null) {
              addFloating_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(addFloating_);
            break;
          }
          case 24: {
            type_ = (global::GameProto.CHECK_REWARD_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response_check_reward : pb::IMessage<Response_check_reward> {
    private static readonly pb::MessageParser<Response_check_reward> _parser = new pb::MessageParser<Response_check_reward>(() => new Response_check_reward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response_check_reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_check_reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_check_reward(Response_check_reward other) : this() {
      index_ = other.index_.Clone();
      timestamp_ = other.timestamp_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_check_reward Clone() {
      return new Response_check_reward(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_index_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> index_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///数据在容器中的索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Index {
      get { return index_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    ///下一次奖励领取时间戳（对每日时间阶段奖励有效）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///通用状态返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response_check_reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response_check_reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!index_.Equals(other.index_)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= index_.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      index_.WriteTo(output, _repeated_index_codec);
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += index_.CalculateSize(_repeated_index_codec);
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response_check_reward other) {
      if (other == null) {
        return;
      }
      index_.Add(other.index_);
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            index_.AddEntriesFrom(input, _repeated_index_codec);
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 24: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Server_inner_update_material : pb::IMessage<Server_inner_update_material> {
    private static readonly pb::MessageParser<Server_inner_update_material> _parser = new pb::MessageParser<Server_inner_update_material>(() => new Server_inner_update_material());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Server_inner_update_material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server_inner_update_material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server_inner_update_material(Server_inner_update_material other) : this() {
      list_ = other.list_.Clone();
      actType_ = other.actType_;
      Floating = other.floating_ != null ? other.Floating.Clone() : null;
      activityId_ = other.activityId_;
      vipExp_ = other.vipExp_;
      unlockId_ = other.unlockId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server_inner_update_material Clone() {
      return new Server_inner_update_material(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Update_material> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Update_material.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Update_material> list_ = new pbc::RepeatedField<global::GameProto.Update_material>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Update_material> List {
      get { return list_; }
    }

    /// <summary>Field number for the "act_type" field.</summary>
    public const int ActTypeFieldNumber = 2;
    private global::GameProto.AFFECT_MATERIAL_TYPE actType_ = 0;
    /// <summary>
    ///来源类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.AFFECT_MATERIAL_TYPE ActType {
      get { return actType_; }
      set {
        actType_ = value;
      }
    }

    /// <summary>Field number for the "floating" field.</summary>
    public const int FloatingFieldNumber = 3;
    private global::GameProto.Map_object_data floating_;
    /// <summary>
    ///浮空物体
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data Floating {
      get { return floating_; }
      set {
        floating_ = value;
      }
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 4;
    private uint activityId_;
    /// <summary>
    ///高端区id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "vip_exp" field.</summary>
    public const int VipExpFieldNumber = 5;
    private uint vipExp_;
    /// <summary>
    ///活动充值需要添加VIP经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VipExp {
      get { return vipExp_; }
      set {
        vipExp_ = value;
      }
    }

    /// <summary>Field number for the "unlock_id" field.</summary>
    public const int UnlockIdFieldNumber = 6;
    private uint unlockId_;
    /// <summary>
    ///高端区id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnlockId {
      get { return unlockId_; }
      set {
        unlockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Server_inner_update_material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Server_inner_update_material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if (ActType != other.ActType) return false;
      if (!object.Equals(Floating, other.Floating)) return false;
      if (ActivityId != other.ActivityId) return false;
      if (VipExp != other.VipExp) return false;
      if (UnlockId != other.UnlockId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (ActType != 0) hash ^= ActType.GetHashCode();
      if (floating_ != null) hash ^= Floating.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (VipExp != 0) hash ^= VipExp.GetHashCode();
      if (UnlockId != 0) hash ^= UnlockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (ActType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActType);
      }
      if (floating_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Floating);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ActivityId);
      }
      if (VipExp != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(VipExp);
      }
      if (UnlockId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(UnlockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (ActType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActType);
      }
      if (floating_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Floating);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (VipExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipExp);
      }
      if (UnlockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnlockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Server_inner_update_material other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      if (other.ActType != 0) {
        ActType = other.ActType;
      }
      if (other.floating_ != null) {
        if (floating_ == null) {
          floating_ = new global::GameProto.Map_object_data();
        }
        Floating.MergeFrom(other.Floating);
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.VipExp != 0) {
        VipExp = other.VipExp;
      }
      if (other.UnlockId != 0) {
        UnlockId = other.UnlockId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 16: {
            actType_ = (global::GameProto.AFFECT_MATERIAL_TYPE) input.ReadEnum();
            break;
          }
          case 26: {
            if (floating_ == null) {
              floating_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(floating_);
            break;
          }
          case 32: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 40: {
            VipExp = input.ReadUInt32();
            break;
          }
          case 48: {
            UnlockId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///********************************************服务器主动给客户端下发充值成果的结果(商店活动充值)**********************************
  ///当充值验证成功后  服务端主动给客户端下发结果
  /// </summary>
  public sealed partial class Server_send_purchase_rewared : pb::IMessage<Server_send_purchase_rewared> {
    private static readonly pb::MessageParser<Server_send_purchase_rewared> _parser = new pb::MessageParser<Server_send_purchase_rewared>(() => new Server_send_purchase_rewared());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Server_send_purchase_rewared> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server_send_purchase_rewared() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server_send_purchase_rewared(Server_send_purchase_rewared other) : this() {
      status_ = other.status_;
      activityId_ = other.activityId_;
      prudoctId_ = other.prudoctId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server_send_purchase_rewared Clone() {
      return new Server_send_purchase_rewared(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 2;
    private uint activityId_;
    /// <summary>
    ///活动id 如果为0 就不为活动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActivityId {
      get { return activityId_; }
      set {
        activityId_ = value;
      }
    }

    /// <summary>Field number for the "prudoct_id" field.</summary>
    public const int PrudoctIdFieldNumber = 3;
    private uint prudoctId_;
    /// <summary>
    ///充值id 如果不为活动的情况下这个值才有意义
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PrudoctId {
      get { return prudoctId_; }
      set {
        prudoctId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Server_send_purchase_rewared);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Server_send_purchase_rewared other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (ActivityId != other.ActivityId) return false;
      if (PrudoctId != other.PrudoctId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ActivityId != 0) hash ^= ActivityId.GetHashCode();
      if (PrudoctId != 0) hash ^= PrudoctId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (ActivityId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ActivityId);
      }
      if (PrudoctId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PrudoctId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ActivityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActivityId);
      }
      if (PrudoctId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PrudoctId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Server_send_purchase_rewared other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ActivityId != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.PrudoctId != 0) {
        PrudoctId = other.PrudoctId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 16: {
            ActivityId = input.ReadUInt32();
            break;
          }
          case 24: {
            PrudoctId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///所有物品数据(goweb需要的数据)
  /// </summary>
  public sealed partial class Product_info : pb::IMessage<Product_info> {
    private static readonly pb::MessageParser<Product_info> _parser = new pb::MessageParser<Product_info>(() => new Product_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Product_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product_info(Product_info other) : this() {
      onlyId_ = other.onlyId_;
      gameName_ = other.gameName_;
      standbyName_ = other.standbyName_;
      groupId_ = other.groupId_;
      groupName_ = other.groupName_;
      type_ = other.type_;
      typeName_ = other.typeName_;
      level_ = other.level_;
      price_ = other.price_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Product_info Clone() {
      return new Product_info(this);
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private uint onlyId_;
    /// <summary>
    ///唯一ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "game_name" field.</summary>
    public const int GameNameFieldNumber = 2;
    private string gameName_ = "";
    /// <summary>
    ///当前名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "standby_name" field.</summary>
    public const int StandbyNameFieldNumber = 3;
    private string standbyName_ = "";
    /// <summary>
    ///原名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StandbyName {
      get { return standbyName_; }
      set {
        standbyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 4;
    private uint groupId_;
    /// <summary>
    ///组别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 5;
    private string groupName_ = "";
    /// <summary>
    ///组别名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private uint type_;
    /// <summary>
    ///物品类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "type_name" field.</summary>
    public const int TypeNameFieldNumber = 7;
    private string typeName_ = "";
    /// <summary>
    ///类型名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeName {
      get { return typeName_; }
      set {
        typeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 8;
    private uint level_;
    /// <summary>
    ///物品等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 9;
    private uint price_;
    /// <summary>
    ///物品定价
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Product_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Product_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (GameName != other.GameName) return false;
      if (StandbyName != other.StandbyName) return false;
      if (GroupId != other.GroupId) return false;
      if (GroupName != other.GroupName) return false;
      if (Type != other.Type) return false;
      if (TypeName != other.TypeName) return false;
      if (Level != other.Level) return false;
      if (Price != other.Price) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (StandbyName.Length != 0) hash ^= StandbyName.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TypeName.Length != 0) hash ^= TypeName.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlyId);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameName);
      }
      if (StandbyName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StandbyName);
      }
      if (GroupId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GroupId);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupName);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Type);
      }
      if (TypeName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TypeName);
      }
      if (Level != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Level);
      }
      if (Price != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Price);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (StandbyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StandbyName);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (TypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeName);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Product_info other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.StandbyName.Length != 0) {
        StandbyName = other.StandbyName;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TypeName.Length != 0) {
        TypeName = other.TypeName;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt32();
            break;
          }
          case 18: {
            GameName = input.ReadString();
            break;
          }
          case 26: {
            StandbyName = input.ReadString();
            break;
          }
          case 32: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 42: {
            GroupName = input.ReadString();
            break;
          }
          case 48: {
            Type = input.ReadUInt32();
            break;
          }
          case 58: {
            TypeName = input.ReadString();
            break;
          }
          case 64: {
            Level = input.ReadUInt32();
            break;
          }
          case 72: {
            Price = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Group_data : pb::IMessage<Group_data> {
    private static readonly pb::MessageParser<Group_data> _parser = new pb::MessageParser<Group_data>(() => new Group_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Group_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group_data(Group_data other) : this() {
      groupId_ = other.groupId_;
      groupName_ = other.groupName_;
      cateList_ = other.cateList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group_data Clone() {
      return new Group_data(this);
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 1;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "group_name" field.</summary>
    public const int GroupNameFieldNumber = 2;
    private string groupName_ = "";
    /// <summary>
    ///组别名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupName {
      get { return groupName_; }
      set {
        groupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cate_list" field.</summary>
    public const int CateListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Category_data> _repeated_cateList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Category_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Category_data> cateList_ = new pbc::RepeatedField<global::GameProto.Category_data>();
    /// <summary>
    ///类别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Category_data> CateList {
      get { return cateList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Group_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Group_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GroupId != other.GroupId) return false;
      if (GroupName != other.GroupName) return false;
      if(!cateList_.Equals(other.cateList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (GroupName.Length != 0) hash ^= GroupName.GetHashCode();
      hash ^= cateList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GroupId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GroupId);
      }
      if (GroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GroupName);
      }
      cateList_.WriteTo(output, _repeated_cateList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (GroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupName);
      }
      size += cateList_.CalculateSize(_repeated_cateList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Group_data other) {
      if (other == null) {
        return;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.GroupName.Length != 0) {
        GroupName = other.GroupName;
      }
      cateList_.Add(other.cateList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 18: {
            GroupName = input.ReadString();
            break;
          }
          case 26: {
            cateList_.AddEntriesFrom(input, _repeated_cateList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Category_data : pb::IMessage<Category_data> {
    private static readonly pb::MessageParser<Category_data> _parser = new pb::MessageParser<Category_data>(() => new Category_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Category_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Category_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Category_data(Category_data other) : this() {
      cateId_ = other.cateId_;
      cateName_ = other.cateName_;
      levelList_ = other.levelList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Category_data Clone() {
      return new Category_data(this);
    }

    /// <summary>Field number for the "cate_id" field.</summary>
    public const int CateIdFieldNumber = 1;
    private uint cateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CateId {
      get { return cateId_; }
      set {
        cateId_ = value;
      }
    }

    /// <summary>Field number for the "cate_name" field.</summary>
    public const int CateNameFieldNumber = 2;
    private string cateName_ = "";
    /// <summary>
    ///组别名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CateName {
      get { return cateName_; }
      set {
        cateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_list" field.</summary>
    public const int LevelListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Level_data> _repeated_levelList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Level_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Level_data> levelList_ = new pbc::RepeatedField<global::GameProto.Level_data>();
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Level_data> LevelList {
      get { return levelList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Category_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Category_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CateId != other.CateId) return false;
      if (CateName != other.CateName) return false;
      if(!levelList_.Equals(other.levelList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CateId != 0) hash ^= CateId.GetHashCode();
      if (CateName.Length != 0) hash ^= CateName.GetHashCode();
      hash ^= levelList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CateId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CateId);
      }
      if (CateName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CateName);
      }
      levelList_.WriteTo(output, _repeated_levelList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CateId);
      }
      if (CateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CateName);
      }
      size += levelList_.CalculateSize(_repeated_levelList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Category_data other) {
      if (other == null) {
        return;
      }
      if (other.CateId != 0) {
        CateId = other.CateId;
      }
      if (other.CateName.Length != 0) {
        CateName = other.CateName;
      }
      levelList_.Add(other.levelList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CateId = input.ReadUInt32();
            break;
          }
          case 18: {
            CateName = input.ReadString();
            break;
          }
          case 26: {
            levelList_.AddEntriesFrom(input, _repeated_levelList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Level_data : pb::IMessage<Level_data> {
    private static readonly pb::MessageParser<Level_data> _parser = new pb::MessageParser<Level_data>(() => new Level_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Level_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_data(Level_data other) : this() {
      level_ = other.level_;
      onlyId_ = other.onlyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_data Clone() {
      return new Level_data(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 2;
    private uint onlyId_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Level_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Level_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (OnlyId != other.OnlyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (OnlyId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OnlyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Level_data other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            OnlyId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class All_product_data : pb::IMessage<All_product_data> {
    private static readonly pb::MessageParser<All_product_data> _parser = new pb::MessageParser<All_product_data>(() => new All_product_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<All_product_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public All_product_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public All_product_data(All_product_data other) : this() {
      list_ = other.list_.Clone();
      groupList_ = other.groupList_.Clone();
      priceList_ = other.priceList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public All_product_data Clone() {
      return new All_product_data(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Product_info> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Product_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Product_info> list_ = new pbc::RepeatedField<global::GameProto.Product_info>();
    /// <summary>
    ///所有物品属性, (用于goweb获取数据)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Product_info> List {
      get { return list_; }
    }

    /// <summary>Field number for the "group_list" field.</summary>
    public const int GroupListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Group_data> _repeated_groupList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Group_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Group_data> groupList_ = new pbc::RepeatedField<global::GameProto.Group_data>();
    /// <summary>
    ///组别类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Group_data> GroupList {
      get { return groupList_; }
    }

    /// <summary>Field number for the "price_list" field.</summary>
    public const int PriceListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Price_info> _repeated_priceList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Price_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Price_info> priceList_ = new pbc::RepeatedField<global::GameProto.Price_info>();
    /// <summary>
    ///价格信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Price_info> PriceList {
      get { return priceList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as All_product_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(All_product_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if(!groupList_.Equals(other.groupList_)) return false;
      if(!priceList_.Equals(other.priceList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      hash ^= groupList_.GetHashCode();
      hash ^= priceList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      groupList_.WriteTo(output, _repeated_groupList_codec);
      priceList_.WriteTo(output, _repeated_priceList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      size += groupList_.CalculateSize(_repeated_groupList_codec);
      size += priceList_.CalculateSize(_repeated_priceList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(All_product_data other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      groupList_.Add(other.groupList_);
      priceList_.Add(other.priceList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 18: {
            groupList_.AddEntriesFrom(input, _repeated_groupList_codec);
            break;
          }
          case 26: {
            priceList_.AddEntriesFrom(input, _repeated_priceList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Price_info : pb::IMessage<Price_info> {
    private static readonly pb::MessageParser<Price_info> _parser = new pb::MessageParser<Price_info>(() => new Price_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Price_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price_info(Price_info other) : this() {
      dollar_ = other.dollar_;
      renminbi_ = other.renminbi_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price_info Clone() {
      return new Price_info(this);
    }

    /// <summary>Field number for the "dollar" field.</summary>
    public const int DollarFieldNumber = 1;
    private float dollar_;
    /// <summary>
    ///美元
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dollar {
      get { return dollar_; }
      set {
        dollar_ = value;
      }
    }

    /// <summary>Field number for the "renminbi" field.</summary>
    public const int RenminbiFieldNumber = 2;
    private float renminbi_;
    /// <summary>
    ///人民币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Renminbi {
      get { return renminbi_; }
      set {
        renminbi_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Price_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Price_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dollar, other.Dollar)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Renminbi, other.Renminbi)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dollar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dollar);
      if (Renminbi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Renminbi);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dollar != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Dollar);
      }
      if (Renminbi != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Renminbi);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dollar != 0F) {
        size += 1 + 4;
      }
      if (Renminbi != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Price_info other) {
      if (other == null) {
        return;
      }
      if (other.Dollar != 0F) {
        Dollar = other.Dollar;
      }
      if (other.Renminbi != 0F) {
        Renminbi = other.Renminbi;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Dollar = input.ReadFloat();
            break;
          }
          case 21: {
            Renminbi = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Connect_addr_list : pb::IMessage<Connect_addr_list> {
    private static readonly pb::MessageParser<Connect_addr_list> _parser = new pb::MessageParser<Connect_addr_list>(() => new Connect_addr_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connect_addr_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connect_addr_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connect_addr_list(Connect_addr_list other) : this() {
      addr_ = other.addr_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connect_addr_list Clone() {
      return new Connect_addr_list(this);
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_addr_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> addr_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Addr {
      get { return addr_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connect_addr_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connect_addr_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addr_.Equals(other.addr_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addr_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addr_.WriteTo(output, _repeated_addr_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addr_.CalculateSize(_repeated_addr_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connect_addr_list other) {
      if (other == null) {
        return;
      }
      addr_.Add(other.addr_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addr_.AddEntriesFrom(input, _repeated_addr_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Test_coord_object_request : pb::IMessage<Test_coord_object_request> {
    private static readonly pb::MessageParser<Test_coord_object_request> _parser = new pb::MessageParser<Test_coord_object_request>(() => new Test_coord_object_request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test_coord_object_request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_coord_object_request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_coord_object_request(Test_coord_object_request other) : this() {
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_coord_object_request Clone() {
      return new Test_coord_object_request(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private global::GameProto.Coord coord_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test_coord_object_request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test_coord_object_request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coord, other.Coord)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test_coord_object_request other) {
      if (other == null) {
        return;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Test_coord_object_response : pb::IMessage<Test_coord_object_response> {
    private static readonly pb::MessageParser<Test_coord_object_response> _parser = new pb::MessageParser<Test_coord_object_response>(() => new Test_coord_object_response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test_coord_object_response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_coord_object_response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_coord_object_response(Test_coord_object_response other) : this() {
      status_ = other.status_;
      Data = other.data_ != null ? other.Data.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test_coord_object_response Clone() {
      return new Test_coord_object_response(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::GameProto.Game_common_status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::GameProto.Map_object_data data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test_coord_object_response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test_coord_object_response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test_coord_object_response other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::GameProto.Map_object_data();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器回应消费的钻石总数
  /// </summary>
  public sealed partial class Response_cost_diamond_total : pb::IMessage<Response_cost_diamond_total> {
    private static readonly pb::MessageParser<Response_cost_diamond_total> _parser = new pb::MessageParser<Response_cost_diamond_total>(() => new Response_cost_diamond_total());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response_cost_diamond_total> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.NetworkReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_cost_diamond_total() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_cost_diamond_total(Response_cost_diamond_total other) : this() {
      total_ = other.total_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response_cost_diamond_total Clone() {
      return new Response_cost_diamond_total(this);
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 1;
    private uint total_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::GameProto.Game_common_status status_ = 0;
    /// <summary>
    ///通用状态返回
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_common_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response_cost_diamond_total);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response_cost_diamond_total other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Total != other.Total) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Total != 0) hash ^= Total.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Total != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Total);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Total != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Total);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response_cost_diamond_total other) {
      if (other == null) {
        return;
      }
      if (other.Total != 0) {
        Total = other.Total;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Total = input.ReadUInt32();
            break;
          }
          case 16: {
            status_ = (global::GameProto.Game_common_status) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
