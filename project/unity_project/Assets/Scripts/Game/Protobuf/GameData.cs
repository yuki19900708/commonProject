// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameProto {

  /// <summary>Holder for reflection information generated from game_data.proto</summary>
  public static partial class GameDataReflection {

    #region Descriptor
    /// <summary>File descriptor for game_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9nYW1lX2RhdGEucHJvdG8SCUdhbWVQcm90bxoZZ29vZ2xlL3Byb3RvYnVm",
            "L2FueS5wcm90byLmAgoKTG9naW5fZGF0YRIXCg9kYXRhX3NhdmVfaW5kZXgY",
            "ASABKA0SEwoLYWxsaWFuY2VfaWQYAiABKA0SJwoJZ2FtZV9kYXRhGAMgASgL",
            "MhQuR2FtZVByb3RvLkdhbWVfZGF0YRIxCg5lc3NlbnRpYWxfZGF0YRgEIAEo",
            "CzIZLkdhbWVQcm90by5Fc3NlbnRpYWxfZGF0YRIrCgtwbGF5ZXJfZGF0YRgF",
            "IAEoCzIWLkdhbWVQcm90by5QbGF5ZXJfZGF0YRIvCglhcm15X2RhdGEYBiAB",
            "KAsyHC5HYW1lUHJvdG8uUGx1bmRlcl9hcm15X2RhdGESLQoMcGx1bmRlcl9k",
            "YXRhGAcgASgLMhcuR2FtZVByb3RvLlBsdW5kZXJfZGF0YRIlCgh2aXBfZGF0",
            "YRgIIAEoCzITLkdhbWVQcm90by5WaXBfZGF0YRIaChJjb3N0X2RpYW1vbmRf",
            "dG90YWwYCSABKA0i1AQKCUdhbWVfZGF0YRInCgljYW1wX2RhdGEYASABKAsy",
            "FC5HYW1lUHJvdG8uQ2FtcF9kYXRhEi0KDGNoYXB0ZXJfZGF0YRgCIAMoCzIX",
            "LkdhbWVQcm90by5DaGFwdGVyX2RhdGESIwoHYXBfZGF0YRgDIAEoCzISLkdh",
            "bWVQcm90by5BUF9kYXRhEjAKDG1vbnN0ZXJfbGlzdBgEIAMoCzIaLkdhbWVQ",
            "cm90by5Nb25zdGVyX2lkX2RhdGESNAoLYXR0YWNrX2RhdGEYBSABKAsyHy5H",
            "YW1lUHJvdG8uUGx1bmRlcl9oaXN0b3J5X2xpc3QSJwoJc2lnbl9kYXRhGAYg",
            "AygLMhQuR2FtZVByb3RvLlNpZ25fZGF0YRIvCg10cmVhc3VyZV9kYXRhGAcg",
            "ASgLMhguR2FtZVByb3RvLlRyZWFzdXJlX2RhdGESJwoJc2hvcF9kYXRhGAgg",
            "ASgLMhQuR2FtZVByb3RvLlNob3BfZGF0YRITCgtsaW1pdF9tb25leRgJIAEo",
            "DRITCgtsaW1pdF9zdG9uZRgKIAEoDRIrCgthdmF0YXJfZGF0YRgLIAEoCzIW",
            "LkdhbWVQcm90by5BdmF0YXJfZGF0YRIlCgh2aXBfZGF0YRgMIAEoCzITLkdh",
            "bWVQcm90by5WaXBfZGF0YRIuCg9wcmljZV9wb29sX2RhdGEYDSABKAsyFS5H",
            "YW1lUHJvdG8uUHJpY2VfcG9vbBIVCg10dXRvcmlhbF9kYXRhGA4gASgJEhoK",
            "EmNvc3RfZGlhbW9uZF90b3RhbBgPIAEoDSIoCglTaWduX2RhdGESCgoCaWQY",
            "ASABKA0SDwoHaXNfdmlldxgCIAEoCCLdAQoLUGxheWVyX2RhdGESDAoEbmFt",
            "ZRgBIAEoCRIQCgh1cmxfaWNvbhgCIAEoCRIMCgRpY29uGAMgASgNEhEKCXZp",
            "cF9sZXZlbBgEIAEoDRITCgthbGxpYW5jZV9pZBgFIAEoDRIRCgl2aXBfc2Nv",
            "cmUYBiABKA0SGQoRY2hhbmdlX25hbWVfY291bnQYByABKA0SFgoOcmVjaGFy",
            "Z2VfY291bnQYCCABKAISMgoMbW9udGhseV9kYXRhGAkgASgLMhwuR2FtZVBy",
            "b3RvLk1vbnRobHlfY2FyZF9kYXRhIoABCg5Fc3NlbnRpYWxfZGF0YRIMCgRj",
            "b2luGAEgASgEEg0KBXN0b25lGAIgASgEEg8KB2RpYW1vbmQYAyABKAQSCwoD",
            "ZXhwGAQgASgEEg0KBWxldmVsGAUgASgNEg4KBnRyb3BoeRgGIAEoDRIUCgxv",
            "ZmZsaW5lX3RpbWUYByABKAQiKQoITWFwX3NpemUSDQoFd2lkdGgYASABKA0S",
            "DgoGaGVpZ2h0GAIgASgNIsoBCglDYW1wX2RhdGESIgoEZ3JpZBgBIAMoCzIU",
            "LkdhbWVQcm90by5HcmlkX2RhdGESJwoJdGFza19kYXRhGAIgAygLMhQuR2Ft",
            "ZVByb3RvLlRhc2tfZGF0YRIMCgRzdGFyGAMgASgNEg0KBXNjb3JlGAQgASgE",
            "EiwKCGZsb2F0aW5nGAUgAygLMhouR2FtZVByb3RvLk1hcF9vYmplY3RfZGF0",
            "YRIlCghtYXBfc2l6ZRgGIAEoCzITLkdhbWVQcm90by5NYXBfc2l6ZSLGAQoM",
            "Q2hhcHRlcl9pbmZvEhQKDGZpbmlzaF9jb3VudBgBIAEoDRISCgpzdGFyX2Nv",
            "dW50GAIgASgNEhQKDGZhc3Rlc3RfdGltZRgDIAEoDRIVCg1oaWdoZXN0X3Nj",
            "b3JlGAQgASgNEhEKCWJveF9zdGFnZRgFIAEoDRITCgtzdGFnZV9jb3VudBgG",
            "IAEoDRIcChRmaW5pc2hfbWlzc2lvbl9jb3VudBgHIAEoDRIZChFnZXRfZGlh",
            "bW9uZF9jb3VudBgIIAEoDSJECgxDaGFwdGVyX2RhdGESDQoFbGV2ZWwYASAB",
            "KA0SJQoEaW5mbxgCIAEoCzIXLkdhbWVQcm90by5DaGFwdGVyX2luZm8iKwoH",
            "QVBfZGF0YRIKCgJhcBgBIAEoDRIUCgxuZXh0X2FwX3RpbWUYAiABKAQibgoM",
            "TW9uc3Rlcl9kYXRhEjIKCGlkZW50aXR5GAEgASgLMiAuR2FtZVByb3RvLk1v",
            "bnN0ZXJfaWRlbnRpdHlfZGF0YRIMCgRuYW1lGAIgASgJEgoKAmFwGAMgASgN",
            "EhAKCG1vdW50X2lkGAQgASgNIjwKFU1vbnN0ZXJfaWRlbnRpdHlfZGF0YRIP",
            "Cgdvbmx5X2lkGAEgASgNEhIKCm1vbnN0ZXJfaWQYAiABKA0iTAoPTW9uc3Rl",
            "cl9pZF9kYXRhEhIKCm1vbnN0ZXJfaWQYASABKA0SJQoEbGlzdBgCIAMoCzIX",
            "LkdhbWVQcm90by5Nb25zdGVyX2RhdGEiNwoKQXBwbHlfZGF0YRIVCg1hcHBs",
            "eV91c2VyX2lkGAEgASgNEhIKCmFwcGx5X3RpbWUYAiABKAQiMQoKQXBwbHlf",
            "bGlzdBIjCgRsaXN0GAEgAygLMhUuR2FtZVByb3RvLkFwcGx5X2RhdGEiSAoO",
            "Sm9pbl9jb25kaXRpb24SJwoEdHlwZRgBIAEoDjIZLkdhbWVQcm90by5Db25k",
            "aXRpb25fdHlwZRINCgV2YWx1ZRgCIAEoDSLQAQoSQWxsaWFuY2VfYmFzZV9k",
            "YXRhEhMKC2FsbGlhbmNlX2lkGAEgASgNEhUKDWFsbGlhbmNlX25hbWUYAiAB",
            "KAkSEAoIbGFuZ3VhZ2UYAyABKAkSFQoNYWxsaWFuY2VfaWNvbhgEIAEoDRIs",
            "Cgljb25kaXRpb24YBSABKAsyGS5HYW1lUHJvdG8uSm9pbl9jb25kaXRpb24S",
            "DgoGbm90aWNlGAYgASgJEhEKCWxlYWRlcl9pZBgHIAEoDRIUCgxtZW1iZXJf",
            "Y291bnQYCCABKA0iRgoLRG9uYXRlX2RhdGESKAoEdHlwZRgBIAEoDjIaLkdh",
            "bWVQcm90by5CbGFja190ZWNoX3R5cGUSDQoFY291bnQYAiABKAQiOAoQRG9u",
            "YXRlX2RhdGFfbGlzdBIkCgRsaXN0GAEgAygLMhYuR2FtZVByb3RvLkRvbmF0",
            "ZV9kYXRhIlkKFEFsbGlhbmNlX21lbWJlcl9kYXRhEg8KB3VzZXJfaWQYASAB",
            "KA0SMAoLZG9uYXRlX2xpc3QYAiABKAsyGy5HYW1lUHJvdG8uRG9uYXRlX2Rh",
            "dGFfbGlzdCJFChRBbGxpYW5jZV9tZW1iZXJfbGlzdBItCgRsaXN0GAEgAygL",
            "Mh8uR2FtZVByb3RvLkFsbGlhbmNlX21lbWJlcl9kYXRhIlkKD0JsYWNrX3Rl",
            "Y2hfZGF0YRIoCgR0eXBlGAEgASgOMhouR2FtZVByb3RvLkJsYWNrX3RlY2hf",
            "dHlwZRINCgVjb3VudBgCIAEoBBINCgVsZXZlbBgDIAEoDSI/ChNBbGxpYW5j",
            "ZV9ibGFja190ZWNoEigKBGxpc3QYASADKAsyGi5HYW1lUHJvdG8uQmxhY2tf",
            "dGVjaF9kYXRhIqQBCg1BbGxpYW5jZV9kYXRhEikKCmFwcGx5X2xpc3QYASAB",
            "KAsyFS5HYW1lUHJvdG8uQXBwbHlfbGlzdBIyCgpibGFja190ZWNoGAIgASgL",
            "Mh4uR2FtZVByb3RvLkFsbGlhbmNlX2JsYWNrX3RlY2gSNAoLbWVtYmVyX2xp",
            "c3QYAyABKAsyHy5HYW1lUHJvdG8uQWxsaWFuY2VfbWVtYmVyX2xpc3QirQEK",
            "EkFsbGlhbmNlX3VzZXJfZGF0YRIPCgd1c2VyX2lkGAEgASgNEiYKBnBsYXll",
            "chgCIAEoCzIWLkdhbWVQcm90by5QbGF5ZXJfZGF0YRIsCgllc3NlbnRpYWwY",
            "AyABKAsyGS5HYW1lUHJvdG8uRXNzZW50aWFsX2RhdGESMAoLZG9uYXRlX2xp",
            "c3QYBCABKAsyGy5HYW1lUHJvdG8uRG9uYXRlX2RhdGFfbGlzdCLDAQoPQ29u",
            "dGFjdF91c19kYXRhEg8KB3VzZXJfaWQYASABKA0SDAoEdGltZRgCIAEoBBIN",
            "CgV0aXRsZRgDIAEoCRIPCgdjb250ZW50GAQgASgJEhMKC2NvbnRhY3Rfd2F5",
            "GAUgASgJEiYKBHR5cGUYBiABKA4yGC5HYW1lUHJvdG8uUGxhdGZvcm1fdHlw",
            "ZRIPCgd2ZXJzaW9uGAcgASgJEg0KBXN0YXRlGAggASgNEhQKDGRldmljZV9t",
            "b2RlbBgJIAEoCSJcCgtOb3RpY2VfZGF0YRINCgV0aXRsZRgBIAEoCRIPCgdj",
            "b250ZW50GAIgASgJEgsKA2RlcxgDIAEoCRIMCgRpY29uGAQgASgJEhIKCmJl",
            "Z2luX3RpbWUYBSABKAQiMwoLTm90aWNlX2xpc3QSJAoEbGlzdBgBIAMoCzIW",
            "LkdhbWVQcm90by5Ob3RpY2VfZGF0YSKzAQoRTm90aWNlX2RhdGFfcmVkaXMS",
            "EAoIdGl0bGVfY24YASABKAkSEAoIdGl0bGVfZW4YAiABKAkSEgoKY29udGVu",
            "dF9jbhgDIAEoCRISCgpjb250ZW50X2VuGAQgASgJEg4KBmRlc19jbhgFIAEo",
            "CRIOCgZkZXNfZW4YBiABKAkSDAoEaWNvbhgHIAEoCRISCgpiZWdpbl90aW1l",
            "GAggASgEEhAKCGVuZF90aW1lGAkgASgEIkYKDU1haWxfaWRlbnRpdHkSDwoH",
            "b25seV9pZBgBIAEoDRIkCgVsZXZlbBgCIAEoDjIVLkdhbWVQcm90by5NQUlM",
            "X0xFVkVMIt8DCglNYWlsX2RhdGESKgoIaWRlbnRpdHkYASABKAsyGC5HYW1l",
            "UHJvdG8uTWFpbF9pZGVudGl0eRIiCgR0eXBlGAIgASgOMhQuR2FtZVByb3Rv",
            "Lk1BSUxfVFlQRRIMCgR0aW1lGAMgASgEEhAKCHRpdGxlX2lkGAQgASgEEhAK",
            "CHRpdGxlX2NuGAUgASgJEhAKCHRpdGxlX2VuGAYgASgJEhIKCmNvbnRlbnRf",
            "aWQYByABKAQSEgoKY29udGVudF9jbhgIIAEoCRISCgpjb250ZW50X2VuGAkg",
            "ASgJEiYKBnN0YXR1cxgKIAEoDjIWLkdhbWVQcm90by5NQUlMX1NUQVRVUxIr",
            "CgtyZXdhcmRfbGlzdBgLIAMoCzIWLkdhbWVQcm90by5Db21tb25faXRlbRIU",
            "CgxkaXNwbGF5X3RpbWUYDCABKAQSLgoKd3JpdGVfdHlwZRgNIAEoDjIaLkdh",
            "bWVQcm90by5Xcml0ZV9tYWlsX3R5cGUSEwoLZXhwaXJlX3RpbWUYDiABKAQS",
            "FQoNbW9udGhfY2FyZF9pZBgPIAEoDRIoCgpjb250YWN0X3VzGBAgASgLMhQu",
            "Z29vZ2xlLnByb3RvYnVmLkFueRIRCgl2aXBfbGV2ZWwYESABKA0iNAoOTWFp",
            "bF9kYXRhX2xpc3QSIgoEbGlzdBgBIAMoCzIULkdhbWVQcm90by5NYWlsX2Rh",
            "dGEiPwoRTW9udGhfbWFpbF9yZWNvcmQSFQoNbW9udGhfY2FyZF9pZBgBIAEo",
            "DRITCgtleHBpcmVfdGltZRgCIAEoBCKhAQoKTWFpbF9jYWNoZRIuCgtjb21t",
            "b25fbGlzdBgBIAEoCzIZLkdhbWVQcm90by5NYWlsX2RhdGFfbGlzdBIvCgxz",
            "cGVjaWFsX2xpc3QYAiABKAsyGS5HYW1lUHJvdG8uTWFpbF9kYXRhX2xpc3QS",
            "MgoMbW9udGhfcmVjb3JkGAMgAygLMhwuR2FtZVByb3RvLk1vbnRoX21haWxf",
            "cmVjb3JkIkEKCldyaXRlX21haWwSDwoHdXNlcl9pZBgBIAEoDRIiCgRtYWls",
            "GAIgASgLMhQuR2FtZVByb3RvLk1haWxfZGF0YSKFAgoTQmFja3N0YWdlX2Nv",
            "bmRpdGlvbhISCgptaW5fdHJvcGh5GAEgASgNEhIKCm1heF90cm9waHkYAiAB",
            "KA0SFAoMbWluX3JlY2hhcmdlGAMgASgNEhQKDG1heF9yZWNoYXJnZRgEIAEo",
            "DRIRCgltaW5fbGV2ZWwYBSABKA0SEQoJbWF4X2xldmVsGAYgASgNEhAKCG1p",
            "bl9wYXNzGAcgASgNEhAKCG1heF9wYXNzGAggASgNEhAKCG1pbl9zaWduGAkg",
            "ASgNEhAKCG1heF9zaWduGAogASgNEhUKDW1pbl92aXBfbGV2ZWwYCyABKA0S",
            "FQoNbWF4X3ZpcF9sZXZlbBgMIAEoDSLMAQoSV3JpdGVfbWFpbF9yZXF1ZXN0",
            "EiMKBGxpc3QYASADKAsyFS5HYW1lUHJvdG8uV3JpdGVfbWFpbBIuCgp3cml0",
            "ZV90eXBlGAIgASgOMhouR2FtZVByb3RvLldyaXRlX21haWxfdHlwZRIxCglj",
            "b25kaXRpb24YAyABKAsyHi5HYW1lUHJvdG8uQmFja3N0YWdlX2NvbmRpdGlv",
            "bhIuCgpzdGF0aXN0aWNzGAQgASgLMhouR2FtZVByb3RvLlN0YXRpc3RpY3Nf",
            "ZGF0YSI7Cg9TdGF0aXN0aWNzX2RhdGESFAoMYWN0aXZlX2NvdW50GAEgASgN",
            "EhIKCnNlbmRfY291bnQYAiABKA0i/AEKDFBsdW5kZXJfZGF0YRIZChFzaGll",
            "bGRfYnJlYWtfdGltZRgBIAEoBBIvCglyYW5rX2RhdGEYAiABKAsyHC5HYW1l",
            "UHJvdG8uUGx1bmRlcl9yYW5rX2RhdGESNQoMaGlzdG9yeV9saXN0GAMgASgL",
            "Mh8uR2FtZVByb3RvLlBsdW5kZXJfaGlzdG9yeV9saXN0EiQKCmNvb3JkX2xp",
            "c3QYBCADKAsyEC5HYW1lUHJvdG8uQ29vcmQSGQoRZG9ycF9zZWdtZW50X3Rp",
            "bWUYBSABKAQSFAoMcmVmcmVzaF90aW1lGAYgASgEEhIKCmZyZWVfY291bnQY",
            "ByABKA0iSAoUUGx1bmRlcl9oaXN0b3J5X2xpc3QSMAoMaGlzdG9yeV9pbmZv",
            "GAEgAygLMhouR2FtZVByb3RvLlBsdW5kZXJfaGlzdG9yeSKQAQoRVHJlYXN1",
            "cmVfYm94X2luZm8SDgoGYm94X2lkGAEgASgNEhQKDGNvbmZpZ19pbmRleBgC",
            "IAEoDRIuCgZzdGF0dXMYAyABKA4yHi5HYW1lUHJvdG8uVHJlYXN1cmVfYm94",
            "X3N0YXR1cxITCgtmaW5pc2hfdGltZRgEIAEoBBIQCghpc19lbXB0eRgFIAEo",
            "CCJzChdMZXZlbF90cmVhc3VyZV9ib3hfaW5mbxIuCghib3hfbGlzdBgBIAMo",
            "CzIcLkdhbWVQcm90by5UcmVhc3VyZV9ib3hfaW5mbxIRCglib3hfY291bnQY",
            "AiABKA0SFQoNbWF4X2JveF9jb3VudBgDIAEoDSJ3Cg1UcmVhc3VyZV9kYXRh",
            "Ei8KCWRhaWx5X2JveBgBIAEoCzIcLkdhbWVQcm90by5UcmVhc3VyZV9ib3hf",
            "aW5mbxI1CglsZXZlbF9ib3gYAiABKAsyIi5HYW1lUHJvdG8uTGV2ZWxfdHJl",
            "YXN1cmVfYm94X2luZm8igQIKD1BsdW5kZXJfaGlzdG9yeRIQCghlbmVteV9p",
            "ZBgBIAEoDRIOCgZ0cm9waHkYAyABKA0SEAoId2luX2ZsYWcYBCABKAgSFQoN",
            "dHJvcGh5X2NoYW5nZRgFIAEoBRISCgpzdGFydF90aW1lGAYgASgEEisKC3Bs",
            "YXllcl9kYXRhGAcgASgLMhYuR2FtZVByb3RvLlBsYXllcl9kYXRhEg8KB0FJ",
            "X2ZsYWcYCCABKAgSEQoJc2hvd19mbGFnGAkgASgIEi8KCWFybXlfZGF0YRgK",
            "IAEoCzIcLkdhbWVQcm90by5QbHVuZGVyX2FybXlfZGF0YRINCgVsZXZlbBgL",
            "IAEoDSIuCghNYXBfZGF0YRIiCgRncmlkGAEgAygLMhQuR2FtZVByb3RvLkdy",
            "aWRfZGF0YSIdCgVDb29yZBIJCgF4GAEgASgNEgkKAXkYAiABKA0i6AEKCUdy",
            "aWRfZGF0YRIfCgVjb29yZBgBIAEoCzIQLkdhbWVQcm90by5Db29yZBIkCgVz",
            "dGF0ZRgCIAEoDjIVLkdhbWVQcm90by5HcmlkX3N0YXRlEhIKCmRlYWRfbGV2",
            "ZWwYAyABKA0SEgoKY3VyZV9jb3VudBgEIAEoDRIrCgd0ZXJyYWluGAUgASgL",
            "MhouR2FtZVByb3RvLk1hcF9vYmplY3RfZGF0YRIqCgZlbnRpdHkYBiABKAsy",
            "Gi5HYW1lUHJvdG8uTWFwX29iamVjdF9kYXRhEhMKC3NlYWxsb2NrX2lkGAcg",
            "ASgNIrwDCg9NYXBfb2JqZWN0X2RhdGESCgoCaWQYASABKA0SDAoEbmFtZRgC",
            "IAEoCRIKCgJocBgDIAEoDRIWCg5sZWZ0X3RhcF9jb3VudBgEIAEoBRIVCg10",
            "YXBfbWF4X21vdW50GAUgASgFEhoKEmxlZnRfY29sbGVjdF9jb3VudBgGIAEo",
            "BRIZChFjb2xsZWN0X21heF9jb3VudBgHIAEoBRIYChBsZWZ0X3NwYXduX2Nv",
            "dW50GAggASgFEhcKD3NwYXduX21heF9jb3VudBgJIAEoBRIVCg1yZW1haW5f",
            "YW1vdW50GAogASgNEg8KB3Nob3BfaWQYCyABKA0SMwoPaW5jbHVkZV9vYmpl",
            "Y3RzGAwgAygLMhouR2FtZVByb3RvLk1hcF9vYmplY3RfZGF0YRI3Cg1idWls",
            "ZGluZ19kYXRhGA0gASgLMiAuR2FtZVByb3RvLlJlc3RpbmdfYnVpbGRpbmdf",
            "ZGF0YRIsCgZzdGF0dXMYDiABKA4yHC5HYW1lUHJvdG8uTUFQX09CSkVDVF9T",
            "VEFUVVMSEwoLZGVsZXRlX3RpbWUYDyABKAQSEQoJZGVhZF90aW1lGBAgASgN",
            "ImIKFVJlc3RpbmdfYnVpbGRpbmdfZGF0YRIRCgl0aW1lc3RhbXAYASABKAMS",
            "NgoMbW9uc3Rlcl9saXN0GAIgAygLMiAuR2FtZVByb3RvLk1vbnN0ZXJfaWRl",
            "bnRpdHlfZGF0YSJTCglUYXNrX2RhdGESCgoCaWQYASABKA0SFAoMaXNfY29t",
            "cGxldGVkGAIgASgIEhQKDGZpbmlzaF9jb3VudBgDIAEoDRIOCgZyZXdhcmQY",
            "BCABKA0imwEKEVBsdW5kZXJfYXJteV9kYXRhEiwKC2F0dGFja19hcm15GAEg",
            "AygLMhcuR2FtZVByb3RvLk1vbnN0ZXJfZGF0YRItCgxkZWZlbnNlX2FybXkY",
            "AiADKAsyFy5HYW1lUHJvdG8uTW9uc3Rlcl9kYXRhEhQKDGF0dGFja19wb3dl",
            "chgDIAEoDRITCgtkZWZlbl9wb3dlchgEIAEoDSKBAQoRUGx1bmRlcl9yYW5r",
            "X2RhdGESEgoKZGFpbHlfcmFuaxgBIAEoDRIXCg9kYWlseV9yYW5rX3BuZ2UY",
            "AiABKA0SEwoLd2Vla2x5X3JhbmsYAyABKA0SGgoSd2Vla2x5X3JhbmtfY2hh",
            "bmdlGAQgASgNEg4KBnRyb3BoeRgFIAEoDSI5CglTaG9wX2RhdGESLAoJbGlz",
            "dF9kYXRhGAEgAygLMhkuR2FtZVByb3RvLlNob3BfbGlzdF9kYXRhImIKDlNo",
            "b3BfbGlzdF9kYXRhEiwKCXNob3BfaXRlbRgBIAMoCzIZLkdhbWVQcm90by5T",
            "aG9wX2l0ZW1fZGF0YRIiCgR0eXBlGAIgASgOMhQuR2FtZVByb3RvLlNob3Bf",
            "dHlwZSKWAQoOU2hvcF9pdGVtX2RhdGESCgoCaWQYASABKA0SEQoJYnV5X2Nv",
            "dW50GAIgASgNEikKBXN0YXRlGAMgASgOMhouR2FtZVByb3RvLlNob3BfaXRl",
            "bV9zdGF0ZRITCgtsaW1pdF9jb3VudBgEIAEoDRISCgpsaW1pdF90aW1lGAUg",
            "ASgEEhEKCW9iamVjdF9pZBgGIAEoDSJhCgtBdmF0YXJfZGF0YRIoCgppbmRl",
            "eF9kYXRhGAEgAygLMhQuR2FtZVByb3RvLkljb25fZGF0YRIoCgpmcmFtZV9k",
            "YXRhGAIgAygLMhQuR2FtZVByb3RvLkljb25fZGF0YSI7CglJY29uX2RhdGES",
            "CgoCaWQYASABKA0SDQoFY291bnQYAiABKA0SEwoLZmluaXNoX2ZsYWcYAyAB",
            "KAgiNwoPVmlwX3Jld2FyZF9kYXRhEiQKBGxpc3QYASADKAsyFi5HYW1lUHJv",
            "dG8uQ29tbW9uX2l0ZW0iKAoLQ29tbW9uX2l0ZW0SCgoCaWQYASABKA0SDQoF",
            "Y291bnQYAiABKA0ixwEKDVZpcF9zaG9wX2RhdGESFAoMcmVmcmVzaF90aW1l",
            "GAEgASgEEiYKBGxpc3QYAiADKAsyGC5HYW1lUHJvdG8uVmlwX3Nob3BfaW5m",
            "bxIVCg1yZWZyZXNoX21vdW50GAMgASgNEiIKGnVzZV9kaWFtb25kX2NhcmRp",
            "bmFsX21vdW50GAQgASgNEhkKEXJlZnJlc2hfYWxsX21vdW50GAUgASgNEiIK",
            "GmxvY2tfYW5pbWF0aW9uX3N0YXJ0X2luZGV4GAYgASgNIi4KDVZpcF9zaG9w",
            "X2luZm8SCgoCaWQYASABKA0SEQoJc2VsbF9mbGFnGAIgASgIImgKCFZpcF9k",
            "YXRhEi8KC3Jld2FyZF9kYXRhGAEgASgLMhouR2FtZVByb3RvLlZpcF9yZXdh",
            "cmRfZGF0YRIrCglzaG9wX2RhdGEYAiABKAsyGC5HYW1lUHJvdG8uVmlwX3No",
            "b3BfZGF0YSKRAQoKUHJpY2VfcG9vbBI7Cg5wcml6ZXBvb2xfdHlwZRgBIAEo",
            "DjIjLkdhbWVQcm90by5BQ1RJVklUWV9QUklaRV9QT09MX1RZUEUSFAoMZmlu",
            "aXNoX2NvdW50GAIgASgNEjAKEHJld2FyZF9kYXRhX2xpc3QYAyADKAsyFi5H",
            "YW1lUHJvdG8uQ29tbW9uX2l0ZW0irAQKEkFjdGl2aXR5X2Jhc2VfZGF0YRIP",
            "Cgdvbmx5X2lkGAEgASgNEi8KDWFjdGl2aXR5X3R5cGUYAiABKA4yGC5HYW1l",
            "UHJvdG8uQUNUSVZJVFlfVFlQRRIPCgduYW1lX2NuGAMgASgJEg8KB25hbWVf",
            "ZW4YBCABKAkSDgoGZGVzX2NuGAUgASgJEg4KBmRlc19lbhgGIAEoCRIQCghl",
            "bmRfdGltZRgHIAEoBBISCgpzdGFydF90aW1lGAggASgEEhUKDXJlY2hhcmdl",
            "X2NvZGUYCSABKAkSEAoIZGlzY291bnQYCiABKAISEQoJbWF4X2NvdW50GAwg",
            "ASgNEg8KB3ZpcF9leHAYDSABKA0SCwoDdXJsGA4gASgJEg8KB3N0ZXBfaWQY",
            "DyABKA0SMAoQcmV3YXJkX2RhdGFfbGlzdBgQIAMoCzIWLkdhbWVQcm90by5D",
            "b21tb25faXRlbRI7Cg5wcml6ZXBvb2xfZGF0YRgRIAEoCzIjLkdhbWVQcm90",
            "by5BY3Rpdml0eV9wcml6ZV9wb29sX2RhdGESQAoRcmFuZF9iaW9sb2d5X3Nl",
            "bGwYEiABKAsyJS5HYW1lUHJvdG8uQWN0aXZpdHlfcmFuZF9iaW9sb2d5X3Nl",
            "bGwSEAoIcHJpY2VfY24YFiABKAISEAoIcHJpY2VfZW4YFyABKAISDgoGc3Rh",
            "dHVzGBggASgIEg0KBXByaWNlGBkgASgNEg0KBWNvdW50GBogASgNIkEKEkFj",
            "dGl2aXR5X2RhdGFfbGlzdBIrCgRsaXN0GAEgAygLMh0uR2FtZVByb3RvLkFj",
            "dGl2aXR5X2Jhc2VfZGF0YSI6ChpBY3Rpdml0eV9yYW5kX2Jpb2xvZ3lfc2Vs",
            "bBINCgVsZXZlbBgBIAEoDRINCgVjb3VudBgCIAEoDSLpAQoYQWN0aXZpdHlf",
            "cHJpemVfcG9vbF9kYXRhEjsKDnByaXplcG9vbF90eXBlGAEgASgOMiMuR2Ft",
            "ZVByb3RvLkFDVElWSVRZX1BSSVpFX1BPT0xfVFlQRRISCgpzYXZlX3RpbWVz",
            "GAIgASgNEhQKDGZpbmlzaF9jb3VudBgDIAEoDRIbChNtZXJnZV9hcnRpY2xl",
            "X2xldmVsGAQgASgNEhgKEG1lcmdlX2FydGljbGVfaWQYBSABKA0SGwoTbWVy",
            "Z2VfYXJ0aWNsZV9jb3VudBgGIAEoDRISCgpwYXVzZV90aW1lGAcgASgEIocB",
            "ChtBY3Rpdml0eV9tZXJnZV9tb25zdGVyX2RhdGESNAoEdHlwZRgBIAEoDjIm",
            "LkdhbWVQcm90by5BQ1RJVklUWV9NRVJHRV9NT05TVEVSX1RZUEUSDQoFbGV2",
            "ZWwYAiABKA0SDQoFbW91bnQYAyABKA0SFAoMY3VycmVudG1vdW50GAQgASgN",
            "IikKG0FjdGl2aXR5X21lcmdlX2FydGljbGVfZGF0YRIKCgJpZBgBIAEoDSL3",
            "AQoVQWN0aXZpdHlfcGx1bmRlcl9kYXRhEi4KBHR5cGUYASABKA4yIC5HYW1l",
            "UHJvdG8uQUNUSVZJVFlfUExVTkRFUl9UWVBFEg0KBW1vdW50GAIgASgNEhIK",
            "CnN0YXJfbW91bnQYAyABKA0SFQoNZGVzdG9yeV9tb3VudBgEIAEoDRISCgpz",
            "ZWFsX21vdW50GAUgASgNEhIKCmtpbGxfbW91bnQYBiABKA0SEQoJd2luX21v",
            "dW50GAcgASgNEh0KFXBsdW5kZXJfYXJ0aWNsZV9tb3VudBgIIAEoDRIaChJw",
            "bHVuZGVyX2FydGljbGVfaWQYCSABKA0iYgoTU2lnbl9pbl9jb21tb25fZGF0",
            "YRIUCgxyZWNlaXZlX2ZsYWcYASABKAgSJgoGcmV3YXJkGAIgAygLMhYuR2Ft",
            "ZVByb3RvLkNvbW1vbl9pdGVtEg0KBWNvdW50GAMgASgNIl0KE05vdmljZV93",
            "ZWxmYXJlX2RhdGESMwoLcmV3YXJkX2xpc3QYASADKAsyHi5HYW1lUHJvdG8u",
            "U2lnbl9pbl9jb21tb25fZGF0YRIRCgl0aW1lc3RhbXAYAiABKAQiiQEKEERh",
            "aWx5X2NoZWNrX2RhdGESMwoLcmV3YXJkX2xpc3QYASADKAsyHi5HYW1lUHJv",
            "dG8uU2lnbl9pbl9jb21tb25fZGF0YRIYChBzdXBwbGVtZW50X2NvdW50GAIg",
            "ASgNEhMKC2RheV9vZl93ZWVrGAMgASgNEhEKCXRpbWVzdGFtcBgEIAEoBCJS",
            "ChJEYWlseV9jaGVja19yZXdhcmQSFAoMcmVjZWl2ZV9mbGFnGAEgASgIEiYK",
            "BnJld2FyZBgCIAEoCzIWLkdhbWVQcm90by5Db21tb25faXRlbSJiChZEYWls",
            "eV9jaGVja19zdGFnZV9kYXRhEjMKC3Jld2FyZF9saXN0GAEgAygLMh4uR2Ft",
            "ZVByb3RvLlNpZ25faW5fY29tbW9uX2RhdGESEwoLZ3JhbmRfdG90YWwYAiAB",
            "KA0iZQoYRGFpbHlfY2hlY2tfc3RhZ2VfcmV3YXJkEgsKA2RheRgBIAEoDRIU",
            "CgxyZWNlaXZlX2ZsYWcYAiABKAgSJgoGcmV3YXJkGAMgASgLMhYuR2FtZVBy",
            "b3RvLkNvbW1vbl9pdGVtIl8KFURhaWx5X3RpbWVfc3RhZ2VfZGF0YRIzCgty",
            "ZXdhcmRfbGlzdBgBIAMoCzIeLkdhbWVQcm90by5TaWduX2luX2NvbW1vbl9k",
            "YXRhEhEKCXRpbWVzdGFtcBgCIAEoBCJYChdEYWlseV90aW1lX3N0YWdlX3Jl",
            "d2FyZBIUCgxyZWNlaXZlX2ZsYWcYASABKAgSJwoHcmV3YXJkcxgCIAMoCzIW",
            "LkdhbWVQcm90by5Db21tb25faXRlbSJEChFNb250aGx5X2NhcmRfZGF0YRIv",
            "CgljYXJkX2luZm8YASADKAsyHC5HYW1lUHJvdG8uTW9udGhseV9jYXJkX2lu",
            "Zm8iMQoRTW9udGhseV9jYXJkX2luZm8SCgoCaWQYASABKA0SEAoIZW5kX3Rp",
            "bWUYAiABKAQqdQoNQ2hhcHRlcl9zdGF0ZRIWChJDSEFQVEVSX1NUQVRFX0xP",
            "Q0sQABIYChRDSEFQVEVSX1NUQVRFX1VOTE9DSxABEhgKFENIQVBURVJfU1RB",
            "VEVfRklOSVNIEAISGAoUQ0hBUFRFUl9TVEFURV9UUllJTkcQAypfCg1Nb25z",
            "dGVyX3N0YXRlEhsKF01PTlNURVJfU1RBVEVfU0xFRVBQSU5HEAASGAoUTU9O",
            "U1RFUl9TVEFURV9XQUtJTkcQARIXChNNT05TVEVSX1NUQVRFX1dBS0VEEAIq",
            "XgoOQ29uZGl0aW9uX3R5cGUSFgoSQ09ORElUSU9OX1RZUEVfTklMEAASGQoV",
            "Q09ORElUSU9OX1RZUEVfRk9SQklEEAESGQoVQ09ORElUSU9OX1RZUEVfVFJP",
            "UEhZEAIqXgoPQmxhY2tfdGVjaF90eXBlEhcKE0JMQUNLX1RFQ0hfVFlQRV9O",
            "SUwQABIaChZCTEFDS19URUNIX1RZUEVfQVRUQUNLEAESFgoSQkxBQ0tfVEVD",
            "SF9UWVBFX0hQEAIqpgIKDVBsYXRmb3JtX3R5cGUSHwobUExBVEZPUk1fVFlQ",
            "RV9HVUVTVF9BTkRSSU9EEAASGwoXUExBVEZPUk1fVFlQRV9HVUVTVF9QQUQQ",
            "ARIeChpQTEFURk9STV9UWVBFX0dVRVNUX0lQSE9ORRACEhwKGFBMQVRGT1JN",
            "X1RZUEVfR1VFU1RfSVBBRBADEhoKFlBMQVRGT1JNX1RZUEVfRkFDRUJPT0sQ",
            "FBIZChVQTEFURk9STV9UWVBFX1RXSVRURVIQFRIYChRQTEFURk9STV9UWVBF",
            "X1dFQ0hBVBAWEhcKE1BMQVRGT1JNX1RZUEVfV0VJQk8QFxIUChBQTEFURk9S",
            "TV9UWVBFX1FREBgSGQoVUExBVEZPUk1fVFlQRV9BQ0NPVU5UEDIqVQoJTUFJ",
            "TF9UWVBFEhUKEU1BSUxfVFlQRV9HRU5FUkFMEAASGQoVTUFJTF9UWVBFX01P",
            "TlRITFlDQVJEEAESFgoSTUFJTF9UWVBFX0FDVElWSVRZEAIqjQEKC01BSUxf",
            "U1RBVFVTEhgKFE1BSUxfU1RBVFVTX05PVF9SRUFEEAASFAoQTUFJTF9TVEFU",
            "VVNfUkVBRBABEhwKGE1BSUxfU1RBVFVTX05PVF9SRUNFSVZFRBACEhgKFE1B",
            "SUxfU1RBVFVTX1JFQ0VJVkVEEAMSFgoSTUFJTF9TVEFUVVNfREVMRVRFEAQq",
            "OwoKTUFJTF9MRVZFTBIVChFNQUlMX0xFVkVMX0NPTU1PThAAEhYKEk1BSUxf",
            "TEVWRUxfU1BFQ0lBTBABKqUBCg9Xcml0ZV9tYWlsX3R5cGUSHAoYV1JJVEVf",
            "TUFJTF9UWVBFX1BFUlNPTkFMEAASJgoiV1JJVEVfTUFJTF9UWVBFX0JBQ0tT",
            "VEFHRV9QRVJTT05BTBABEiMKH1dSSVRFX01BSUxfVFlQRV9CQUNLU1RBR0Vf",
            "R1JPVVAQBBInCiNXUklURV9NQUlMX1RZUEVfQkFDS1NUQUdFX0NPTkRJVElP",
            "ThAIKo4BChNUcmVhc3VyZV9ib3hfc3RhdHVzEhsKF1RSRUFTVVJFX0JPWF9T",
            "VEFUVVNfTklMEAASHAoYVFJFQVNVUkVfQk9YX1NUQVRVU19MT0NLEAESHAoY",
            "VFJFQVNVUkVfQk9YX1NUQVRVU19XQUlUEAISHgoaVFJFQVNVUkVfQk9YX1NU",
            "QVRVU19GSU5JU0gQAyqAAQoKR3JpZF9zdGF0ZRIVChFHUklEX1NUQVRFX0xP",
            "Q0tFRBAAEh4KGkdSSURfU1RBVEVfVU5MT0NLX0FORF9ERUFEEAESHwobR1JJ",
            "RF9TVEFURV9VTkxPQ0tfQU5EX0NVUkVEEAISGgoWR1JJRF9TVEFURV9QQUlE",
            "X1VOTE9DSxADKmkKEU1BUF9PQkpFQ1RfU1RBVFVTEhoKFk1BUF9PQkpFQ1Rf",
            "U1RBVFVTX05VTEwQABIcChhNQVBfT0JKRUNUX1NUQVRVU19OT1JNQWwQARIa",
            "ChZNQVBfT0JKRUNUX1NUQVRVU19MT0NLEAIqfwoPU2hvcF9pdGVtX3N0YXRl",
            "EhUKEUlURU1fU1RBVEVfTE9DS0VEEAASJAogSVRFTV9TVEFURV9VTkxPQ0tf",
            "QlVUX05PX0RJU1BMQVkQARIWChJJVEVNX1NUQVRFX0RJU1BMQVkQAhIXChNJ",
            "VEVNX1NUQVRFX1NPTERfT1VUEAMqgQEKCVNob3BfdHlwZRIQCgxERUZBVUxU",
            "X1NIT1AQABIOCgpDSEVTVF9TSE9QEAESDQoJRUdHU19TSE9QEAISEQoNQlVJ",
            "TERJTkdfU0hPUBADEg4KClRJTUVEX1NIT1AQBBIOCgpMRVZFTF9TSE9QEAUS",
            "EAoMRElBTU9ORF9TSE9QEAYqdQoNTUFURVJJQUxfVFlQRRIUChBNQVRFUklB",
            "TF9ERUZBVUxUEAASEgoOTUFURVJJQUxfTU9ORVkQARISCg5NQVRFUklBTF9T",
            "VE9ORRACEhQKEE1BVEVSSUFMX0RJQU1PTkQQAxIQCgxNQVRFUklBTF9FWFAQ",
            "BCr7AgoNQUNUSVZJVFlfVFlQRRIRCg1BQ1RJVklUWV9OVUxMEAASEgoOQUNU",
            "SVZJVFlfU0hBUkUQARIRCg1BQ1RJVklUWV9NQUlMEAISFAoQQUNUSVZJVFlf",
            "T1VUU0lERRADEhQKEEFDVElWSVRZX1BMVU5ERVIQBBIaChZBQ1RJVklUWV9N",
            "RVJHUl9NT05TVEVSEAUSGgoWQUNUSVZJVFlfTUVSR1JfQVJUSUNMRRAGEh8K",
            "G0FDVElWSVRZX1RJTUVfTElNSVRFRF9MRVZFTBAHEhUKEUFDVElWSVRZX0JV",
            "WV9JVEVNEAgSHQoZQUNUSVZJVFlfQlVZX01PTlRITFlfQ0FSRBAJEhgKFEFD",
            "VElWSVRZX0JVWV9NT05TVEVSEAoSHgoaQUNUSVZJVFlfQlVZX1JFQ0hBUkdF",
            "X0FSRUEQCxIXChNBQ1RJVklUWV9QUklaRV9QT09MEAwSIgoeQUNUSVZJVFlf",
            "U0VMTF9QQUNLQUdFRF9NT05TVEVSEA0q8AEKGEFDVElWSVRZX1BSSVpFX1BP",
            "T0xfVFlQRRIcChhBQ1RJVklUWV9QUklaRV9QT09MX05VTEwQABIjCh9BQ1RJ",
            "VklUWV9QUklaRV9QT09MX1BMVU5ERVJfV0lOEAESIwofQUNUSVZJVFlfUFJJ",
            "WkVfUE9PTF9NRVJHUl9MRVZFTBACEiAKHEFDVElWSVRZX1BSSVpFX1BPT0xf",
            "TUVSR1JfSUQQAxIfChtBQ1RJVklUWV9QUklaRV9QT09MX0dFVF9HRU0QBBIp",
            "CiVBQ1RJVklUWV9QUklaRV9QT09MX0NIQUxMRU5HRV9TVUNDRVNTEAUq6wEK",
            "G0FDVElWSVRZX01FUkdFX01PTlNURVJfVFlQRRIfChtBQ1RJVklUWV9NRVJH",
            "Ul9NT05TVEVSX05VTEwQABIeChpBQ1RJVklUWV9NRVJHUl9NT05TVEVSX0FM",
            "TBABEiEKHUFDVElWSVRZX01FUkdSX01PTlNURVJfQVRUQUNLEAISIgoeQUNU",
            "SVZJVFlfTUVSR1JfTU9OU1RFUl9ERUZFTlNFEAMSIgoeQUNUSVZJVFlfTUVS",
            "R1JfTU9OU1RFUl9DT0xMRUNUEAQSIAocQUNUSVZJVFlfTUVSR1JfTU9OU1RF",
            "Ul9CVUlMRBAFKv8BChVBQ1RJVklUWV9QTFVOREVSX1RZUEUSGQoVQUNUSVZJ",
            "VFlfUExVTkRFUl9OVUxMEAASIwofQUNUSVZJVFlfUExVTkRFUl9HRVRfU1RB",
            "Ul9NT1VOVBABEiQKIEFDVElWSVRZX1BMVU5ERVJfREVTVE9SWV9BUlRJQ0xF",
            "EAISHwobQUNUSVZJVFlfUExVTkRFUl9TRUFMX1BMQU5FEAMSIQodQUNUSVZJ",
            "VFlfUExVTkRFUl9LSUxMX01PTlNURVIQBBIeChpBQ1RJVklUWV9QTFVOREVS",
            "X1dJTl9NT1VOVBAFEhwKGEFDVElWSVRZX1BMVU5ERVJfQVJUSUNMRRAGYgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GameProto.Chapter_state), typeof(global::GameProto.Monster_state), typeof(global::GameProto.Condition_type), typeof(global::GameProto.Black_tech_type), typeof(global::GameProto.Platform_type), typeof(global::GameProto.MAIL_TYPE), typeof(global::GameProto.MAIL_STATUS), typeof(global::GameProto.MAIL_LEVEL), typeof(global::GameProto.Write_mail_type), typeof(global::GameProto.Treasure_box_status), typeof(global::GameProto.Grid_state), typeof(global::GameProto.MAP_OBJECT_STATUS), typeof(global::GameProto.Shop_item_state), typeof(global::GameProto.Shop_type), typeof(global::GameProto.MATERIAL_TYPE), typeof(global::GameProto.ACTIVITY_TYPE), typeof(global::GameProto.ACTIVITY_PRIZE_POOL_TYPE), typeof(global::GameProto.ACTIVITY_MERGE_MONSTER_TYPE), typeof(global::GameProto.ACTIVITY_PLUNDER_TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Login_data), global::GameProto.Login_data.Parser, new[]{ "DataSaveIndex", "AllianceId", "GameData", "EssentialData", "PlayerData", "ArmyData", "PlunderData", "VipData", "CostDiamondTotal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Game_data), global::GameProto.Game_data.Parser, new[]{ "CampData", "ChapterData", "ApData", "MonsterList", "AttackData", "SignData", "TreasureData", "ShopData", "LimitMoney", "LimitStone", "AvatarData", "VipData", "PricePoolData", "TutorialData", "CostDiamondTotal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Sign_data), global::GameProto.Sign_data.Parser, new[]{ "Id", "IsView" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Player_data), global::GameProto.Player_data.Parser, new[]{ "Name", "UrlIcon", "Icon", "VipLevel", "AllianceId", "VipScore", "ChangeNameCount", "RechargeCount", "MonthlyData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Essential_data), global::GameProto.Essential_data.Parser, new[]{ "Coin", "Stone", "Diamond", "Exp", "Level", "Trophy", "OfflineTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Map_size), global::GameProto.Map_size.Parser, new[]{ "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Camp_data), global::GameProto.Camp_data.Parser, new[]{ "Grid", "TaskData", "Star", "Score", "Floating", "MapSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Chapter_info), global::GameProto.Chapter_info.Parser, new[]{ "FinishCount", "StarCount", "FastestTime", "HighestScore", "BoxStage", "StageCount", "FinishMissionCount", "GetDiamondCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Chapter_data), global::GameProto.Chapter_data.Parser, new[]{ "Level", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.AP_data), global::GameProto.AP_data.Parser, new[]{ "Ap", "NextApTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_data), global::GameProto.Monster_data.Parser, new[]{ "Identity", "Name", "Ap", "MountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_identity_data), global::GameProto.Monster_identity_data.Parser, new[]{ "OnlyId", "MonsterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monster_id_data), global::GameProto.Monster_id_data.Parser, new[]{ "MonsterId", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Apply_data), global::GameProto.Apply_data.Parser, new[]{ "ApplyUserId", "ApplyTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Apply_list), global::GameProto.Apply_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Join_condition), global::GameProto.Join_condition.Parser, new[]{ "Type", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_base_data), global::GameProto.Alliance_base_data.Parser, new[]{ "AllianceId", "AllianceName", "Language", "AllianceIcon", "Condition", "Notice", "LeaderId", "MemberCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Donate_data), global::GameProto.Donate_data.Parser, new[]{ "Type", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Donate_data_list), global::GameProto.Donate_data_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_member_data), global::GameProto.Alliance_member_data.Parser, new[]{ "UserId", "DonateList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_member_list), global::GameProto.Alliance_member_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Black_tech_data), global::GameProto.Black_tech_data.Parser, new[]{ "Type", "Count", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_black_tech), global::GameProto.Alliance_black_tech.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_data), global::GameProto.Alliance_data.Parser, new[]{ "ApplyList", "BlackTech", "MemberList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Alliance_user_data), global::GameProto.Alliance_user_data.Parser, new[]{ "UserId", "Player", "Essential", "DonateList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Contact_us_data), global::GameProto.Contact_us_data.Parser, new[]{ "UserId", "Time", "Title", "Content", "ContactWay", "Type", "Version", "State", "DeviceModel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Notice_data), global::GameProto.Notice_data.Parser, new[]{ "Title", "Content", "Des", "Icon", "BeginTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Notice_list), global::GameProto.Notice_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Notice_data_redis), global::GameProto.Notice_data_redis.Parser, new[]{ "TitleCn", "TitleEn", "ContentCn", "ContentEn", "DesCn", "DesEn", "Icon", "BeginTime", "EndTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Mail_identity), global::GameProto.Mail_identity.Parser, new[]{ "OnlyId", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Mail_data), global::GameProto.Mail_data.Parser, new[]{ "Identity", "Type", "Time", "TitleId", "TitleCn", "TitleEn", "ContentId", "ContentCn", "ContentEn", "Status", "RewardList", "DisplayTime", "WriteType", "ExpireTime", "MonthCardId", "ContactUs", "VipLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Mail_data_list), global::GameProto.Mail_data_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Month_mail_record), global::GameProto.Month_mail_record.Parser, new[]{ "MonthCardId", "ExpireTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Mail_cache), global::GameProto.Mail_cache.Parser, new[]{ "CommonList", "SpecialList", "MonthRecord" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Write_mail), global::GameProto.Write_mail.Parser, new[]{ "UserId", "Mail" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Backstage_condition), global::GameProto.Backstage_condition.Parser, new[]{ "MinTrophy", "MaxTrophy", "MinRecharge", "MaxRecharge", "MinLevel", "MaxLevel", "MinPass", "MaxPass", "MinSign", "MaxSign", "MinVipLevel", "MaxVipLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Write_mail_request), global::GameProto.Write_mail_request.Parser, new[]{ "List", "WriteType", "Condition", "Statistics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Statistics_data), global::GameProto.Statistics_data.Parser, new[]{ "ActiveCount", "SendCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_data), global::GameProto.Plunder_data.Parser, new[]{ "ShieldBreakTime", "RankData", "HistoryList", "CoordList", "DorpSegmentTime", "RefreshTime", "FreeCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_history_list), global::GameProto.Plunder_history_list.Parser, new[]{ "HistoryInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Treasure_box_info), global::GameProto.Treasure_box_info.Parser, new[]{ "BoxId", "ConfigIndex", "Status", "FinishTime", "IsEmpty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Level_treasure_box_info), global::GameProto.Level_treasure_box_info.Parser, new[]{ "BoxList", "BoxCount", "MaxBoxCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Treasure_data), global::GameProto.Treasure_data.Parser, new[]{ "DailyBox", "LevelBox" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_history), global::GameProto.Plunder_history.Parser, new[]{ "EnemyId", "Trophy", "WinFlag", "TrophyChange", "StartTime", "PlayerData", "AIFlag", "ShowFlag", "ArmyData", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Map_data), global::GameProto.Map_data.Parser, new[]{ "Grid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Coord), global::GameProto.Coord.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Grid_data), global::GameProto.Grid_data.Parser, new[]{ "Coord", "State", "DeadLevel", "CureCount", "Terrain", "Entity", "SeallockId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Map_object_data), global::GameProto.Map_object_data.Parser, new[]{ "Id", "Name", "Hp", "LeftTapCount", "TapMaxMount", "LeftCollectCount", "CollectMaxCount", "LeftSpawnCount", "SpawnMaxCount", "RemainAmount", "ShopId", "IncludeObjects", "BuildingData", "Status", "DeleteTime", "DeadTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Resting_building_data), global::GameProto.Resting_building_data.Parser, new[]{ "Timestamp", "MonsterList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Task_data), global::GameProto.Task_data.Parser, new[]{ "Id", "IsCompleted", "FinishCount", "Reward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_army_data), global::GameProto.Plunder_army_data.Parser, new[]{ "AttackArmy", "DefenseArmy", "AttackPower", "DefenPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Plunder_rank_data), global::GameProto.Plunder_rank_data.Parser, new[]{ "DailyRank", "DailyRankPnge", "WeeklyRank", "WeeklyRankChange", "Trophy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Shop_data), global::GameProto.Shop_data.Parser, new[]{ "ListData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Shop_list_data), global::GameProto.Shop_list_data.Parser, new[]{ "ShopItem", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Shop_item_data), global::GameProto.Shop_item_data.Parser, new[]{ "Id", "BuyCount", "State", "LimitCount", "LimitTime", "ObjectId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Avatar_data), global::GameProto.Avatar_data.Parser, new[]{ "IndexData", "FrameData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Icon_data), global::GameProto.Icon_data.Parser, new[]{ "Id", "Count", "FinishFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Vip_reward_data), global::GameProto.Vip_reward_data.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Common_item), global::GameProto.Common_item.Parser, new[]{ "Id", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Vip_shop_data), global::GameProto.Vip_shop_data.Parser, new[]{ "RefreshTime", "List", "RefreshMount", "UseDiamondCardinalMount", "RefreshAllMount", "LockAnimationStartIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Vip_shop_info), global::GameProto.Vip_shop_info.Parser, new[]{ "Id", "SellFlag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Vip_data), global::GameProto.Vip_data.Parser, new[]{ "RewardData", "ShopData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Price_pool), global::GameProto.Price_pool.Parser, new[]{ "PrizepoolType", "FinishCount", "RewardDataList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_base_data), global::GameProto.Activity_base_data.Parser, new[]{ "OnlyId", "ActivityType", "NameCn", "NameEn", "DesCn", "DesEn", "EndTime", "StartTime", "RechargeCode", "Discount", "MaxCount", "VipExp", "Url", "StepId", "RewardDataList", "PrizepoolData", "RandBiologySell", "PriceCn", "PriceEn", "Status", "Price", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_data_list), global::GameProto.Activity_data_list.Parser, new[]{ "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_rand_biology_sell), global::GameProto.Activity_rand_biology_sell.Parser, new[]{ "Level", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_prize_pool_data), global::GameProto.Activity_prize_pool_data.Parser, new[]{ "PrizepoolType", "SaveTimes", "FinishCount", "MergeArticleLevel", "MergeArticleId", "MergeArticleCount", "PauseTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_merge_monster_data), global::GameProto.Activity_merge_monster_data.Parser, new[]{ "Type", "Level", "Mount", "Currentmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_merge_article_data), global::GameProto.Activity_merge_article_data.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Activity_plunder_data), global::GameProto.Activity_plunder_data.Parser, new[]{ "Type", "Mount", "StarMount", "DestoryMount", "SealMount", "KillMount", "WinMount", "PlunderArticleMount", "PlunderArticleId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Sign_in_common_data), global::GameProto.Sign_in_common_data.Parser, new[]{ "ReceiveFlag", "Reward", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Novice_welfare_data), global::GameProto.Novice_welfare_data.Parser, new[]{ "RewardList", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Daily_check_data), global::GameProto.Daily_check_data.Parser, new[]{ "RewardList", "SupplementCount", "DayOfWeek", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Daily_check_reward), global::GameProto.Daily_check_reward.Parser, new[]{ "ReceiveFlag", "Reward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Daily_check_stage_data), global::GameProto.Daily_check_stage_data.Parser, new[]{ "RewardList", "GrandTotal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Daily_check_stage_reward), global::GameProto.Daily_check_stage_reward.Parser, new[]{ "Day", "ReceiveFlag", "Reward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Daily_time_stage_data), global::GameProto.Daily_time_stage_data.Parser, new[]{ "RewardList", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Daily_time_stage_reward), global::GameProto.Daily_time_stage_reward.Parser, new[]{ "ReceiveFlag", "Rewards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monthly_card_data), global::GameProto.Monthly_card_data.Parser, new[]{ "CardInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameProto.Monthly_card_info), global::GameProto.Monthly_card_info.Parser, new[]{ "Id", "EndTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Chapter_state {
    /// <summary>
    ///未解锁
    /// </summary>
    [pbr::OriginalName("CHAPTER_STATE_LOCK")] Lock = 0,
    /// <summary>
    ///已解锁且未开始
    /// </summary>
    [pbr::OriginalName("CHAPTER_STATE_UNLOCK")] Unlock = 1,
    /// <summary>
    ///已完成
    /// </summary>
    [pbr::OriginalName("CHAPTER_STATE_FINISH")] Finish = 2,
    /// <summary>
    ///尝试中[完成和尝试状态会不停切换]
    /// </summary>
    [pbr::OriginalName("CHAPTER_STATE_TRYING")] Trying = 3,
  }

  public enum Monster_state {
    /// <summary>
    ///正在休息
    /// </summary>
    [pbr::OriginalName("MONSTER_STATE_SLEEPPING")] Sleepping = 0,
    /// <summary>
    ///正在苏醒过程中
    /// </summary>
    [pbr::OriginalName("MONSTER_STATE_WAKING")] Waking = 1,
    /// <summary>
    ///已经苏醒
    /// </summary>
    [pbr::OriginalName("MONSTER_STATE_WAKED")] Waked = 2,
  }

  /// <summary>
  ///条件类型
  /// </summary>
  public enum Condition_type {
    /// <summary>
    ///无条件
    /// </summary>
    [pbr::OriginalName("CONDITION_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///禁止加入
    /// </summary>
    [pbr::OriginalName("CONDITION_TYPE_FORBID")] Forbid = 1,
    /// <summary>
    ///奖杯数
    /// </summary>
    [pbr::OriginalName("CONDITION_TYPE_TROPHY")] Trophy = 2,
  }

  /// <summary>
  ///黑科技类型
  /// </summary>
  public enum Black_tech_type {
    [pbr::OriginalName("BLACK_TECH_TYPE_NIL")] Nil = 0,
    /// <summary>
    ///攻击类型
    /// </summary>
    [pbr::OriginalName("BLACK_TECH_TYPE_ATTACK")] Attack = 1,
    /// <summary>
    ///生命类型
    /// </summary>
    [pbr::OriginalName("BLACK_TECH_TYPE_HP")] Hp = 2,
  }

  public enum Platform_type {
    /// <summary>
    ///安卓游客登录
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_GUEST_ANDRIOD")] GuestAndriod = 0,
    /// <summary>
    ///安卓PAD
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_GUEST_PAD")] GuestPad = 1,
    /// <summary>
    ///IPHONE游客登录
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_GUEST_IPHONE")] GuestIphone = 2,
    /// <summary>
    ///IPAD游客登录
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_GUEST_IPAD")] GuestIpad = 3,
    /// <summary>
    ///facebbok
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_FACEBOOK")] Facebook = 20,
    /// <summary>
    ///twitter
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_TWITTER")] Twitter = 21,
    /// <summary>
    ///微信
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_WECHAT")] Wechat = 22,
    /// <summary>
    ///微博
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_WEIBO")] Weibo = 23,
    /// <summary>
    ///腾讯QQ
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_QQ")] Qq = 24,
    /// <summary>
    ///--- 是否增加其他平台
    /// </summary>
    [pbr::OriginalName("PLATFORM_TYPE_ACCOUNT")] Account = 50,
  }

  /// <summary>
  ///邮件的类型
  /// </summary>
  public enum MAIL_TYPE {
    /// <summary>
    ///系统邮件
    /// </summary>
    [pbr::OriginalName("MAIL_TYPE_GENERAL")] General = 0,
    /// <summary>
    ///月卡邮件
    /// </summary>
    [pbr::OriginalName("MAIL_TYPE_MONTHLYCARD")] Monthlycard = 1,
    /// <summary>
    ///活动邮件
    /// </summary>
    [pbr::OriginalName("MAIL_TYPE_ACTIVITY")] Activity = 2,
  }

  /// <summary>
  ///邮件所处的状态
  /// </summary>
  public enum MAIL_STATUS {
    /// <summary>
    ///未读
    /// </summary>
    [pbr::OriginalName("MAIL_STATUS_NOT_READ")] NotRead = 0,
    /// <summary>
    ///已读
    /// </summary>
    [pbr::OriginalName("MAIL_STATUS_READ")] Read = 1,
    /// <summary>
    ///未领取
    /// </summary>
    [pbr::OriginalName("MAIL_STATUS_NOT_RECEIVED")] NotReceived = 2,
    /// <summary>
    ///已领取
    /// </summary>
    [pbr::OriginalName("MAIL_STATUS_RECEIVED")] Received = 3,
    /// <summary>
    ///删除
    /// </summary>
    [pbr::OriginalName("MAIL_STATUS_DELETE")] Delete = 4,
  }

  /// <summary>
  ///邮件级别
  /// </summary>
  public enum MAIL_LEVEL {
    /// <summary>
    ///普通的邮件(除月卡外)
    /// </summary>
    [pbr::OriginalName("MAIL_LEVEL_COMMON")] Common = 0,
    /// <summary>
    ///特殊的邮件(月卡)
    /// </summary>
    [pbr::OriginalName("MAIL_LEVEL_SPECIAL")] Special = 1,
  }

  public enum Write_mail_type {
    /// <summary>
    ///个人邮件
    /// </summary>
    [pbr::OriginalName("WRITE_MAIL_TYPE_PERSONAL")] Personal = 0,
    /// <summary>
    ///后台个人邮件
    /// </summary>
    [pbr::OriginalName("WRITE_MAIL_TYPE_BACKSTAGE_PERSONAL")] BackstagePersonal = 1,
    /// <summary>
    ///后台群发邮件(所有活跃用户)
    /// </summary>
    [pbr::OriginalName("WRITE_MAIL_TYPE_BACKSTAGE_GROUP")] BackstageGroup = 4,
    /// <summary>
    ///后台条件邮件(所有活跃用户)
    /// </summary>
    [pbr::OriginalName("WRITE_MAIL_TYPE_BACKSTAGE_CONDITION")] BackstageCondition = 8,
  }

  /// <summary>
  ///宝箱状态
  /// </summary>
  public enum Treasure_box_status {
    /// <summary>
    ///废弃
    /// </summary>
    [pbr::OriginalName("TREASURE_BOX_STATUS_NIL")] Nil = 0,
    /// <summary>
    ///锁定 关卡宝箱获得之后即为该状态
    /// </summary>
    [pbr::OriginalName("TREASURE_BOX_STATUS_LOCK")] Lock = 1,
    /// <summary>
    ///玩家点击了解锁
    /// </summary>
    [pbr::OriginalName("TREASURE_BOX_STATUS_WAIT")] Wait = 2,
    /// <summary>
    ///完成状态 用户点击可以打开
    /// </summary>
    [pbr::OriginalName("TREASURE_BOX_STATUS_FINISH")] Finish = 3,
  }

  public enum Grid_state {
    /// <summary>
    ///未解锁
    /// </summary>
    [pbr::OriginalName("GRID_STATE_LOCKED")] Locked = 0,
    /// <summary>
    ///解锁未治愈（包括彻底死地）
    /// </summary>
    [pbr::OriginalName("GRID_STATE_UNLOCK_AND_DEAD")] UnlockAndDead = 1,
    /// <summary>
    ///解锁并治愈
    /// </summary>
    [pbr::OriginalName("GRID_STATE_UNLOCK_AND_CURED")] UnlockAndCured = 2,
    /// <summary>
    ///付费解锁[高端区的默认状态]
    /// </summary>
    [pbr::OriginalName("GRID_STATE_PAID_UNLOCK")] PaidUnlock = 3,
  }

  public enum MAP_OBJECT_STATUS {
    /// <summary>
    ///无状态
    /// </summary>
    [pbr::OriginalName("MAP_OBJECT_STATUS_NULL")] Null = 0,
    /// <summary>
    ///正常状态
    /// </summary>
    [pbr::OriginalName("MAP_OBJECT_STATUS_NORMAl")] Normal = 1,
    /// <summary>
    ///宝箱等类的物品被锁住
    /// </summary>
    [pbr::OriginalName("MAP_OBJECT_STATUS_LOCK")] Lock = 2,
  }

  /// <summary>
  ///商品状态
  /// </summary>
  public enum Shop_item_state {
    /// <summary>
    ///未解锁
    /// </summary>
    [pbr::OriginalName("ITEM_STATE_LOCKED")] ItemStateLocked = 0,
    /// <summary>
    ///解锁未展示
    /// </summary>
    [pbr::OriginalName("ITEM_STATE_UNLOCK_BUT_NO_DISPLAY")] ItemStateUnlockButNoDisplay = 1,
    /// <summary>
    ///展示
    /// </summary>
    [pbr::OriginalName("ITEM_STATE_DISPLAY")] ItemStateDisplay = 2,
    /// <summary>
    ///卖光了
    /// </summary>
    [pbr::OriginalName("ITEM_STATE_SOLD_OUT")] ItemStateSoldOut = 3,
  }

  /// <summary>
  ///商店类型
  /// </summary>
  public enum Shop_type {
    /// <summary>
    ///默认枚举 (不发送Shop_type的时候就使用这一条)
    /// </summary>
    [pbr::OriginalName("DEFAULT_SHOP")] DefaultShop = 0,
    /// <summary>
    ///宝箱商店
    /// </summary>
    [pbr::OriginalName("CHEST_SHOP")] ChestShop = 1,
    /// <summary>
    ///蛋商店
    /// </summary>
    [pbr::OriginalName("EGGS_SHOP")] EggsShop = 2,
    /// <summary>
    ///建筑商店
    /// </summary>
    [pbr::OriginalName("BUILDING_SHOP")] BuildingShop = 3,
    /// <summary>
    ///限时商店
    /// </summary>
    [pbr::OriginalName("TIMED_SHOP")] TimedShop = 4,
    /// <summary>
    ///关卡商店
    /// </summary>
    [pbr::OriginalName("LEVEL_SHOP")] LevelShop = 5,
    /// <summary>
    ///钻石商店
    /// </summary>
    [pbr::OriginalName("DIAMOND_SHOP")] DiamondShop = 6,
  }

  /// <summary>
  ///物资类型
  /// </summary>
  public enum MATERIAL_TYPE {
    /// <summary>
    ///默认类型
    /// </summary>
    [pbr::OriginalName("MATERIAL_DEFAULT")] MaterialDefault = 0,
    /// <summary>
    ///金币
    /// </summary>
    [pbr::OriginalName("MATERIAL_MONEY")] MaterialMoney = 1,
    /// <summary>
    ///石头
    /// </summary>
    [pbr::OriginalName("MATERIAL_STONE")] MaterialStone = 2,
    /// <summary>
    ///钻石
    /// </summary>
    [pbr::OriginalName("MATERIAL_DIAMOND")] MaterialDiamond = 3,
    /// <summary>
    ///经验
    /// </summary>
    [pbr::OriginalName("MATERIAL_EXP")] MaterialExp = 4,
  }

  /// <summary>
  ///所有活动的类型
  /// </summary>
  public enum ACTIVITY_TYPE {
    [pbr::OriginalName("ACTIVITY_NULL")] ActivityNull = 0,
    /// <summary>
    ///分享活动
    /// </summary>
    [pbr::OriginalName("ACTIVITY_SHARE")] ActivityShare = 1,
    /// <summary>
    ///绑定邮箱活动
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MAIL")] ActivityMail = 2,
    /// <summary>
    ///周边活动
    /// </summary>
    [pbr::OriginalName("ACTIVITY_OUTSIDE")] ActivityOutside = 3,
    /// <summary>
    ///掠夺活动
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PLUNDER")] ActivityPlunder = 4,
    /// <summary>
    ///合成生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MERGR_MONSTER")] ActivityMergrMonster = 5,
    /// <summary>
    ///合成物品
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MERGR_ARTICLE")] ActivityMergrArticle = 6,
    /// <summary>
    ///限时挑战关卡
    /// </summary>
    [pbr::OriginalName("ACTIVITY_TIME_LIMITED_LEVEL")] ActivityTimeLimitedLevel = 7,
    /// <summary>
    ///购买游戏内物品(包括宝石不包括生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_BUY_ITEM")] ActivityBuyItem = 8,
    /// <summary>
    ///购买商店月卡
    /// </summary>
    [pbr::OriginalName("ACTIVITY_BUY_MONTHLY_CARD")] ActivityBuyMonthlyCard = 9,
    /// <summary>
    ///购买生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_BUY_MONSTER")] ActivityBuyMonster = 10,
    /// <summary>
    ///购买充值区
    /// </summary>
    [pbr::OriginalName("ACTIVITY_BUY_RECHARGE_AREA")] ActivityBuyRechargeArea = 11,
    /// <summary>
    ///奖池活动
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PRIZE_POOL")] ActivityPrizePool = 12,
    /// <summary>
    ///生物打包出售活动
    /// </summary>
    [pbr::OriginalName("ACTIVITY_SELL_PACKAGED_MONSTER")] ActivitySellPackagedMonster = 13,
  }

  /// <summary>
  ///奖池活动的任务类型
  /// </summary>
  public enum ACTIVITY_PRIZE_POOL_TYPE {
    [pbr::OriginalName("ACTIVITY_PRIZE_POOL_NULL")] ActivityPrizePoolNull = 0,
    /// <summary>
    ///掠夺胜利
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PRIZE_POOL_PLUNDER_WIN")] ActivityPrizePoolPlunderWin = 1,
    /// <summary>
    ///合成x级物品或者生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PRIZE_POOL_MERGR_LEVEL")] ActivityPrizePoolMergrLevel = 2,
    /// <summary>
    ///合成物品id
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PRIZE_POOL_MERGR_ID")] ActivityPrizePoolMergrId = 3,
    /// <summary>
    ///获得宝石
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PRIZE_POOL_GET_GEM")] ActivityPrizePoolGetGem = 4,
    /// <summary>
    ///挑战关卡成功
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PRIZE_POOL_CHALLENGE_SUCCESS")] ActivityPrizePoolChallengeSuccess = 5,
  }

  /// <summary>
  ///合成生物活动行为类型（本阶段不做）
  /// </summary>
  public enum ACTIVITY_MERGE_MONSTER_TYPE {
    [pbr::OriginalName("ACTIVITY_MERGR_MONSTER_NULL")] ActivityMergrMonsterNull = 0,
    /// <summary>
    ///合成任意种类生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MERGR_MONSTER_ALL")] ActivityMergrMonsterAll = 1,
    /// <summary>
    ///合成攻击类生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MERGR_MONSTER_ATTACK")] ActivityMergrMonsterAttack = 2,
    /// <summary>
    ///合成防守型生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MERGR_MONSTER_DEFENSE")] ActivityMergrMonsterDefense = 3,
    /// <summary>
    ///合成采集类生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MERGR_MONSTER_COLLECT")] ActivityMergrMonsterCollect = 4,
    /// <summary>
    ///合成建造类生物
    /// </summary>
    [pbr::OriginalName("ACTIVITY_MERGR_MONSTER_BUILD")] ActivityMergrMonsterBuild = 5,
  }

  /// <summary>
  ///掠夺活动行为类型（本阶段不做）
  /// </summary>
  public enum ACTIVITY_PLUNDER_TYPE {
    [pbr::OriginalName("ACTIVITY_PLUNDER_NULL")] ActivityPlunderNull = 0,
    /// <summary>
    ///掠夺获得的星星数量
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PLUNDER_GET_STAR_MOUNT")] ActivityPlunderGetStarMount = 1,
    /// <summary>
    ///掠夺摧毁物体的数量
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PLUNDER_DESTORY_ARTICLE")] ActivityPlunderDestoryArticle = 2,
    /// <summary>
    ///掠夺摧毁物体的数量
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PLUNDER_SEAL_PLANE")] ActivityPlunderSealPlane = 3,
    /// <summary>
    ///掠夺杀死的龙的数量
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PLUNDER_KILL_MONSTER")] ActivityPlunderKillMonster = 4,
    /// <summary>
    ///掠夺胜利的次数
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PLUNDER_WIN_MOUNT")] ActivityPlunderWinMount = 5,
    /// <summary>
    ///掠夺物品
    /// </summary>
    [pbr::OriginalName("ACTIVITY_PLUNDER_ARTICLE")] ActivityPlunderArticle = 6,
  }

  #endregion

  #region Messages
  public sealed partial class Login_data : pb::IMessage<Login_data> {
    private static readonly pb::MessageParser<Login_data> _parser = new pb::MessageParser<Login_data>(() => new Login_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Login_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_data(Login_data other) : this() {
      dataSaveIndex_ = other.dataSaveIndex_;
      allianceId_ = other.allianceId_;
      GameData = other.gameData_ != null ? other.GameData.Clone() : null;
      EssentialData = other.essentialData_ != null ? other.EssentialData.Clone() : null;
      PlayerData = other.playerData_ != null ? other.PlayerData.Clone() : null;
      ArmyData = other.armyData_ != null ? other.ArmyData.Clone() : null;
      PlunderData = other.plunderData_ != null ? other.PlunderData.Clone() : null;
      VipData = other.vipData_ != null ? other.VipData.Clone() : null;
      costDiamondTotal_ = other.costDiamondTotal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Login_data Clone() {
      return new Login_data(this);
    }

    /// <summary>Field number for the "data_save_index" field.</summary>
    public const int DataSaveIndexFieldNumber = 1;
    private uint dataSaveIndex_;
    /// <summary>
    ///服务端已经保存的消息索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataSaveIndex {
      get { return dataSaveIndex_; }
      set {
        dataSaveIndex_ = value;
      }
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 2;
    private uint allianceId_;
    /// <summary>
    ///联盟ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "game_data" field.</summary>
    public const int GameDataFieldNumber = 3;
    private global::GameProto.Game_data gameData_;
    /// <summary>
    ///游戏数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Game_data GameData {
      get { return gameData_; }
      set {
        gameData_ = value;
      }
    }

    /// <summary>Field number for the "essential_data" field.</summary>
    public const int EssentialDataFieldNumber = 4;
    private global::GameProto.Essential_data essentialData_;
    /// <summary>
    ///重要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Essential_data EssentialData {
      get { return essentialData_; }
      set {
        essentialData_ = value;
      }
    }

    /// <summary>Field number for the "player_data" field.</summary>
    public const int PlayerDataFieldNumber = 5;
    private global::GameProto.Player_data playerData_;
    /// <summary>
    ///用户基本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    /// <summary>Field number for the "army_data" field.</summary>
    public const int ArmyDataFieldNumber = 6;
    private global::GameProto.Plunder_army_data armyData_;
    /// <summary>
    ///阵容数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_army_data ArmyData {
      get { return armyData_; }
      set {
        armyData_ = value;
      }
    }

    /// <summary>Field number for the "plunder_data" field.</summary>
    public const int PlunderDataFieldNumber = 7;
    private global::GameProto.Plunder_data plunderData_;
    /// <summary>
    ///防守历史数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_data PlunderData {
      get { return plunderData_; }
      set {
        plunderData_ = value;
      }
    }

    /// <summary>Field number for the "vip_data" field.</summary>
    public const int VipDataFieldNumber = 8;
    private global::GameProto.Vip_data vipData_;
    /// <summary>
    ///vip的需要存储的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Vip_data VipData {
      get { return vipData_; }
      set {
        vipData_ = value;
      }
    }

    /// <summary>Field number for the "cost_diamond_total" field.</summary>
    public const int CostDiamondTotalFieldNumber = 9;
    private uint costDiamondTotal_;
    /// <summary>
    ///消费钻石总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostDiamondTotal {
      get { return costDiamondTotal_; }
      set {
        costDiamondTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Login_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Login_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataSaveIndex != other.DataSaveIndex) return false;
      if (AllianceId != other.AllianceId) return false;
      if (!object.Equals(GameData, other.GameData)) return false;
      if (!object.Equals(EssentialData, other.EssentialData)) return false;
      if (!object.Equals(PlayerData, other.PlayerData)) return false;
      if (!object.Equals(ArmyData, other.ArmyData)) return false;
      if (!object.Equals(PlunderData, other.PlunderData)) return false;
      if (!object.Equals(VipData, other.VipData)) return false;
      if (CostDiamondTotal != other.CostDiamondTotal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataSaveIndex != 0) hash ^= DataSaveIndex.GetHashCode();
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (gameData_ != null) hash ^= GameData.GetHashCode();
      if (essentialData_ != null) hash ^= EssentialData.GetHashCode();
      if (playerData_ != null) hash ^= PlayerData.GetHashCode();
      if (armyData_ != null) hash ^= ArmyData.GetHashCode();
      if (plunderData_ != null) hash ^= PlunderData.GetHashCode();
      if (vipData_ != null) hash ^= VipData.GetHashCode();
      if (CostDiamondTotal != 0) hash ^= CostDiamondTotal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataSaveIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DataSaveIndex);
      }
      if (AllianceId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AllianceId);
      }
      if (gameData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GameData);
      }
      if (essentialData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EssentialData);
      }
      if (playerData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PlayerData);
      }
      if (armyData_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ArmyData);
      }
      if (plunderData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlunderData);
      }
      if (vipData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(VipData);
      }
      if (CostDiamondTotal != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CostDiamondTotal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataSaveIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DataSaveIndex);
      }
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (gameData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameData);
      }
      if (essentialData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EssentialData);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      if (armyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyData);
      }
      if (plunderData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlunderData);
      }
      if (vipData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VipData);
      }
      if (CostDiamondTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostDiamondTotal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Login_data other) {
      if (other == null) {
        return;
      }
      if (other.DataSaveIndex != 0) {
        DataSaveIndex = other.DataSaveIndex;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.gameData_ != null) {
        if (gameData_ == null) {
          gameData_ = new global::GameProto.Game_data();
        }
        GameData.MergeFrom(other.GameData);
      }
      if (other.essentialData_ != null) {
        if (essentialData_ == null) {
          essentialData_ = new global::GameProto.Essential_data();
        }
        EssentialData.MergeFrom(other.EssentialData);
      }
      if (other.playerData_ != null) {
        if (playerData_ == null) {
          playerData_ = new global::GameProto.Player_data();
        }
        PlayerData.MergeFrom(other.PlayerData);
      }
      if (other.armyData_ != null) {
        if (armyData_ == null) {
          armyData_ = new global::GameProto.Plunder_army_data();
        }
        ArmyData.MergeFrom(other.ArmyData);
      }
      if (other.plunderData_ != null) {
        if (plunderData_ == null) {
          plunderData_ = new global::GameProto.Plunder_data();
        }
        PlunderData.MergeFrom(other.PlunderData);
      }
      if (other.vipData_ != null) {
        if (vipData_ == null) {
          vipData_ = new global::GameProto.Vip_data();
        }
        VipData.MergeFrom(other.VipData);
      }
      if (other.CostDiamondTotal != 0) {
        CostDiamondTotal = other.CostDiamondTotal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataSaveIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            AllianceId = input.ReadUInt32();
            break;
          }
          case 26: {
            if (gameData_ == null) {
              gameData_ = new global::GameProto.Game_data();
            }
            input.ReadMessage(gameData_);
            break;
          }
          case 34: {
            if (essentialData_ == null) {
              essentialData_ = new global::GameProto.Essential_data();
            }
            input.ReadMessage(essentialData_);
            break;
          }
          case 42: {
            if (playerData_ == null) {
              playerData_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 50: {
            if (armyData_ == null) {
              armyData_ = new global::GameProto.Plunder_army_data();
            }
            input.ReadMessage(armyData_);
            break;
          }
          case 58: {
            if (plunderData_ == null) {
              plunderData_ = new global::GameProto.Plunder_data();
            }
            input.ReadMessage(plunderData_);
            break;
          }
          case 66: {
            if (vipData_ == null) {
              vipData_ = new global::GameProto.Vip_data();
            }
            input.ReadMessage(vipData_);
            break;
          }
          case 72: {
            CostDiamondTotal = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Game_data : pb::IMessage<Game_data> {
    private static readonly pb::MessageParser<Game_data> _parser = new pb::MessageParser<Game_data>(() => new Game_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Game_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_data(Game_data other) : this() {
      CampData = other.campData_ != null ? other.CampData.Clone() : null;
      chapterData_ = other.chapterData_.Clone();
      ApData = other.apData_ != null ? other.ApData.Clone() : null;
      monsterList_ = other.monsterList_.Clone();
      AttackData = other.attackData_ != null ? other.AttackData.Clone() : null;
      signData_ = other.signData_.Clone();
      TreasureData = other.treasureData_ != null ? other.TreasureData.Clone() : null;
      ShopData = other.shopData_ != null ? other.ShopData.Clone() : null;
      limitMoney_ = other.limitMoney_;
      limitStone_ = other.limitStone_;
      AvatarData = other.avatarData_ != null ? other.AvatarData.Clone() : null;
      VipData = other.vipData_ != null ? other.VipData.Clone() : null;
      PricePoolData = other.pricePoolData_ != null ? other.PricePoolData.Clone() : null;
      tutorialData_ = other.tutorialData_;
      costDiamondTotal_ = other.costDiamondTotal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Game_data Clone() {
      return new Game_data(this);
    }

    /// <summary>Field number for the "camp_data" field.</summary>
    public const int CampDataFieldNumber = 1;
    private global::GameProto.Camp_data campData_;
    /// <summary>
    ///大本营数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Camp_data CampData {
      get { return campData_; }
      set {
        campData_ = value;
      }
    }

    /// <summary>Field number for the "chapter_data" field.</summary>
    public const int ChapterDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Chapter_data> _repeated_chapterData_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Chapter_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Chapter_data> chapterData_ = new pbc::RepeatedField<global::GameProto.Chapter_data>();
    /// <summary>
    ///关卡数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Chapter_data> ChapterData {
      get { return chapterData_; }
    }

    /// <summary>Field number for the "ap_data" field.</summary>
    public const int ApDataFieldNumber = 3;
    private global::GameProto.AP_data apData_;
    /// <summary>
    ///体力数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.AP_data ApData {
      get { return apData_; }
      set {
        apData_ = value;
      }
    }

    /// <summary>Field number for the "monster_list" field.</summary>
    public const int MonsterListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Monster_id_data> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Monster_id_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_id_data> monsterList_ = new pbc::RepeatedField<global::GameProto.Monster_id_data>();
    /// <summary>
    ///怪物数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_id_data> MonsterList {
      get { return monsterList_; }
    }

    /// <summary>Field number for the "attack_data" field.</summary>
    public const int AttackDataFieldNumber = 5;
    private global::GameProto.Plunder_history_list attackData_;
    /// <summary>
    ///掠夺主动攻击的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_history_list AttackData {
      get { return attackData_; }
      set {
        attackData_ = value;
      }
    }

    /// <summary>Field number for the "sign_data" field.</summary>
    public const int SignDataFieldNumber = 6;
    private static readonly pb::FieldCodec<global::GameProto.Sign_data> _repeated_signData_codec
        = pb::FieldCodec.ForMessage(50, global::GameProto.Sign_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Sign_data> signData_ = new pbc::RepeatedField<global::GameProto.Sign_data>();
    /// <summary>
    ///解锁的图鉴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Sign_data> SignData {
      get { return signData_; }
    }

    /// <summary>Field number for the "treasure_data" field.</summary>
    public const int TreasureDataFieldNumber = 7;
    private global::GameProto.Treasure_data treasureData_;
    /// <summary>
    ///宝箱数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Treasure_data TreasureData {
      get { return treasureData_; }
      set {
        treasureData_ = value;
      }
    }

    /// <summary>Field number for the "shop_data" field.</summary>
    public const int ShopDataFieldNumber = 8;
    private global::GameProto.Shop_data shopData_;
    /// <summary>
    ///商店数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Shop_data ShopData {
      get { return shopData_; }
      set {
        shopData_ = value;
      }
    }

    /// <summary>Field number for the "limit_money" field.</summary>
    public const int LimitMoneyFieldNumber = 9;
    private uint limitMoney_;
    /// <summary>
    ///建筑影响金币上限 和石块要不要放到一起?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitMoney {
      get { return limitMoney_; }
      set {
        limitMoney_ = value;
      }
    }

    /// <summary>Field number for the "limit_stone" field.</summary>
    public const int LimitStoneFieldNumber = 10;
    private uint limitStone_;
    /// <summary>
    ///建筑影响石块上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitStone {
      get { return limitStone_; }
      set {
        limitStone_ = value;
      }
    }

    /// <summary>Field number for the "avatar_data" field.</summary>
    public const int AvatarDataFieldNumber = 11;
    private global::GameProto.Avatar_data avatarData_;
    /// <summary>
    ///头像和头像框数据统计
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Avatar_data AvatarData {
      get { return avatarData_; }
      set {
        avatarData_ = value;
      }
    }

    /// <summary>Field number for the "vip_data" field.</summary>
    public const int VipDataFieldNumber = 12;
    private global::GameProto.Vip_data vipData_;
    /// <summary>
    ///vip的需要存储的数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Vip_data VipData {
      get { return vipData_; }
      set {
        vipData_ = value;
      }
    }

    /// <summary>Field number for the "price_pool_data" field.</summary>
    public const int PricePoolDataFieldNumber = 13;
    private global::GameProto.Price_pool pricePoolData_;
    /// <summary>
    ///奖池要
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Price_pool PricePoolData {
      get { return pricePoolData_; }
      set {
        pricePoolData_ = value;
      }
    }

    /// <summary>Field number for the "tutorial_data" field.</summary>
    public const int TutorialDataFieldNumber = 14;
    private string tutorialData_ = "";
    /// <summary>
    ///新手引导数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TutorialData {
      get { return tutorialData_; }
      set {
        tutorialData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cost_diamond_total" field.</summary>
    public const int CostDiamondTotalFieldNumber = 15;
    private uint costDiamondTotal_;
    /// <summary>
    ///消费钻石总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CostDiamondTotal {
      get { return costDiamondTotal_; }
      set {
        costDiamondTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Game_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Game_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CampData, other.CampData)) return false;
      if(!chapterData_.Equals(other.chapterData_)) return false;
      if (!object.Equals(ApData, other.ApData)) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      if (!object.Equals(AttackData, other.AttackData)) return false;
      if(!signData_.Equals(other.signData_)) return false;
      if (!object.Equals(TreasureData, other.TreasureData)) return false;
      if (!object.Equals(ShopData, other.ShopData)) return false;
      if (LimitMoney != other.LimitMoney) return false;
      if (LimitStone != other.LimitStone) return false;
      if (!object.Equals(AvatarData, other.AvatarData)) return false;
      if (!object.Equals(VipData, other.VipData)) return false;
      if (!object.Equals(PricePoolData, other.PricePoolData)) return false;
      if (TutorialData != other.TutorialData) return false;
      if (CostDiamondTotal != other.CostDiamondTotal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (campData_ != null) hash ^= CampData.GetHashCode();
      hash ^= chapterData_.GetHashCode();
      if (apData_ != null) hash ^= ApData.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (attackData_ != null) hash ^= AttackData.GetHashCode();
      hash ^= signData_.GetHashCode();
      if (treasureData_ != null) hash ^= TreasureData.GetHashCode();
      if (shopData_ != null) hash ^= ShopData.GetHashCode();
      if (LimitMoney != 0) hash ^= LimitMoney.GetHashCode();
      if (LimitStone != 0) hash ^= LimitStone.GetHashCode();
      if (avatarData_ != null) hash ^= AvatarData.GetHashCode();
      if (vipData_ != null) hash ^= VipData.GetHashCode();
      if (pricePoolData_ != null) hash ^= PricePoolData.GetHashCode();
      if (TutorialData.Length != 0) hash ^= TutorialData.GetHashCode();
      if (CostDiamondTotal != 0) hash ^= CostDiamondTotal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (campData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CampData);
      }
      chapterData_.WriteTo(output, _repeated_chapterData_codec);
      if (apData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ApData);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (attackData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AttackData);
      }
      signData_.WriteTo(output, _repeated_signData_codec);
      if (treasureData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(TreasureData);
      }
      if (shopData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ShopData);
      }
      if (LimitMoney != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(LimitMoney);
      }
      if (LimitStone != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(LimitStone);
      }
      if (avatarData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AvatarData);
      }
      if (vipData_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(VipData);
      }
      if (pricePoolData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(PricePoolData);
      }
      if (TutorialData.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TutorialData);
      }
      if (CostDiamondTotal != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(CostDiamondTotal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (campData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CampData);
      }
      size += chapterData_.CalculateSize(_repeated_chapterData_codec);
      if (apData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApData);
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (attackData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackData);
      }
      size += signData_.CalculateSize(_repeated_signData_codec);
      if (treasureData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TreasureData);
      }
      if (shopData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopData);
      }
      if (LimitMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitMoney);
      }
      if (LimitStone != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitStone);
      }
      if (avatarData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AvatarData);
      }
      if (vipData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VipData);
      }
      if (pricePoolData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PricePoolData);
      }
      if (TutorialData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TutorialData);
      }
      if (CostDiamondTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CostDiamondTotal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Game_data other) {
      if (other == null) {
        return;
      }
      if (other.campData_ != null) {
        if (campData_ == null) {
          campData_ = new global::GameProto.Camp_data();
        }
        CampData.MergeFrom(other.CampData);
      }
      chapterData_.Add(other.chapterData_);
      if (other.apData_ != null) {
        if (apData_ == null) {
          apData_ = new global::GameProto.AP_data();
        }
        ApData.MergeFrom(other.ApData);
      }
      monsterList_.Add(other.monsterList_);
      if (other.attackData_ != null) {
        if (attackData_ == null) {
          attackData_ = new global::GameProto.Plunder_history_list();
        }
        AttackData.MergeFrom(other.AttackData);
      }
      signData_.Add(other.signData_);
      if (other.treasureData_ != null) {
        if (treasureData_ == null) {
          treasureData_ = new global::GameProto.Treasure_data();
        }
        TreasureData.MergeFrom(other.TreasureData);
      }
      if (other.shopData_ != null) {
        if (shopData_ == null) {
          shopData_ = new global::GameProto.Shop_data();
        }
        ShopData.MergeFrom(other.ShopData);
      }
      if (other.LimitMoney != 0) {
        LimitMoney = other.LimitMoney;
      }
      if (other.LimitStone != 0) {
        LimitStone = other.LimitStone;
      }
      if (other.avatarData_ != null) {
        if (avatarData_ == null) {
          avatarData_ = new global::GameProto.Avatar_data();
        }
        AvatarData.MergeFrom(other.AvatarData);
      }
      if (other.vipData_ != null) {
        if (vipData_ == null) {
          vipData_ = new global::GameProto.Vip_data();
        }
        VipData.MergeFrom(other.VipData);
      }
      if (other.pricePoolData_ != null) {
        if (pricePoolData_ == null) {
          pricePoolData_ = new global::GameProto.Price_pool();
        }
        PricePoolData.MergeFrom(other.PricePoolData);
      }
      if (other.TutorialData.Length != 0) {
        TutorialData = other.TutorialData;
      }
      if (other.CostDiamondTotal != 0) {
        CostDiamondTotal = other.CostDiamondTotal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (campData_ == null) {
              campData_ = new global::GameProto.Camp_data();
            }
            input.ReadMessage(campData_);
            break;
          }
          case 18: {
            chapterData_.AddEntriesFrom(input, _repeated_chapterData_codec);
            break;
          }
          case 26: {
            if (apData_ == null) {
              apData_ = new global::GameProto.AP_data();
            }
            input.ReadMessage(apData_);
            break;
          }
          case 34: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
          case 42: {
            if (attackData_ == null) {
              attackData_ = new global::GameProto.Plunder_history_list();
            }
            input.ReadMessage(attackData_);
            break;
          }
          case 50: {
            signData_.AddEntriesFrom(input, _repeated_signData_codec);
            break;
          }
          case 58: {
            if (treasureData_ == null) {
              treasureData_ = new global::GameProto.Treasure_data();
            }
            input.ReadMessage(treasureData_);
            break;
          }
          case 66: {
            if (shopData_ == null) {
              shopData_ = new global::GameProto.Shop_data();
            }
            input.ReadMessage(shopData_);
            break;
          }
          case 72: {
            LimitMoney = input.ReadUInt32();
            break;
          }
          case 80: {
            LimitStone = input.ReadUInt32();
            break;
          }
          case 90: {
            if (avatarData_ == null) {
              avatarData_ = new global::GameProto.Avatar_data();
            }
            input.ReadMessage(avatarData_);
            break;
          }
          case 98: {
            if (vipData_ == null) {
              vipData_ = new global::GameProto.Vip_data();
            }
            input.ReadMessage(vipData_);
            break;
          }
          case 106: {
            if (pricePoolData_ == null) {
              pricePoolData_ = new global::GameProto.Price_pool();
            }
            input.ReadMessage(pricePoolData_);
            break;
          }
          case 114: {
            TutorialData = input.ReadString();
            break;
          }
          case 120: {
            CostDiamondTotal = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Sign_data : pb::IMessage<Sign_data> {
    private static readonly pb::MessageParser<Sign_data> _parser = new pb::MessageParser<Sign_data>(() => new Sign_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sign_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sign_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sign_data(Sign_data other) : this() {
      id_ = other.id_;
      isView_ = other.isView_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sign_data Clone() {
      return new Sign_data(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///图鉴id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "is_view" field.</summary>
    public const int IsViewFieldNumber = 2;
    private bool isView_;
    /// <summary>
    ///是否查看过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsView {
      get { return isView_; }
      set {
        isView_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sign_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sign_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsView != other.IsView) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsView != false) hash ^= IsView.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (IsView != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsView);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (IsView != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sign_data other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsView != false) {
        IsView = other.IsView;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            IsView = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player_data : pb::IMessage<Player_data> {
    private static readonly pb::MessageParser<Player_data> _parser = new pb::MessageParser<Player_data>(() => new Player_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player_data(Player_data other) : this() {
      name_ = other.name_;
      urlIcon_ = other.urlIcon_;
      icon_ = other.icon_;
      vipLevel_ = other.vipLevel_;
      allianceId_ = other.allianceId_;
      vipScore_ = other.vipScore_;
      changeNameCount_ = other.changeNameCount_;
      rechargeCount_ = other.rechargeCount_;
      MonthlyData = other.monthlyData_ != null ? other.MonthlyData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player_data Clone() {
      return new Player_data(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    ///用户名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url_icon" field.</summary>
    public const int UrlIconFieldNumber = 2;
    private string urlIcon_ = "";
    /// <summary>
    ///头像链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UrlIcon {
      get { return urlIcon_; }
      set {
        urlIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 3;
    private uint icon_;
    /// <summary>
    ///头像及头像框
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 4;
    private uint vipLevel_;
    /// <summary>
    ///VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 5;
    private uint allianceId_;
    /// <summary>
    ///联盟ID需要显示VIP等级的进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "vip_score" field.</summary>
    public const int VipScoreFieldNumber = 6;
    private uint vipScore_;
    /// <summary>
    ///vip积分:需要显示VIP等级的进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VipScore {
      get { return vipScore_; }
      set {
        vipScore_ = value;
      }
    }

    /// <summary>Field number for the "change_name_count" field.</summary>
    public const int ChangeNameCountFieldNumber = 7;
    private uint changeNameCount_;
    /// <summary>
    ///修改名称的次数，需要来判断修改昵称是否收费
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChangeNameCount {
      get { return changeNameCount_; }
      set {
        changeNameCount_ = value;
      }
    }

    /// <summary>Field number for the "recharge_count" field.</summary>
    public const int RechargeCountFieldNumber = 8;
    private float rechargeCount_;
    /// <summary>
    ///TODO 逻辑未实现协议等具体待定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RechargeCount {
      get { return rechargeCount_; }
      set {
        rechargeCount_ = value;
      }
    }

    /// <summary>Field number for the "monthly_data" field.</summary>
    public const int MonthlyDataFieldNumber = 9;
    private global::GameProto.Monthly_card_data monthlyData_;
    /// <summary>
    ///月卡数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monthly_card_data MonthlyData {
      get { return monthlyData_; }
      set {
        monthlyData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (UrlIcon != other.UrlIcon) return false;
      if (Icon != other.Icon) return false;
      if (VipLevel != other.VipLevel) return false;
      if (AllianceId != other.AllianceId) return false;
      if (VipScore != other.VipScore) return false;
      if (ChangeNameCount != other.ChangeNameCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RechargeCount, other.RechargeCount)) return false;
      if (!object.Equals(MonthlyData, other.MonthlyData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (UrlIcon.Length != 0) hash ^= UrlIcon.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (VipScore != 0) hash ^= VipScore.GetHashCode();
      if (ChangeNameCount != 0) hash ^= ChangeNameCount.GetHashCode();
      if (RechargeCount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RechargeCount);
      if (monthlyData_ != null) hash ^= MonthlyData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (UrlIcon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UrlIcon);
      }
      if (Icon != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Icon);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(VipLevel);
      }
      if (AllianceId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(AllianceId);
      }
      if (VipScore != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(VipScore);
      }
      if (ChangeNameCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ChangeNameCount);
      }
      if (RechargeCount != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RechargeCount);
      }
      if (monthlyData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MonthlyData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (UrlIcon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UrlIcon);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Icon);
      }
      if (VipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipLevel);
      }
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (VipScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipScore);
      }
      if (ChangeNameCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChangeNameCount);
      }
      if (RechargeCount != 0F) {
        size += 1 + 4;
      }
      if (monthlyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MonthlyData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player_data other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.UrlIcon.Length != 0) {
        UrlIcon = other.UrlIcon;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.VipScore != 0) {
        VipScore = other.VipScore;
      }
      if (other.ChangeNameCount != 0) {
        ChangeNameCount = other.ChangeNameCount;
      }
      if (other.RechargeCount != 0F) {
        RechargeCount = other.RechargeCount;
      }
      if (other.monthlyData_ != null) {
        if (monthlyData_ == null) {
          monthlyData_ = new global::GameProto.Monthly_card_data();
        }
        MonthlyData.MergeFrom(other.MonthlyData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            UrlIcon = input.ReadString();
            break;
          }
          case 24: {
            Icon = input.ReadUInt32();
            break;
          }
          case 32: {
            VipLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            AllianceId = input.ReadUInt32();
            break;
          }
          case 48: {
            VipScore = input.ReadUInt32();
            break;
          }
          case 56: {
            ChangeNameCount = input.ReadUInt32();
            break;
          }
          case 69: {
            RechargeCount = input.ReadFloat();
            break;
          }
          case 74: {
            if (monthlyData_ == null) {
              monthlyData_ = new global::GameProto.Monthly_card_data();
            }
            input.ReadMessage(monthlyData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Essential_data : pb::IMessage<Essential_data> {
    private static readonly pb::MessageParser<Essential_data> _parser = new pb::MessageParser<Essential_data>(() => new Essential_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Essential_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Essential_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Essential_data(Essential_data other) : this() {
      coin_ = other.coin_;
      stone_ = other.stone_;
      diamond_ = other.diamond_;
      exp_ = other.exp_;
      level_ = other.level_;
      trophy_ = other.trophy_;
      offlineTime_ = other.offlineTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Essential_data Clone() {
      return new Essential_data(this);
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 1;
    private ulong coin_;
    /// <summary>
    ///金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "stone" field.</summary>
    public const int StoneFieldNumber = 2;
    private ulong stone_;
    /// <summary>
    ///石砖
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Stone {
      get { return stone_; }
      set {
        stone_ = value;
      }
    }

    /// <summary>Field number for the "diamond" field.</summary>
    public const int DiamondFieldNumber = 3;
    private ulong diamond_;
    /// <summary>
    ///钻石
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Diamond {
      get { return diamond_; }
      set {
        diamond_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 4;
    private ulong exp_;
    /// <summary>
    ///经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private uint level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "trophy" field.</summary>
    public const int TrophyFieldNumber = 6;
    private uint trophy_;
    /// <summary>
    ///竞技奖杯数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Trophy {
      get { return trophy_; }
      set {
        trophy_ = value;
      }
    }

    /// <summary>Field number for the "offline_time" field.</summary>
    public const int OfflineTimeFieldNumber = 7;
    private ulong offlineTime_;
    /// <summary>
    ///下线时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OfflineTime {
      get { return offlineTime_; }
      set {
        offlineTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Essential_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Essential_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Coin != other.Coin) return false;
      if (Stone != other.Stone) return false;
      if (Diamond != other.Diamond) return false;
      if (Exp != other.Exp) return false;
      if (Level != other.Level) return false;
      if (Trophy != other.Trophy) return false;
      if (OfflineTime != other.OfflineTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Coin != 0UL) hash ^= Coin.GetHashCode();
      if (Stone != 0UL) hash ^= Stone.GetHashCode();
      if (Diamond != 0UL) hash ^= Diamond.GetHashCode();
      if (Exp != 0UL) hash ^= Exp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Trophy != 0) hash ^= Trophy.GetHashCode();
      if (OfflineTime != 0UL) hash ^= OfflineTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Coin != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Coin);
      }
      if (Stone != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Stone);
      }
      if (Diamond != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Diamond);
      }
      if (Exp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Exp);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Level);
      }
      if (Trophy != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Trophy);
      }
      if (OfflineTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(OfflineTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Coin != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Coin);
      }
      if (Stone != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Stone);
      }
      if (Diamond != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Diamond);
      }
      if (Exp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Exp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Trophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Trophy);
      }
      if (OfflineTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OfflineTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Essential_data other) {
      if (other == null) {
        return;
      }
      if (other.Coin != 0UL) {
        Coin = other.Coin;
      }
      if (other.Stone != 0UL) {
        Stone = other.Stone;
      }
      if (other.Diamond != 0UL) {
        Diamond = other.Diamond;
      }
      if (other.Exp != 0UL) {
        Exp = other.Exp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Trophy != 0) {
        Trophy = other.Trophy;
      }
      if (other.OfflineTime != 0UL) {
        OfflineTime = other.OfflineTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Coin = input.ReadUInt64();
            break;
          }
          case 16: {
            Stone = input.ReadUInt64();
            break;
          }
          case 24: {
            Diamond = input.ReadUInt64();
            break;
          }
          case 32: {
            Exp = input.ReadUInt64();
            break;
          }
          case 40: {
            Level = input.ReadUInt32();
            break;
          }
          case 48: {
            Trophy = input.ReadUInt32();
            break;
          }
          case 56: {
            OfflineTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///地圖大小
  /// </summary>
  public sealed partial class Map_size : pb::IMessage<Map_size> {
    private static readonly pb::MessageParser<Map_size> _parser = new pb::MessageParser<Map_size>(() => new Map_size());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map_size> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_size() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_size(Map_size other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_size Clone() {
      return new Map_size(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map_size);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map_size other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map_size other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadUInt32();
            break;
          }
          case 16: {
            Height = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Camp_data : pb::IMessage<Camp_data> {
    private static readonly pb::MessageParser<Camp_data> _parser = new pb::MessageParser<Camp_data>(() => new Camp_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Camp_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camp_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camp_data(Camp_data other) : this() {
      grid_ = other.grid_.Clone();
      taskData_ = other.taskData_.Clone();
      star_ = other.star_;
      score_ = other.score_;
      floating_ = other.floating_.Clone();
      MapSize = other.mapSize_ != null ? other.MapSize.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Camp_data Clone() {
      return new Camp_data(this);
    }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Grid_data> _repeated_grid_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Grid_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Grid_data> grid_ = new pbc::RepeatedField<global::GameProto.Grid_data>();
    /// <summary>
    ///地图格子数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Grid_data> Grid {
      get { return grid_; }
    }

    /// <summary>Field number for the "task_data" field.</summary>
    public const int TaskDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Task_data> _repeated_taskData_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Task_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Task_data> taskData_ = new pbc::RepeatedField<global::GameProto.Task_data>();
    /// <summary>
    ///任务目标（星星）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Task_data> TaskData {
      get { return taskData_; }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 3;
    private uint star_;
    /// <summary>
    ///已经获得的星星数（完成的任务数量）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 4;
    private ulong score_;
    /// <summary>
    ///分数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "floating" field.</summary>
    public const int FloatingFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GameProto.Map_object_data> _repeated_floating_codec
        = pb::FieldCodec.ForMessage(42, global::GameProto.Map_object_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Map_object_data> floating_ = new pbc::RepeatedField<global::GameProto.Map_object_data>();
    /// <summary>
    ///浮空物数据[不含蒲公英，龙] 位置服务端不存储
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Map_object_data> Floating {
      get { return floating_; }
    }

    /// <summary>Field number for the "map_size" field.</summary>
    public const int MapSizeFieldNumber = 6;
    private global::GameProto.Map_size mapSize_;
    /// <summary>
    ///地图數據
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_size MapSize {
      get { return mapSize_; }
      set {
        mapSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Camp_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Camp_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!grid_.Equals(other.grid_)) return false;
      if(!taskData_.Equals(other.taskData_)) return false;
      if (Star != other.Star) return false;
      if (Score != other.Score) return false;
      if(!floating_.Equals(other.floating_)) return false;
      if (!object.Equals(MapSize, other.MapSize)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= grid_.GetHashCode();
      hash ^= taskData_.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Score != 0UL) hash ^= Score.GetHashCode();
      hash ^= floating_.GetHashCode();
      if (mapSize_ != null) hash ^= MapSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      grid_.WriteTo(output, _repeated_grid_codec);
      taskData_.WriteTo(output, _repeated_taskData_codec);
      if (Star != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Star);
      }
      if (Score != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Score);
      }
      floating_.WriteTo(output, _repeated_floating_codec);
      if (mapSize_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MapSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += grid_.CalculateSize(_repeated_grid_codec);
      size += taskData_.CalculateSize(_repeated_taskData_codec);
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Star);
      }
      if (Score != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Score);
      }
      size += floating_.CalculateSize(_repeated_floating_codec);
      if (mapSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Camp_data other) {
      if (other == null) {
        return;
      }
      grid_.Add(other.grid_);
      taskData_.Add(other.taskData_);
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Score != 0UL) {
        Score = other.Score;
      }
      floating_.Add(other.floating_);
      if (other.mapSize_ != null) {
        if (mapSize_ == null) {
          mapSize_ = new global::GameProto.Map_size();
        }
        MapSize.MergeFrom(other.MapSize);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            grid_.AddEntriesFrom(input, _repeated_grid_codec);
            break;
          }
          case 18: {
            taskData_.AddEntriesFrom(input, _repeated_taskData_codec);
            break;
          }
          case 24: {
            Star = input.ReadUInt32();
            break;
          }
          case 32: {
            Score = input.ReadUInt64();
            break;
          }
          case 42: {
            floating_.AddEntriesFrom(input, _repeated_floating_codec);
            break;
          }
          case 50: {
            if (mapSize_ == null) {
              mapSize_ = new global::GameProto.Map_size();
            }
            input.ReadMessage(mapSize_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chapter_info : pb::IMessage<Chapter_info> {
    private static readonly pb::MessageParser<Chapter_info> _parser = new pb::MessageParser<Chapter_info>(() => new Chapter_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chapter_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter_info(Chapter_info other) : this() {
      finishCount_ = other.finishCount_;
      starCount_ = other.starCount_;
      fastestTime_ = other.fastestTime_;
      highestScore_ = other.highestScore_;
      boxStage_ = other.boxStage_;
      stageCount_ = other.stageCount_;
      finishMissionCount_ = other.finishMissionCount_;
      getDiamondCount_ = other.getDiamondCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter_info Clone() {
      return new Chapter_info(this);
    }

    /// <summary>Field number for the "finish_count" field.</summary>
    public const int FinishCountFieldNumber = 1;
    private uint finishCount_;
    /// <summary>
    ///完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishCount {
      get { return finishCount_; }
      set {
        finishCount_ = value;
      }
    }

    /// <summary>Field number for the "star_count" field.</summary>
    public const int StarCountFieldNumber = 2;
    private uint starCount_;
    /// <summary>
    ///获得星数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StarCount {
      get { return starCount_; }
      set {
        starCount_ = value;
      }
    }

    /// <summary>Field number for the "fastest_time" field.</summary>
    public const int FastestTimeFieldNumber = 3;
    private uint fastestTime_;
    /// <summary>
    ///最快时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FastestTime {
      get { return fastestTime_; }
      set {
        fastestTime_ = value;
      }
    }

    /// <summary>Field number for the "highest_score" field.</summary>
    public const int HighestScoreFieldNumber = 4;
    private uint highestScore_;
    /// <summary>
    ///最高积分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HighestScore {
      get { return highestScore_; }
      set {
        highestScore_ = value;
      }
    }

    /// <summary>Field number for the "box_stage" field.</summary>
    public const int BoxStageFieldNumber = 5;
    private uint boxStage_;
    /// <summary>
    ///卢洋说是策划的口头
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxStage {
      get { return boxStage_; }
      set {
        boxStage_ = value;
      }
    }

    /// <summary>Field number for the "stage_count" field.</summary>
    public const int StageCountFieldNumber = 6;
    private uint stageCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StageCount {
      get { return stageCount_; }
      set {
        stageCount_ = value;
      }
    }

    /// <summary>Field number for the "finish_mission_count" field.</summary>
    public const int FinishMissionCountFieldNumber = 7;
    private uint finishMissionCount_;
    /// <summary>
    ///服务端需要的数据 计算进入该关卡之后的数据的累积
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishMissionCount {
      get { return finishMissionCount_; }
      set {
        finishMissionCount_ = value;
      }
    }

    /// <summary>Field number for the "get_diamond_count" field.</summary>
    public const int GetDiamondCountFieldNumber = 8;
    private uint getDiamondCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GetDiamondCount {
      get { return getDiamondCount_; }
      set {
        getDiamondCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chapter_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chapter_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FinishCount != other.FinishCount) return false;
      if (StarCount != other.StarCount) return false;
      if (FastestTime != other.FastestTime) return false;
      if (HighestScore != other.HighestScore) return false;
      if (BoxStage != other.BoxStage) return false;
      if (StageCount != other.StageCount) return false;
      if (FinishMissionCount != other.FinishMissionCount) return false;
      if (GetDiamondCount != other.GetDiamondCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FinishCount != 0) hash ^= FinishCount.GetHashCode();
      if (StarCount != 0) hash ^= StarCount.GetHashCode();
      if (FastestTime != 0) hash ^= FastestTime.GetHashCode();
      if (HighestScore != 0) hash ^= HighestScore.GetHashCode();
      if (BoxStage != 0) hash ^= BoxStage.GetHashCode();
      if (StageCount != 0) hash ^= StageCount.GetHashCode();
      if (FinishMissionCount != 0) hash ^= FinishMissionCount.GetHashCode();
      if (GetDiamondCount != 0) hash ^= GetDiamondCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FinishCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FinishCount);
      }
      if (StarCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(StarCount);
      }
      if (FastestTime != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FastestTime);
      }
      if (HighestScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(HighestScore);
      }
      if (BoxStage != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BoxStage);
      }
      if (StageCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(StageCount);
      }
      if (FinishMissionCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FinishMissionCount);
      }
      if (GetDiamondCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(GetDiamondCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FinishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishCount);
      }
      if (StarCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StarCount);
      }
      if (FastestTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FastestTime);
      }
      if (HighestScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HighestScore);
      }
      if (BoxStage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxStage);
      }
      if (StageCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StageCount);
      }
      if (FinishMissionCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishMissionCount);
      }
      if (GetDiamondCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GetDiamondCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chapter_info other) {
      if (other == null) {
        return;
      }
      if (other.FinishCount != 0) {
        FinishCount = other.FinishCount;
      }
      if (other.StarCount != 0) {
        StarCount = other.StarCount;
      }
      if (other.FastestTime != 0) {
        FastestTime = other.FastestTime;
      }
      if (other.HighestScore != 0) {
        HighestScore = other.HighestScore;
      }
      if (other.BoxStage != 0) {
        BoxStage = other.BoxStage;
      }
      if (other.StageCount != 0) {
        StageCount = other.StageCount;
      }
      if (other.FinishMissionCount != 0) {
        FinishMissionCount = other.FinishMissionCount;
      }
      if (other.GetDiamondCount != 0) {
        GetDiamondCount = other.GetDiamondCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FinishCount = input.ReadUInt32();
            break;
          }
          case 16: {
            StarCount = input.ReadUInt32();
            break;
          }
          case 24: {
            FastestTime = input.ReadUInt32();
            break;
          }
          case 32: {
            HighestScore = input.ReadUInt32();
            break;
          }
          case 40: {
            BoxStage = input.ReadUInt32();
            break;
          }
          case 48: {
            StageCount = input.ReadUInt32();
            break;
          }
          case 56: {
            FinishMissionCount = input.ReadUInt32();
            break;
          }
          case 64: {
            GetDiamondCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chapter_data : pb::IMessage<Chapter_data> {
    private static readonly pb::MessageParser<Chapter_data> _parser = new pb::MessageParser<Chapter_data>(() => new Chapter_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chapter_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter_data(Chapter_data other) : this() {
      level_ = other.level_;
      Info = other.info_ != null ? other.Info.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chapter_data Clone() {
      return new Chapter_data(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::GameProto.Chapter_info info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Chapter_info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chapter_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chapter_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chapter_data other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::GameProto.Chapter_info();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::GameProto.Chapter_info();
            }
            input.ReadMessage(info_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AP_data : pb::IMessage<AP_data> {
    private static readonly pb::MessageParser<AP_data> _parser = new pb::MessageParser<AP_data>(() => new AP_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AP_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AP_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AP_data(AP_data other) : this() {
      ap_ = other.ap_;
      nextApTime_ = other.nextApTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AP_data Clone() {
      return new AP_data(this);
    }

    /// <summary>Field number for the "ap" field.</summary>
    public const int ApFieldNumber = 1;
    private uint ap_;
    /// <summary>
    ///用户体力（酒杯）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ap {
      get { return ap_; }
      set {
        ap_ = value;
      }
    }

    /// <summary>Field number for the "next_ap_time" field.</summary>
    public const int NextApTimeFieldNumber = 2;
    private ulong nextApTime_;
    /// <summary>
    ///下一次恢复体力的时间（时间点）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NextApTime {
      get { return nextApTime_; }
      set {
        nextApTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AP_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AP_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ap != other.Ap) return false;
      if (NextApTime != other.NextApTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ap != 0) hash ^= Ap.GetHashCode();
      if (NextApTime != 0UL) hash ^= NextApTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ap != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ap);
      }
      if (NextApTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(NextApTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ap);
      }
      if (NextApTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NextApTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AP_data other) {
      if (other == null) {
        return;
      }
      if (other.Ap != 0) {
        Ap = other.Ap;
      }
      if (other.NextApTime != 0UL) {
        NextApTime = other.NextApTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ap = input.ReadUInt32();
            break;
          }
          case 16: {
            NextApTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Monster_data : pb::IMessage<Monster_data> {
    private static readonly pb::MessageParser<Monster_data> _parser = new pb::MessageParser<Monster_data>(() => new Monster_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_data(Monster_data other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      name_ = other.name_;
      ap_ = other.ap_;
      mountId_ = other.mountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_data Clone() {
      return new Monster_data(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Monster_identity_data identity_;
    /// <summary>
    ///怪物的唯一标识数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Monster_identity_data Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///怪物名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ap" field.</summary>
    public const int ApFieldNumber = 3;
    private uint ap_;
    /// <summary>
    ///剩余行动点数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ap {
      get { return ap_; }
      set {
        ap_ = value;
      }
    }

    /// <summary>Field number for the "mount_id" field.</summary>
    public const int MountIdFieldNumber = 4;
    private uint mountId_;
    /// <summary>
    ///生物头顶的物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MountId {
      get { return mountId_; }
      set {
        mountId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if (Name != other.Name) return false;
      if (Ap != other.Ap) return false;
      if (MountId != other.MountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Ap != 0) hash ^= Ap.GetHashCode();
      if (MountId != 0) hash ^= MountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Ap != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Ap);
      }
      if (MountId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Ap != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ap);
      }
      if (MountId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_data other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Monster_identity_data();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Ap != 0) {
        Ap = other.Ap;
      }
      if (other.MountId != 0) {
        MountId = other.MountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Monster_identity_data();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Ap = input.ReadUInt32();
            break;
          }
          case 32: {
            MountId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///龙的唯一标识数据
  /// </summary>
  public sealed partial class Monster_identity_data : pb::IMessage<Monster_identity_data> {
    private static readonly pb::MessageParser<Monster_identity_data> _parser = new pb::MessageParser<Monster_identity_data>(() => new Monster_identity_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_identity_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_identity_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_identity_data(Monster_identity_data other) : this() {
      onlyId_ = other.onlyId_;
      monsterId_ = other.monsterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_identity_data Clone() {
      return new Monster_identity_data(this);
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private uint onlyId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 2;
    private uint monsterId_;
    /// <summary>
    ///怪物id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_identity_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_identity_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (MonsterId != other.MonsterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlyId);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MonsterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_identity_data other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt32();
            break;
          }
          case 16: {
            MonsterId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///当前id龙数据
  /// </summary>
  public sealed partial class Monster_id_data : pb::IMessage<Monster_id_data> {
    private static readonly pb::MessageParser<Monster_id_data> _parser = new pb::MessageParser<Monster_id_data>(() => new Monster_id_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monster_id_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_id_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_id_data(Monster_id_data other) : this() {
      monsterId_ = other.monsterId_;
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monster_id_data Clone() {
      return new Monster_id_data(this);
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 1;
    private uint monsterId_;
    /// <summary>
    ///monster_id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Monster_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_data> list_ = new pbc::RepeatedField<global::GameProto.Monster_data>();
    /// <summary>
    ///当前ID所有的龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monster_id_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monster_id_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonsterId != other.MonsterId) return false;
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonsterId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MonsterId);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonsterId);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monster_id_data other) {
      if (other == null) {
        return;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonsterId = input.ReadUInt32();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请数据
  /// </summary>
  public sealed partial class Apply_data : pb::IMessage<Apply_data> {
    private static readonly pb::MessageParser<Apply_data> _parser = new pb::MessageParser<Apply_data>(() => new Apply_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Apply_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_data(Apply_data other) : this() {
      applyUserId_ = other.applyUserId_;
      applyTime_ = other.applyTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_data Clone() {
      return new Apply_data(this);
    }

    /// <summary>Field number for the "apply_user_id" field.</summary>
    public const int ApplyUserIdFieldNumber = 1;
    private uint applyUserId_;
    /// <summary>
    ///申请id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ApplyUserId {
      get { return applyUserId_; }
      set {
        applyUserId_ = value;
      }
    }

    /// <summary>Field number for the "apply_time" field.</summary>
    public const int ApplyTimeFieldNumber = 2;
    private ulong applyTime_;
    /// <summary>
    ///申请时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ApplyTime {
      get { return applyTime_; }
      set {
        applyTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Apply_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Apply_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplyUserId != other.ApplyUserId) return false;
      if (ApplyTime != other.ApplyTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ApplyUserId != 0) hash ^= ApplyUserId.GetHashCode();
      if (ApplyTime != 0UL) hash ^= ApplyTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyUserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ApplyUserId);
      }
      if (ApplyTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ApplyTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ApplyUserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ApplyUserId);
      }
      if (ApplyTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ApplyTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Apply_data other) {
      if (other == null) {
        return;
      }
      if (other.ApplyUserId != 0) {
        ApplyUserId = other.ApplyUserId;
      }
      if (other.ApplyTime != 0UL) {
        ApplyTime = other.ApplyTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ApplyUserId = input.ReadUInt32();
            break;
          }
          case 16: {
            ApplyTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///申请列表
  /// </summary>
  public sealed partial class Apply_list : pb::IMessage<Apply_list> {
    private static readonly pb::MessageParser<Apply_list> _parser = new pb::MessageParser<Apply_list>(() => new Apply_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Apply_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_list(Apply_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Apply_list Clone() {
      return new Apply_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Apply_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Apply_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Apply_data> list_ = new pbc::RepeatedField<global::GameProto.Apply_data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Apply_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Apply_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Apply_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Apply_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///加入条件
  /// </summary>
  public sealed partial class Join_condition : pb::IMessage<Join_condition> {
    private static readonly pb::MessageParser<Join_condition> _parser = new pb::MessageParser<Join_condition>(() => new Join_condition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Join_condition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_condition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_condition(Join_condition other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Join_condition Clone() {
      return new Join_condition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Condition_type type_ = 0;
    /// <summary>
    ///条件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Condition_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private uint value_;
    /// <summary>
    ///限定值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Join_condition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Join_condition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Join_condition other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Condition_type) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟基础数据
  /// </summary>
  public sealed partial class Alliance_base_data : pb::IMessage<Alliance_base_data> {
    private static readonly pb::MessageParser<Alliance_base_data> _parser = new pb::MessageParser<Alliance_base_data>(() => new Alliance_base_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_base_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_base_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_base_data(Alliance_base_data other) : this() {
      allianceId_ = other.allianceId_;
      allianceName_ = other.allianceName_;
      language_ = other.language_;
      allianceIcon_ = other.allianceIcon_;
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
      notice_ = other.notice_;
      leaderId_ = other.leaderId_;
      memberCount_ = other.memberCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_base_data Clone() {
      return new Alliance_base_data(this);
    }

    /// <summary>Field number for the "alliance_id" field.</summary>
    public const int AllianceIdFieldNumber = 1;
    private uint allianceId_;
    /// <summary>
    ///联盟id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceId {
      get { return allianceId_; }
      set {
        allianceId_ = value;
      }
    }

    /// <summary>Field number for the "alliance_name" field.</summary>
    public const int AllianceNameFieldNumber = 2;
    private string allianceName_ = "";
    /// <summary>
    ///联盟名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AllianceName {
      get { return allianceName_; }
      set {
        allianceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private string language_ = "";
    /// <summary>
    ///语言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alliance_icon" field.</summary>
    public const int AllianceIconFieldNumber = 4;
    private uint allianceIcon_;
    /// <summary>
    ///联盟icon
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AllianceIcon {
      get { return allianceIcon_; }
      set {
        allianceIcon_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 5;
    private global::GameProto.Join_condition condition_;
    /// <summary>
    ///加入条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Join_condition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "notice" field.</summary>
    public const int NoticeFieldNumber = 6;
    private string notice_ = "";
    /// <summary>
    ///公告
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Notice {
      get { return notice_; }
      set {
        notice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leader_id" field.</summary>
    public const int LeaderIdFieldNumber = 7;
    private uint leaderId_;
    /// <summary>
    ///盟主
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LeaderId {
      get { return leaderId_; }
      set {
        leaderId_ = value;
      }
    }

    /// <summary>Field number for the "member_count" field.</summary>
    public const int MemberCountFieldNumber = 8;
    private uint memberCount_;
    /// <summary>
    ///成员数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MemberCount {
      get { return memberCount_; }
      set {
        memberCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_base_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_base_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AllianceId != other.AllianceId) return false;
      if (AllianceName != other.AllianceName) return false;
      if (Language != other.Language) return false;
      if (AllianceIcon != other.AllianceIcon) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      if (Notice != other.Notice) return false;
      if (LeaderId != other.LeaderId) return false;
      if (MemberCount != other.MemberCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AllianceId != 0) hash ^= AllianceId.GetHashCode();
      if (AllianceName.Length != 0) hash ^= AllianceName.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (AllianceIcon != 0) hash ^= AllianceIcon.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (Notice.Length != 0) hash ^= Notice.GetHashCode();
      if (LeaderId != 0) hash ^= LeaderId.GetHashCode();
      if (MemberCount != 0) hash ^= MemberCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AllianceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(AllianceId);
      }
      if (AllianceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AllianceName);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Language);
      }
      if (AllianceIcon != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AllianceIcon);
      }
      if (condition_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Condition);
      }
      if (Notice.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Notice);
      }
      if (LeaderId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LeaderId);
      }
      if (MemberCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MemberCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AllianceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceId);
      }
      if (AllianceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AllianceName);
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (AllianceIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AllianceIcon);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (Notice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Notice);
      }
      if (LeaderId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LeaderId);
      }
      if (MemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MemberCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_base_data other) {
      if (other == null) {
        return;
      }
      if (other.AllianceId != 0) {
        AllianceId = other.AllianceId;
      }
      if (other.AllianceName.Length != 0) {
        AllianceName = other.AllianceName;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.AllianceIcon != 0) {
        AllianceIcon = other.AllianceIcon;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::GameProto.Join_condition();
        }
        Condition.MergeFrom(other.Condition);
      }
      if (other.Notice.Length != 0) {
        Notice = other.Notice;
      }
      if (other.LeaderId != 0) {
        LeaderId = other.LeaderId;
      }
      if (other.MemberCount != 0) {
        MemberCount = other.MemberCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AllianceId = input.ReadUInt32();
            break;
          }
          case 18: {
            AllianceName = input.ReadString();
            break;
          }
          case 26: {
            Language = input.ReadString();
            break;
          }
          case 32: {
            AllianceIcon = input.ReadUInt32();
            break;
          }
          case 42: {
            if (condition_ == null) {
              condition_ = new global::GameProto.Join_condition();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 50: {
            Notice = input.ReadString();
            break;
          }
          case 56: {
            LeaderId = input.ReadUInt32();
            break;
          }
          case 64: {
            MemberCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///捐献数据
  /// </summary>
  public sealed partial class Donate_data : pb::IMessage<Donate_data> {
    private static readonly pb::MessageParser<Donate_data> _parser = new pb::MessageParser<Donate_data>(() => new Donate_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Donate_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donate_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donate_data(Donate_data other) : this() {
      type_ = other.type_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donate_data Clone() {
      return new Donate_data(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Black_tech_type type_ = 0;
    /// <summary>
    ///黑科技类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Black_tech_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private ulong count_;
    /// <summary>
    ///捐献数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Donate_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Donate_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Count != 0UL) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Count != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Donate_data other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Black_tech_type) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///捐献列表
  /// </summary>
  public sealed partial class Donate_data_list : pb::IMessage<Donate_data_list> {
    private static readonly pb::MessageParser<Donate_data_list> _parser = new pb::MessageParser<Donate_data_list>(() => new Donate_data_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Donate_data_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donate_data_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donate_data_list(Donate_data_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donate_data_list Clone() {
      return new Donate_data_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Donate_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Donate_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Donate_data> list_ = new pbc::RepeatedField<global::GameProto.Donate_data>();
    /// <summary>
    ///列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Donate_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Donate_data_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Donate_data_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Donate_data_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟成员数据/DB使用
  /// </summary>
  public sealed partial class Alliance_member_data : pb::IMessage<Alliance_member_data> {
    private static readonly pb::MessageParser<Alliance_member_data> _parser = new pb::MessageParser<Alliance_member_data>(() => new Alliance_member_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_member_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_member_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_member_data(Alliance_member_data other) : this() {
      userId_ = other.userId_;
      DonateList = other.donateList_ != null ? other.DonateList.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_member_data Clone() {
      return new Alliance_member_data(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "donate_list" field.</summary>
    public const int DonateListFieldNumber = 2;
    private global::GameProto.Donate_data_list donateList_;
    /// <summary>
    ///捐献列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Donate_data_list DonateList {
      get { return donateList_; }
      set {
        donateList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_member_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_member_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(DonateList, other.DonateList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (donateList_ != null) hash ^= DonateList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (donateList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DonateList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (donateList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DonateList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_member_data other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.donateList_ != null) {
        if (donateList_ == null) {
          donateList_ = new global::GameProto.Donate_data_list();
        }
        DonateList.MergeFrom(other.DonateList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (donateList_ == null) {
              donateList_ = new global::GameProto.Donate_data_list();
            }
            input.ReadMessage(donateList_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟成员列表/redis使用
  /// </summary>
  public sealed partial class Alliance_member_list : pb::IMessage<Alliance_member_list> {
    private static readonly pb::MessageParser<Alliance_member_list> _parser = new pb::MessageParser<Alliance_member_list>(() => new Alliance_member_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_member_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_member_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_member_list(Alliance_member_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_member_list Clone() {
      return new Alliance_member_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Alliance_member_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Alliance_member_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Alliance_member_data> list_ = new pbc::RepeatedField<global::GameProto.Alliance_member_data>();
    /// <summary>
    ///成员列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Alliance_member_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_member_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_member_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_member_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///黑科技数据
  /// </summary>
  public sealed partial class Black_tech_data : pb::IMessage<Black_tech_data> {
    private static readonly pb::MessageParser<Black_tech_data> _parser = new pb::MessageParser<Black_tech_data>(() => new Black_tech_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Black_tech_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Black_tech_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Black_tech_data(Black_tech_data other) : this() {
      type_ = other.type_;
      count_ = other.count_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Black_tech_data Clone() {
      return new Black_tech_data(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.Black_tech_type type_ = 0;
    /// <summary>
    ///科技类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Black_tech_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private ulong count_;
    /// <summary>
    ///捐献总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private uint level_;
    /// <summary>
    ///科技等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Black_tech_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Black_tech_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Count != other.Count) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Count != 0UL) hash ^= Count.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Count != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Count);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Count != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Count);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Black_tech_data other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Count != 0UL) {
        Count = other.Count;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.Black_tech_type) input.ReadEnum();
            break;
          }
          case 16: {
            Count = input.ReadUInt64();
            break;
          }
          case 24: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟黑科技
  /// </summary>
  public sealed partial class Alliance_black_tech : pb::IMessage<Alliance_black_tech> {
    private static readonly pb::MessageParser<Alliance_black_tech> _parser = new pb::MessageParser<Alliance_black_tech>(() => new Alliance_black_tech());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_black_tech> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_black_tech() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_black_tech(Alliance_black_tech other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_black_tech Clone() {
      return new Alliance_black_tech(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Black_tech_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Black_tech_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Black_tech_data> list_ = new pbc::RepeatedField<global::GameProto.Black_tech_data>();
    /// <summary>
    ///黑科技列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Black_tech_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_black_tech);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_black_tech other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_black_tech other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟数据缓存/DB存盘使用
  /// </summary>
  public sealed partial class Alliance_data : pb::IMessage<Alliance_data> {
    private static readonly pb::MessageParser<Alliance_data> _parser = new pb::MessageParser<Alliance_data>(() => new Alliance_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data(Alliance_data other) : this() {
      ApplyList = other.applyList_ != null ? other.ApplyList.Clone() : null;
      BlackTech = other.blackTech_ != null ? other.BlackTech.Clone() : null;
      MemberList = other.memberList_ != null ? other.MemberList.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_data Clone() {
      return new Alliance_data(this);
    }

    /// <summary>Field number for the "apply_list" field.</summary>
    public const int ApplyListFieldNumber = 1;
    private global::GameProto.Apply_list applyList_;
    /// <summary>
    ///申请列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Apply_list ApplyList {
      get { return applyList_; }
      set {
        applyList_ = value;
      }
    }

    /// <summary>Field number for the "black_tech" field.</summary>
    public const int BlackTechFieldNumber = 2;
    private global::GameProto.Alliance_black_tech blackTech_;
    /// <summary>
    ///联盟黑科技
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_black_tech BlackTech {
      get { return blackTech_; }
      set {
        blackTech_ = value;
      }
    }

    /// <summary>Field number for the "member_list" field.</summary>
    public const int MemberListFieldNumber = 3;
    private global::GameProto.Alliance_member_list memberList_;
    /// <summary>
    ///联盟成员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Alliance_member_list MemberList {
      get { return memberList_; }
      set {
        memberList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ApplyList, other.ApplyList)) return false;
      if (!object.Equals(BlackTech, other.BlackTech)) return false;
      if (!object.Equals(MemberList, other.MemberList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (applyList_ != null) hash ^= ApplyList.GetHashCode();
      if (blackTech_ != null) hash ^= BlackTech.GetHashCode();
      if (memberList_ != null) hash ^= MemberList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (applyList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ApplyList);
      }
      if (blackTech_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BlackTech);
      }
      if (memberList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MemberList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (applyList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ApplyList);
      }
      if (blackTech_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlackTech);
      }
      if (memberList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_data other) {
      if (other == null) {
        return;
      }
      if (other.applyList_ != null) {
        if (applyList_ == null) {
          applyList_ = new global::GameProto.Apply_list();
        }
        ApplyList.MergeFrom(other.ApplyList);
      }
      if (other.blackTech_ != null) {
        if (blackTech_ == null) {
          blackTech_ = new global::GameProto.Alliance_black_tech();
        }
        BlackTech.MergeFrom(other.BlackTech);
      }
      if (other.memberList_ != null) {
        if (memberList_ == null) {
          memberList_ = new global::GameProto.Alliance_member_list();
        }
        MemberList.MergeFrom(other.MemberList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (applyList_ == null) {
              applyList_ = new global::GameProto.Apply_list();
            }
            input.ReadMessage(applyList_);
            break;
          }
          case 18: {
            if (blackTech_ == null) {
              blackTech_ = new global::GameProto.Alliance_black_tech();
            }
            input.ReadMessage(blackTech_);
            break;
          }
          case 26: {
            if (memberList_ == null) {
              memberList_ = new global::GameProto.Alliance_member_list();
            }
            input.ReadMessage(memberList_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///联盟内玩家详细数据
  /// </summary>
  public sealed partial class Alliance_user_data : pb::IMessage<Alliance_user_data> {
    private static readonly pb::MessageParser<Alliance_user_data> _parser = new pb::MessageParser<Alliance_user_data>(() => new Alliance_user_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alliance_user_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_user_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_user_data(Alliance_user_data other) : this() {
      userId_ = other.userId_;
      Player = other.player_ != null ? other.Player.Clone() : null;
      Essential = other.essential_ != null ? other.Essential.Clone() : null;
      DonateList = other.donateList_ != null ? other.DonateList.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alliance_user_data Clone() {
      return new Alliance_user_data(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 2;
    private global::GameProto.Player_data player_;
    /// <summary>
    ///玩家基础数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "essential" field.</summary>
    public const int EssentialFieldNumber = 3;
    private global::GameProto.Essential_data essential_;
    /// <summary>
    ///玩家重要数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Essential_data Essential {
      get { return essential_; }
      set {
        essential_ = value;
      }
    }

    /// <summary>Field number for the "donate_list" field.</summary>
    public const int DonateListFieldNumber = 4;
    private global::GameProto.Donate_data_list donateList_;
    /// <summary>
    ///捐献列表（计算捐献值)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Donate_data_list DonateList {
      get { return donateList_; }
      set {
        donateList_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alliance_user_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alliance_user_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Player, other.Player)) return false;
      if (!object.Equals(Essential, other.Essential)) return false;
      if (!object.Equals(DonateList, other.DonateList)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (player_ != null) hash ^= Player.GetHashCode();
      if (essential_ != null) hash ^= Essential.GetHashCode();
      if (donateList_ != null) hash ^= DonateList.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (player_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Player);
      }
      if (essential_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Essential);
      }
      if (donateList_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DonateList);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (player_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
      }
      if (essential_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Essential);
      }
      if (donateList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DonateList);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alliance_user_data other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.player_ != null) {
        if (player_ == null) {
          player_ = new global::GameProto.Player_data();
        }
        Player.MergeFrom(other.Player);
      }
      if (other.essential_ != null) {
        if (essential_ == null) {
          essential_ = new global::GameProto.Essential_data();
        }
        Essential.MergeFrom(other.Essential);
      }
      if (other.donateList_ != null) {
        if (donateList_ == null) {
          donateList_ = new global::GameProto.Donate_data_list();
        }
        DonateList.MergeFrom(other.DonateList);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (player_ == null) {
              player_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(player_);
            break;
          }
          case 26: {
            if (essential_ == null) {
              essential_ = new global::GameProto.Essential_data();
            }
            input.ReadMessage(essential_);
            break;
          }
          case 34: {
            if (donateList_ == null) {
              donateList_ = new global::GameProto.Donate_data_list();
            }
            input.ReadMessage(donateList_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///反馈数据
  /// </summary>
  public sealed partial class Contact_us_data : pb::IMessage<Contact_us_data> {
    private static readonly pb::MessageParser<Contact_us_data> _parser = new pb::MessageParser<Contact_us_data>(() => new Contact_us_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Contact_us_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contact_us_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contact_us_data(Contact_us_data other) : this() {
      userId_ = other.userId_;
      time_ = other.time_;
      title_ = other.title_;
      content_ = other.content_;
      contactWay_ = other.contactWay_;
      type_ = other.type_;
      version_ = other.version_;
      state_ = other.state_;
      deviceModel_ = other.deviceModel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Contact_us_data Clone() {
      return new Contact_us_data(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    /// <summary>
    ///时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 3;
    private string title_ = "";
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 4;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contact_way" field.</summary>
    public const int ContactWayFieldNumber = 5;
    private string contactWay_ = "";
    /// <summary>
    ///联系方式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactWay {
      get { return contactWay_; }
      set {
        contactWay_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private global::GameProto.Platform_type type_ = 0;
    /// <summary>
    ///类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Platform_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private string version_ = "";
    /// <summary>
    ///版本 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private uint state_;
    /// <summary>
    ///状态 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "device_model" field.</summary>
    public const int DeviceModelFieldNumber = 9;
    private string deviceModel_ = "";
    /// <summary>
    ///设备型号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceModel {
      get { return deviceModel_; }
      set {
        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Contact_us_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Contact_us_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Time != other.Time) return false;
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (ContactWay != other.ContactWay) return false;
      if (Type != other.Type) return false;
      if (Version != other.Version) return false;
      if (State != other.State) return false;
      if (DeviceModel != other.DeviceModel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (ContactWay.Length != 0) hash ^= ContactWay.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Content);
      }
      if (ContactWay.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ContactWay);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Type);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Version);
      }
      if (State != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(State);
      }
      if (DeviceModel.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DeviceModel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (ContactWay.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactWay);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(State);
      }
      if (DeviceModel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Contact_us_data other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.ContactWay.Length != 0) {
        ContactWay = other.ContactWay;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.DeviceModel.Length != 0) {
        DeviceModel = other.DeviceModel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
          case 26: {
            Title = input.ReadString();
            break;
          }
          case 34: {
            Content = input.ReadString();
            break;
          }
          case 42: {
            ContactWay = input.ReadString();
            break;
          }
          case 48: {
            type_ = (global::GameProto.Platform_type) input.ReadEnum();
            break;
          }
          case 58: {
            Version = input.ReadString();
            break;
          }
          case 64: {
            State = input.ReadUInt32();
            break;
          }
          case 74: {
            DeviceModel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告数据
  /// </summary>
  public sealed partial class Notice_data : pb::IMessage<Notice_data> {
    private static readonly pb::MessageParser<Notice_data> _parser = new pb::MessageParser<Notice_data>(() => new Notice_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notice_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data(Notice_data other) : this() {
      title_ = other.title_;
      content_ = other.content_;
      des_ = other.des_;
      icon_ = other.icon_;
      beginTime_ = other.beginTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data Clone() {
      return new Notice_data(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    /// <summary>
    ///标题
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    /// <summary>
    ///内容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des" field.</summary>
    public const int DesFieldNumber = 3;
    private string des_ = "";
    /// <summary>
    ///描述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Des {
      get { return des_; }
      set {
        des_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private string icon_ = "";
    /// <summary>
    ///图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 5;
    private ulong beginTime_;
    /// <summary>
    ///公告时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notice_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notice_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Content != other.Content) return false;
      if (Des != other.Des) return false;
      if (Icon != other.Icon) return false;
      if (BeginTime != other.BeginTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (Des.Length != 0) hash ^= Des.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (BeginTime != 0UL) hash ^= BeginTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (Des.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Des);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (BeginTime != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BeginTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (Des.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Des);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (BeginTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notice_data other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.Des.Length != 0) {
        Des = other.Des;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.BeginTime != 0UL) {
        BeginTime = other.BeginTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            Des = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
          case 40: {
            BeginTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告列表
  /// </summary>
  public sealed partial class Notice_list : pb::IMessage<Notice_list> {
    private static readonly pb::MessageParser<Notice_list> _parser = new pb::MessageParser<Notice_list>(() => new Notice_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notice_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_list(Notice_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_list Clone() {
      return new Notice_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Notice_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Notice_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Notice_data> list_ = new pbc::RepeatedField<global::GameProto.Notice_data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Notice_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notice_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notice_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notice_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///公告缓冲数据
  /// </summary>
  public sealed partial class Notice_data_redis : pb::IMessage<Notice_data_redis> {
    private static readonly pb::MessageParser<Notice_data_redis> _parser = new pb::MessageParser<Notice_data_redis>(() => new Notice_data_redis());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notice_data_redis> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_redis() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_redis(Notice_data_redis other) : this() {
      titleCn_ = other.titleCn_;
      titleEn_ = other.titleEn_;
      contentCn_ = other.contentCn_;
      contentEn_ = other.contentEn_;
      desCn_ = other.desCn_;
      desEn_ = other.desEn_;
      icon_ = other.icon_;
      beginTime_ = other.beginTime_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notice_data_redis Clone() {
      return new Notice_data_redis(this);
    }

    /// <summary>Field number for the "title_cn" field.</summary>
    public const int TitleCnFieldNumber = 1;
    private string titleCn_ = "";
    /// <summary>
    ///标题cn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleCn {
      get { return titleCn_; }
      set {
        titleCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title_en" field.</summary>
    public const int TitleEnFieldNumber = 2;
    private string titleEn_ = "";
    /// <summary>
    ///标题en
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleEn {
      get { return titleEn_; }
      set {
        titleEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_cn" field.</summary>
    public const int ContentCnFieldNumber = 3;
    private string contentCn_ = "";
    /// <summary>
    ///内容cn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentCn {
      get { return contentCn_; }
      set {
        contentCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_en" field.</summary>
    public const int ContentEnFieldNumber = 4;
    private string contentEn_ = "";
    /// <summary>
    ///内容en
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentEn {
      get { return contentEn_; }
      set {
        contentEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des_cn" field.</summary>
    public const int DesCnFieldNumber = 5;
    private string desCn_ = "";
    /// <summary>
    ///描述cn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesCn {
      get { return desCn_; }
      set {
        desCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des_en" field.</summary>
    public const int DesEnFieldNumber = 6;
    private string desEn_ = "";
    /// <summary>
    ///描述en
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesEn {
      get { return desEn_; }
      set {
        desEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 7;
    private string icon_ = "";
    /// <summary>
    ///图标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "begin_time" field.</summary>
    public const int BeginTimeFieldNumber = 8;
    private ulong beginTime_;
    /// <summary>
    ///公告时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeginTime {
      get { return beginTime_; }
      set {
        beginTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 9;
    private ulong endTime_;
    /// <summary>
    ///公告结束显示的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notice_data_redis);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notice_data_redis other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TitleCn != other.TitleCn) return false;
      if (TitleEn != other.TitleEn) return false;
      if (ContentCn != other.ContentCn) return false;
      if (ContentEn != other.ContentEn) return false;
      if (DesCn != other.DesCn) return false;
      if (DesEn != other.DesEn) return false;
      if (Icon != other.Icon) return false;
      if (BeginTime != other.BeginTime) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TitleCn.Length != 0) hash ^= TitleCn.GetHashCode();
      if (TitleEn.Length != 0) hash ^= TitleEn.GetHashCode();
      if (ContentCn.Length != 0) hash ^= ContentCn.GetHashCode();
      if (ContentEn.Length != 0) hash ^= ContentEn.GetHashCode();
      if (DesCn.Length != 0) hash ^= DesCn.GetHashCode();
      if (DesEn.Length != 0) hash ^= DesEn.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (BeginTime != 0UL) hash ^= BeginTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TitleCn.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TitleCn);
      }
      if (TitleEn.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TitleEn);
      }
      if (ContentCn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContentCn);
      }
      if (ContentEn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ContentEn);
      }
      if (DesCn.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DesCn);
      }
      if (DesEn.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DesEn);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Icon);
      }
      if (BeginTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(BeginTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TitleCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleCn);
      }
      if (TitleEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleEn);
      }
      if (ContentCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentCn);
      }
      if (ContentEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentEn);
      }
      if (DesCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesCn);
      }
      if (DesEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesEn);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (BeginTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notice_data_redis other) {
      if (other == null) {
        return;
      }
      if (other.TitleCn.Length != 0) {
        TitleCn = other.TitleCn;
      }
      if (other.TitleEn.Length != 0) {
        TitleEn = other.TitleEn;
      }
      if (other.ContentCn.Length != 0) {
        ContentCn = other.ContentCn;
      }
      if (other.ContentEn.Length != 0) {
        ContentEn = other.ContentEn;
      }
      if (other.DesCn.Length != 0) {
        DesCn = other.DesCn;
      }
      if (other.DesEn.Length != 0) {
        DesEn = other.DesEn;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.BeginTime != 0UL) {
        BeginTime = other.BeginTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TitleCn = input.ReadString();
            break;
          }
          case 18: {
            TitleEn = input.ReadString();
            break;
          }
          case 26: {
            ContentCn = input.ReadString();
            break;
          }
          case 34: {
            ContentEn = input.ReadString();
            break;
          }
          case 42: {
            DesCn = input.ReadString();
            break;
          }
          case 50: {
            DesEn = input.ReadString();
            break;
          }
          case 58: {
            Icon = input.ReadString();
            break;
          }
          case 64: {
            BeginTime = input.ReadUInt64();
            break;
          }
          case 72: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mail_identity : pb::IMessage<Mail_identity> {
    private static readonly pb::MessageParser<Mail_identity> _parser = new pb::MessageParser<Mail_identity>(() => new Mail_identity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mail_identity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_identity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_identity(Mail_identity other) : this() {
      onlyId_ = other.onlyId_;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_identity Clone() {
      return new Mail_identity(this);
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private uint onlyId_;
    /// <summary>
    ///唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private global::GameProto.MAIL_LEVEL level_ = 0;
    /// <summary>
    ///邮件级别
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.MAIL_LEVEL Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mail_identity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mail_identity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlyId);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mail_identity other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt32();
            break;
          }
          case 16: {
            level_ = (global::GameProto.MAIL_LEVEL) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邮件数据data
  /// </summary>
  public sealed partial class Mail_data : pb::IMessage<Mail_data> {
    private static readonly pb::MessageParser<Mail_data> _parser = new pb::MessageParser<Mail_data>(() => new Mail_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mail_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_data(Mail_data other) : this() {
      Identity = other.identity_ != null ? other.Identity.Clone() : null;
      type_ = other.type_;
      time_ = other.time_;
      titleId_ = other.titleId_;
      titleCn_ = other.titleCn_;
      titleEn_ = other.titleEn_;
      contentId_ = other.contentId_;
      contentCn_ = other.contentCn_;
      contentEn_ = other.contentEn_;
      status_ = other.status_;
      rewardList_ = other.rewardList_.Clone();
      displayTime_ = other.displayTime_;
      writeType_ = other.writeType_;
      expireTime_ = other.expireTime_;
      monthCardId_ = other.monthCardId_;
      ContactUs = other.contactUs_ != null ? other.ContactUs.Clone() : null;
      vipLevel_ = other.vipLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_data Clone() {
      return new Mail_data(this);
    }

    /// <summary>Field number for the "identity" field.</summary>
    public const int IdentityFieldNumber = 1;
    private global::GameProto.Mail_identity identity_;
    /// <summary>
    ///邮件身份id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_identity Identity {
      get { return identity_; }
      set {
        identity_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::GameProto.MAIL_TYPE type_ = 0;
    /// <summary>
    ///邮件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.MAIL_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private ulong time_;
    /// <summary>
    ///邮件发送时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "title_id" field.</summary>
    public const int TitleIdFieldNumber = 4;
    private ulong titleId_;
    /// <summary>
    ///邮件标题id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TitleId {
      get { return titleId_; }
      set {
        titleId_ = value;
      }
    }

    /// <summary>Field number for the "title_cn" field.</summary>
    public const int TitleCnFieldNumber = 5;
    private string titleCn_ = "";
    /// <summary>
    ///标题cn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleCn {
      get { return titleCn_; }
      set {
        titleCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title_en" field.</summary>
    public const int TitleEnFieldNumber = 6;
    private string titleEn_ = "";
    /// <summary>
    ///标题en
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TitleEn {
      get { return titleEn_; }
      set {
        titleEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_id" field.</summary>
    public const int ContentIdFieldNumber = 7;
    private ulong contentId_;
    /// <summary>
    ///邮件内容id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ContentId {
      get { return contentId_; }
      set {
        contentId_ = value;
      }
    }

    /// <summary>Field number for the "content_cn" field.</summary>
    public const int ContentCnFieldNumber = 8;
    private string contentCn_ = "";
    /// <summary>
    ///邮件内容cn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentCn {
      get { return contentCn_; }
      set {
        contentCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content_en" field.</summary>
    public const int ContentEnFieldNumber = 9;
    private string contentEn_ = "";
    /// <summary>
    ///邮件内容en
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContentEn {
      get { return contentEn_; }
      set {
        contentEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::GameProto.MAIL_STATUS status_ = 0;
    /// <summary>
    ///邮件的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.MAIL_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 11;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(90, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> rewardList_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "display_time" field.</summary>
    public const int DisplayTimeFieldNumber = 12;
    private ulong displayTime_;
    /// <summary>
    ///特殊邮件(比如月卡）会一次生成30份邮件，每天下发一份，通过下发时间来判断是否下发给客户端
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DisplayTime {
      get { return displayTime_; }
      set {
        displayTime_ = value;
      }
    }

    /// <summary>Field number for the "write_type" field.</summary>
    public const int WriteTypeFieldNumber = 13;
    private global::GameProto.Write_mail_type writeType_ = 0;
    /// <summary>
    ///后台发送的个人邮件需要查看具体状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Write_mail_type WriteType {
      get { return writeType_; }
      set {
        writeType_ = value;
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 14;
    private ulong expireTime_;
    /// <summary>
    ///---expire_time此字段作废---
    /// 因为涉及到续月卡问题，导致计算剩余时间错误，Month_mail_record来计算
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    /// <summary>Field number for the "month_card_id" field.</summary>
    public const int MonthCardIdFieldNumber = 15;
    private uint monthCardId_;
    /// <summary>
    ///月卡类型id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonthCardId {
      get { return monthCardId_; }
      set {
        monthCardId_ = value;
      }
    }

    /// <summary>Field number for the "contact_us" field.</summary>
    public const int ContactUsFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Any contactUs_;
    /// <summary>
    ///联系我们数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any ContactUs {
      get { return contactUs_; }
      set {
        contactUs_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 17;
    private uint vipLevel_;
    /// <summary>
    ///vip等级（发送邮件时的vip等级）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mail_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mail_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Identity, other.Identity)) return false;
      if (Type != other.Type) return false;
      if (Time != other.Time) return false;
      if (TitleId != other.TitleId) return false;
      if (TitleCn != other.TitleCn) return false;
      if (TitleEn != other.TitleEn) return false;
      if (ContentId != other.ContentId) return false;
      if (ContentCn != other.ContentCn) return false;
      if (ContentEn != other.ContentEn) return false;
      if (Status != other.Status) return false;
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (DisplayTime != other.DisplayTime) return false;
      if (WriteType != other.WriteType) return false;
      if (ExpireTime != other.ExpireTime) return false;
      if (MonthCardId != other.MonthCardId) return false;
      if (!object.Equals(ContactUs, other.ContactUs)) return false;
      if (VipLevel != other.VipLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (identity_ != null) hash ^= Identity.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      if (TitleId != 0UL) hash ^= TitleId.GetHashCode();
      if (TitleCn.Length != 0) hash ^= TitleCn.GetHashCode();
      if (TitleEn.Length != 0) hash ^= TitleEn.GetHashCode();
      if (ContentId != 0UL) hash ^= ContentId.GetHashCode();
      if (ContentCn.Length != 0) hash ^= ContentCn.GetHashCode();
      if (ContentEn.Length != 0) hash ^= ContentEn.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= rewardList_.GetHashCode();
      if (DisplayTime != 0UL) hash ^= DisplayTime.GetHashCode();
      if (WriteType != 0) hash ^= WriteType.GetHashCode();
      if (ExpireTime != 0UL) hash ^= ExpireTime.GetHashCode();
      if (MonthCardId != 0) hash ^= MonthCardId.GetHashCode();
      if (contactUs_ != null) hash ^= ContactUs.GetHashCode();
      if (VipLevel != 0) hash ^= VipLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (identity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Identity);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Time != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Time);
      }
      if (TitleId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TitleId);
      }
      if (TitleCn.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TitleCn);
      }
      if (TitleEn.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TitleEn);
      }
      if (ContentId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ContentId);
      }
      if (ContentCn.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ContentCn);
      }
      if (ContentEn.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ContentEn);
      }
      if (Status != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (DisplayTime != 0UL) {
        output.WriteRawTag(96);
        output.WriteUInt64(DisplayTime);
      }
      if (WriteType != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) WriteType);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(ExpireTime);
      }
      if (MonthCardId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(MonthCardId);
      }
      if (contactUs_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ContactUs);
      }
      if (VipLevel != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(VipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (identity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identity);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      if (TitleId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TitleId);
      }
      if (TitleCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleCn);
      }
      if (TitleEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TitleEn);
      }
      if (ContentId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ContentId);
      }
      if (ContentCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentCn);
      }
      if (ContentEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContentEn);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (DisplayTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DisplayTime);
      }
      if (WriteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WriteType);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (MonthCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonthCardId);
      }
      if (contactUs_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContactUs);
      }
      if (VipLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(VipLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mail_data other) {
      if (other == null) {
        return;
      }
      if (other.identity_ != null) {
        if (identity_ == null) {
          identity_ = new global::GameProto.Mail_identity();
        }
        Identity.MergeFrom(other.Identity);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
      if (other.TitleId != 0UL) {
        TitleId = other.TitleId;
      }
      if (other.TitleCn.Length != 0) {
        TitleCn = other.TitleCn;
      }
      if (other.TitleEn.Length != 0) {
        TitleEn = other.TitleEn;
      }
      if (other.ContentId != 0UL) {
        ContentId = other.ContentId;
      }
      if (other.ContentCn.Length != 0) {
        ContentCn = other.ContentCn;
      }
      if (other.ContentEn.Length != 0) {
        ContentEn = other.ContentEn;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      rewardList_.Add(other.rewardList_);
      if (other.DisplayTime != 0UL) {
        DisplayTime = other.DisplayTime;
      }
      if (other.WriteType != 0) {
        WriteType = other.WriteType;
      }
      if (other.ExpireTime != 0UL) {
        ExpireTime = other.ExpireTime;
      }
      if (other.MonthCardId != 0) {
        MonthCardId = other.MonthCardId;
      }
      if (other.contactUs_ != null) {
        if (contactUs_ == null) {
          contactUs_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        ContactUs.MergeFrom(other.ContactUs);
      }
      if (other.VipLevel != 0) {
        VipLevel = other.VipLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (identity_ == null) {
              identity_ = new global::GameProto.Mail_identity();
            }
            input.ReadMessage(identity_);
            break;
          }
          case 16: {
            type_ = (global::GameProto.MAIL_TYPE) input.ReadEnum();
            break;
          }
          case 24: {
            Time = input.ReadUInt64();
            break;
          }
          case 32: {
            TitleId = input.ReadUInt64();
            break;
          }
          case 42: {
            TitleCn = input.ReadString();
            break;
          }
          case 50: {
            TitleEn = input.ReadString();
            break;
          }
          case 56: {
            ContentId = input.ReadUInt64();
            break;
          }
          case 66: {
            ContentCn = input.ReadString();
            break;
          }
          case 74: {
            ContentEn = input.ReadString();
            break;
          }
          case 80: {
            status_ = (global::GameProto.MAIL_STATUS) input.ReadEnum();
            break;
          }
          case 90: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 96: {
            DisplayTime = input.ReadUInt64();
            break;
          }
          case 104: {
            writeType_ = (global::GameProto.Write_mail_type) input.ReadEnum();
            break;
          }
          case 112: {
            ExpireTime = input.ReadUInt64();
            break;
          }
          case 120: {
            MonthCardId = input.ReadUInt32();
            break;
          }
          case 130: {
            if (contactUs_ == null) {
              contactUs_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(contactUs_);
            break;
          }
          case 136: {
            VipLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邮件列表
  /// </summary>
  public sealed partial class Mail_data_list : pb::IMessage<Mail_data_list> {
    private static readonly pb::MessageParser<Mail_data_list> _parser = new pb::MessageParser<Mail_data_list>(() => new Mail_data_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mail_data_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_data_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_data_list(Mail_data_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_data_list Clone() {
      return new Mail_data_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Mail_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Mail_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Mail_data> list_ = new pbc::RepeatedField<global::GameProto.Mail_data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Mail_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mail_data_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mail_data_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mail_data_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///特殊邮件
  /// </summary>
  public sealed partial class Month_mail_record : pb::IMessage<Month_mail_record> {
    private static readonly pb::MessageParser<Month_mail_record> _parser = new pb::MessageParser<Month_mail_record>(() => new Month_mail_record());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Month_mail_record> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Month_mail_record() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Month_mail_record(Month_mail_record other) : this() {
      monthCardId_ = other.monthCardId_;
      expireTime_ = other.expireTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Month_mail_record Clone() {
      return new Month_mail_record(this);
    }

    /// <summary>Field number for the "month_card_id" field.</summary>
    public const int MonthCardIdFieldNumber = 1;
    private uint monthCardId_;
    /// <summary>
    ///月卡id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MonthCardId {
      get { return monthCardId_; }
      set {
        monthCardId_ = value;
      }
    }

    /// <summary>Field number for the "expire_time" field.</summary>
    public const int ExpireTimeFieldNumber = 2;
    private ulong expireTime_;
    /// <summary>
    ///过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ExpireTime {
      get { return expireTime_; }
      set {
        expireTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Month_mail_record);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Month_mail_record other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MonthCardId != other.MonthCardId) return false;
      if (ExpireTime != other.ExpireTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MonthCardId != 0) hash ^= MonthCardId.GetHashCode();
      if (ExpireTime != 0UL) hash ^= ExpireTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MonthCardId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MonthCardId);
      }
      if (ExpireTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ExpireTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MonthCardId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MonthCardId);
      }
      if (ExpireTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpireTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Month_mail_record other) {
      if (other == null) {
        return;
      }
      if (other.MonthCardId != 0) {
        MonthCardId = other.MonthCardId;
      }
      if (other.ExpireTime != 0UL) {
        ExpireTime = other.ExpireTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MonthCardId = input.ReadUInt32();
            break;
          }
          case 16: {
            ExpireTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///邮件缓冲列表db和redis使用
  /// </summary>
  public sealed partial class Mail_cache : pb::IMessage<Mail_cache> {
    private static readonly pb::MessageParser<Mail_cache> _parser = new pb::MessageParser<Mail_cache>(() => new Mail_cache());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mail_cache> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_cache() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_cache(Mail_cache other) : this() {
      CommonList = other.commonList_ != null ? other.CommonList.Clone() : null;
      SpecialList = other.specialList_ != null ? other.SpecialList.Clone() : null;
      monthRecord_ = other.monthRecord_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mail_cache Clone() {
      return new Mail_cache(this);
    }

    /// <summary>Field number for the "common_list" field.</summary>
    public const int CommonListFieldNumber = 1;
    private global::GameProto.Mail_data_list commonList_;
    /// <summary>
    ///普通邮件（数量限定）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_data_list CommonList {
      get { return commonList_; }
      set {
        commonList_ = value;
      }
    }

    /// <summary>Field number for the "special_list" field.</summary>
    public const int SpecialListFieldNumber = 2;
    private global::GameProto.Mail_data_list specialList_;
    /// <summary>
    ///特殊邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_data_list SpecialList {
      get { return specialList_; }
      set {
        specialList_ = value;
      }
    }

    /// <summary>Field number for the "month_record" field.</summary>
    public const int MonthRecordFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Month_mail_record> _repeated_monthRecord_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Month_mail_record.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Month_mail_record> monthRecord_ = new pbc::RepeatedField<global::GameProto.Month_mail_record>();
    /// <summary>
    ///月卡记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Month_mail_record> MonthRecord {
      get { return monthRecord_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mail_cache);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mail_cache other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommonList, other.CommonList)) return false;
      if (!object.Equals(SpecialList, other.SpecialList)) return false;
      if(!monthRecord_.Equals(other.monthRecord_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commonList_ != null) hash ^= CommonList.GetHashCode();
      if (specialList_ != null) hash ^= SpecialList.GetHashCode();
      hash ^= monthRecord_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commonList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommonList);
      }
      if (specialList_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SpecialList);
      }
      monthRecord_.WriteTo(output, _repeated_monthRecord_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commonList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommonList);
      }
      if (specialList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpecialList);
      }
      size += monthRecord_.CalculateSize(_repeated_monthRecord_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mail_cache other) {
      if (other == null) {
        return;
      }
      if (other.commonList_ != null) {
        if (commonList_ == null) {
          commonList_ = new global::GameProto.Mail_data_list();
        }
        CommonList.MergeFrom(other.CommonList);
      }
      if (other.specialList_ != null) {
        if (specialList_ == null) {
          specialList_ = new global::GameProto.Mail_data_list();
        }
        SpecialList.MergeFrom(other.SpecialList);
      }
      monthRecord_.Add(other.monthRecord_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (commonList_ == null) {
              commonList_ = new global::GameProto.Mail_data_list();
            }
            input.ReadMessage(commonList_);
            break;
          }
          case 18: {
            if (specialList_ == null) {
              specialList_ = new global::GameProto.Mail_data_list();
            }
            input.ReadMessage(specialList_);
            break;
          }
          case 26: {
            monthRecord_.AddEntriesFrom(input, _repeated_monthRecord_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///common请求添加邮件注意：
  ///level:(默认0)  需要[type] [title_id] [content_id] [reward_list] 
  /// </summary>
  public sealed partial class Write_mail : pb::IMessage<Write_mail> {
    private static readonly pb::MessageParser<Write_mail> _parser = new pb::MessageParser<Write_mail>(() => new Write_mail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Write_mail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write_mail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write_mail(Write_mail other) : this() {
      userId_ = other.userId_;
      Mail = other.mail_ != null ? other.Mail.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write_mail Clone() {
      return new Write_mail(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private uint userId_;
    /// <summary>
    ///玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "mail" field.</summary>
    public const int MailFieldNumber = 2;
    private global::GameProto.Mail_data mail_;
    /// <summary>
    ///邮件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Mail_data Mail {
      get { return mail_; }
      set {
        mail_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Write_mail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Write_mail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Mail, other.Mail)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (mail_ != null) hash ^= Mail.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UserId);
      }
      if (mail_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mail);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserId);
      }
      if (mail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mail);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Write_mail other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.mail_ != null) {
        if (mail_ == null) {
          mail_ = new global::GameProto.Mail_data();
        }
        Mail.MergeFrom(other.Mail);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (mail_ == null) {
              mail_ = new global::GameProto.Mail_data();
            }
            input.ReadMessage(mail_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Backstage_condition : pb::IMessage<Backstage_condition> {
    private static readonly pb::MessageParser<Backstage_condition> _parser = new pb::MessageParser<Backstage_condition>(() => new Backstage_condition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Backstage_condition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backstage_condition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backstage_condition(Backstage_condition other) : this() {
      minTrophy_ = other.minTrophy_;
      maxTrophy_ = other.maxTrophy_;
      minRecharge_ = other.minRecharge_;
      maxRecharge_ = other.maxRecharge_;
      minLevel_ = other.minLevel_;
      maxLevel_ = other.maxLevel_;
      minPass_ = other.minPass_;
      maxPass_ = other.maxPass_;
      minSign_ = other.minSign_;
      maxSign_ = other.maxSign_;
      minVipLevel_ = other.minVipLevel_;
      maxVipLevel_ = other.maxVipLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Backstage_condition Clone() {
      return new Backstage_condition(this);
    }

    /// <summary>Field number for the "min_trophy" field.</summary>
    public const int MinTrophyFieldNumber = 1;
    private uint minTrophy_;
    /// <summary>
    ///最小奖杯数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinTrophy {
      get { return minTrophy_; }
      set {
        minTrophy_ = value;
      }
    }

    /// <summary>Field number for the "max_trophy" field.</summary>
    public const int MaxTrophyFieldNumber = 2;
    private uint maxTrophy_;
    /// <summary>
    ///最大奖杯数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTrophy {
      get { return maxTrophy_; }
      set {
        maxTrophy_ = value;
      }
    }

    /// <summary>Field number for the "min_recharge" field.</summary>
    public const int MinRechargeFieldNumber = 3;
    private uint minRecharge_;
    /// <summary>
    ///最小充值数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinRecharge {
      get { return minRecharge_; }
      set {
        minRecharge_ = value;
      }
    }

    /// <summary>Field number for the "max_recharge" field.</summary>
    public const int MaxRechargeFieldNumber = 4;
    private uint maxRecharge_;
    /// <summary>
    ///最大充值数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxRecharge {
      get { return maxRecharge_; }
      set {
        maxRecharge_ = value;
      }
    }

    /// <summary>Field number for the "min_level" field.</summary>
    public const int MinLevelFieldNumber = 5;
    private uint minLevel_;
    /// <summary>
    ///最小等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 6;
    private uint maxLevel_;
    /// <summary>
    ///最大等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "min_pass" field.</summary>
    public const int MinPassFieldNumber = 7;
    private uint minPass_;
    /// <summary>
    ///最小关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinPass {
      get { return minPass_; }
      set {
        minPass_ = value;
      }
    }

    /// <summary>Field number for the "max_pass" field.</summary>
    public const int MaxPassFieldNumber = 8;
    private uint maxPass_;
    /// <summary>
    ///最大关卡
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxPass {
      get { return maxPass_; }
      set {
        maxPass_ = value;
      }
    }

    /// <summary>Field number for the "min_sign" field.</summary>
    public const int MinSignFieldNumber = 9;
    private uint minSign_;
    /// <summary>
    ///最小图鉴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinSign {
      get { return minSign_; }
      set {
        minSign_ = value;
      }
    }

    /// <summary>Field number for the "max_sign" field.</summary>
    public const int MaxSignFieldNumber = 10;
    private uint maxSign_;
    /// <summary>
    ///最大图鉴
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxSign {
      get { return maxSign_; }
      set {
        maxSign_ = value;
      }
    }

    /// <summary>Field number for the "min_vip_level" field.</summary>
    public const int MinVipLevelFieldNumber = 11;
    private uint minVipLevel_;
    /// <summary>
    ///最小VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinVipLevel {
      get { return minVipLevel_; }
      set {
        minVipLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_vip_level" field.</summary>
    public const int MaxVipLevelFieldNumber = 12;
    private uint maxVipLevel_;
    /// <summary>
    ///最大VIP等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxVipLevel {
      get { return maxVipLevel_; }
      set {
        maxVipLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Backstage_condition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Backstage_condition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinTrophy != other.MinTrophy) return false;
      if (MaxTrophy != other.MaxTrophy) return false;
      if (MinRecharge != other.MinRecharge) return false;
      if (MaxRecharge != other.MaxRecharge) return false;
      if (MinLevel != other.MinLevel) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (MinPass != other.MinPass) return false;
      if (MaxPass != other.MaxPass) return false;
      if (MinSign != other.MinSign) return false;
      if (MaxSign != other.MaxSign) return false;
      if (MinVipLevel != other.MinVipLevel) return false;
      if (MaxVipLevel != other.MaxVipLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinTrophy != 0) hash ^= MinTrophy.GetHashCode();
      if (MaxTrophy != 0) hash ^= MaxTrophy.GetHashCode();
      if (MinRecharge != 0) hash ^= MinRecharge.GetHashCode();
      if (MaxRecharge != 0) hash ^= MaxRecharge.GetHashCode();
      if (MinLevel != 0) hash ^= MinLevel.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (MinPass != 0) hash ^= MinPass.GetHashCode();
      if (MaxPass != 0) hash ^= MaxPass.GetHashCode();
      if (MinSign != 0) hash ^= MinSign.GetHashCode();
      if (MaxSign != 0) hash ^= MaxSign.GetHashCode();
      if (MinVipLevel != 0) hash ^= MinVipLevel.GetHashCode();
      if (MaxVipLevel != 0) hash ^= MaxVipLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinTrophy != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MinTrophy);
      }
      if (MaxTrophy != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaxTrophy);
      }
      if (MinRecharge != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MinRecharge);
      }
      if (MaxRecharge != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxRecharge);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxLevel);
      }
      if (MinPass != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(MinPass);
      }
      if (MaxPass != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MaxPass);
      }
      if (MinSign != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MinSign);
      }
      if (MaxSign != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MaxSign);
      }
      if (MinVipLevel != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(MinVipLevel);
      }
      if (MaxVipLevel != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxVipLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinTrophy);
      }
      if (MaxTrophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTrophy);
      }
      if (MinRecharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinRecharge);
      }
      if (MaxRecharge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxRecharge);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinLevel);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLevel);
      }
      if (MinPass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinPass);
      }
      if (MaxPass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxPass);
      }
      if (MinSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinSign);
      }
      if (MaxSign != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxSign);
      }
      if (MinVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinVipLevel);
      }
      if (MaxVipLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxVipLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Backstage_condition other) {
      if (other == null) {
        return;
      }
      if (other.MinTrophy != 0) {
        MinTrophy = other.MinTrophy;
      }
      if (other.MaxTrophy != 0) {
        MaxTrophy = other.MaxTrophy;
      }
      if (other.MinRecharge != 0) {
        MinRecharge = other.MinRecharge;
      }
      if (other.MaxRecharge != 0) {
        MaxRecharge = other.MaxRecharge;
      }
      if (other.MinLevel != 0) {
        MinLevel = other.MinLevel;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.MinPass != 0) {
        MinPass = other.MinPass;
      }
      if (other.MaxPass != 0) {
        MaxPass = other.MaxPass;
      }
      if (other.MinSign != 0) {
        MinSign = other.MinSign;
      }
      if (other.MaxSign != 0) {
        MaxSign = other.MaxSign;
      }
      if (other.MinVipLevel != 0) {
        MinVipLevel = other.MinVipLevel;
      }
      if (other.MaxVipLevel != 0) {
        MaxVipLevel = other.MaxVipLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinTrophy = input.ReadUInt32();
            break;
          }
          case 16: {
            MaxTrophy = input.ReadUInt32();
            break;
          }
          case 24: {
            MinRecharge = input.ReadUInt32();
            break;
          }
          case 32: {
            MaxRecharge = input.ReadUInt32();
            break;
          }
          case 40: {
            MinLevel = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 56: {
            MinPass = input.ReadUInt32();
            break;
          }
          case 64: {
            MaxPass = input.ReadUInt32();
            break;
          }
          case 72: {
            MinSign = input.ReadUInt32();
            break;
          }
          case 80: {
            MaxSign = input.ReadUInt32();
            break;
          }
          case 88: {
            MinVipLevel = input.ReadUInt32();
            break;
          }
          case 96: {
            MaxVipLevel = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器请求写邮件
  /// </summary>
  public sealed partial class Write_mail_request : pb::IMessage<Write_mail_request> {
    private static readonly pb::MessageParser<Write_mail_request> _parser = new pb::MessageParser<Write_mail_request>(() => new Write_mail_request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Write_mail_request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write_mail_request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write_mail_request(Write_mail_request other) : this() {
      list_ = other.list_.Clone();
      writeType_ = other.writeType_;
      Condition = other.condition_ != null ? other.Condition.Clone() : null;
      Statistics = other.statistics_ != null ? other.Statistics.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Write_mail_request Clone() {
      return new Write_mail_request(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Write_mail> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Write_mail.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Write_mail> list_ = new pbc::RepeatedField<global::GameProto.Write_mail>();
    /// <summary>
    ///玩家邮件列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Write_mail> List {
      get { return list_; }
    }

    /// <summary>Field number for the "write_type" field.</summary>
    public const int WriteTypeFieldNumber = 2;
    private global::GameProto.Write_mail_type writeType_ = 0;
    /// <summary>
    ///后台使用
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Write_mail_type WriteType {
      get { return writeType_; }
      set {
        writeType_ = value;
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 3;
    private global::GameProto.Backstage_condition condition_;
    /// <summary>
    ///条件邮件的条件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Backstage_condition Condition {
      get { return condition_; }
      set {
        condition_ = value;
      }
    }

    /// <summary>Field number for the "statistics" field.</summary>
    public const int StatisticsFieldNumber = 4;
    private global::GameProto.Statistics_data statistics_;
    /// <summary>
    ///后台群发邮件和条件邮件需要统计数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Statistics_data Statistics {
      get { return statistics_; }
      set {
        statistics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Write_mail_request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Write_mail_request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      if (WriteType != other.WriteType) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      if (!object.Equals(Statistics, other.Statistics)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (WriteType != 0) hash ^= WriteType.GetHashCode();
      if (condition_ != null) hash ^= Condition.GetHashCode();
      if (statistics_ != null) hash ^= Statistics.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (WriteType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) WriteType);
      }
      if (condition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Condition);
      }
      if (statistics_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Statistics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (WriteType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WriteType);
      }
      if (condition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (statistics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statistics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Write_mail_request other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      if (other.WriteType != 0) {
        WriteType = other.WriteType;
      }
      if (other.condition_ != null) {
        if (condition_ == null) {
          condition_ = new global::GameProto.Backstage_condition();
        }
        Condition.MergeFrom(other.Condition);
      }
      if (other.statistics_ != null) {
        if (statistics_ == null) {
          statistics_ = new global::GameProto.Statistics_data();
        }
        Statistics.MergeFrom(other.Statistics);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 16: {
            writeType_ = (global::GameProto.Write_mail_type) input.ReadEnum();
            break;
          }
          case 26: {
            if (condition_ == null) {
              condition_ = new global::GameProto.Backstage_condition();
            }
            input.ReadMessage(condition_);
            break;
          }
          case 34: {
            if (statistics_ == null) {
              statistics_ = new global::GameProto.Statistics_data();
            }
            input.ReadMessage(statistics_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Statistics_data : pb::IMessage<Statistics_data> {
    private static readonly pb::MessageParser<Statistics_data> _parser = new pb::MessageParser<Statistics_data>(() => new Statistics_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Statistics_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistics_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistics_data(Statistics_data other) : this() {
      activeCount_ = other.activeCount_;
      sendCount_ = other.sendCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Statistics_data Clone() {
      return new Statistics_data(this);
    }

    /// <summary>Field number for the "active_count" field.</summary>
    public const int ActiveCountFieldNumber = 1;
    private uint activeCount_;
    /// <summary>
    ///活跃玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ActiveCount {
      get { return activeCount_; }
      set {
        activeCount_ = value;
      }
    }

    /// <summary>Field number for the "send_count" field.</summary>
    public const int SendCountFieldNumber = 2;
    private uint sendCount_;
    /// <summary>
    ///成功发送玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SendCount {
      get { return sendCount_; }
      set {
        sendCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Statistics_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Statistics_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveCount != other.ActiveCount) return false;
      if (SendCount != other.SendCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActiveCount != 0) hash ^= ActiveCount.GetHashCode();
      if (SendCount != 0) hash ^= SendCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveCount != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ActiveCount);
      }
      if (SendCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SendCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActiveCount);
      }
      if (SendCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SendCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Statistics_data other) {
      if (other == null) {
        return;
      }
      if (other.ActiveCount != 0) {
        ActiveCount = other.ActiveCount;
      }
      if (other.SendCount != 0) {
        SendCount = other.SendCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActiveCount = input.ReadUInt32();
            break;
          }
          case 16: {
            SendCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Plunder_data : pb::IMessage<Plunder_data> {
    private static readonly pb::MessageParser<Plunder_data> _parser = new pb::MessageParser<Plunder_data>(() => new Plunder_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_data(Plunder_data other) : this() {
      shieldBreakTime_ = other.shieldBreakTime_;
      RankData = other.rankData_ != null ? other.RankData.Clone() : null;
      HistoryList = other.historyList_ != null ? other.HistoryList.Clone() : null;
      coordList_ = other.coordList_.Clone();
      dorpSegmentTime_ = other.dorpSegmentTime_;
      refreshTime_ = other.refreshTime_;
      freeCount_ = other.freeCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_data Clone() {
      return new Plunder_data(this);
    }

    /// <summary>Field number for the "shield_break_time" field.</summary>
    public const int ShieldBreakTimeFieldNumber = 1;
    private ulong shieldBreakTime_;
    /// <summary>
    ///保护失效时间（时间点）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ShieldBreakTime {
      get { return shieldBreakTime_; }
      set {
        shieldBreakTime_ = value;
      }
    }

    /// <summary>Field number for the "rank_data" field.</summary>
    public const int RankDataFieldNumber = 2;
    private global::GameProto.Plunder_rank_data rankData_;
    /// <summary>
    ///排名数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_rank_data RankData {
      get { return rankData_; }
      set {
        rankData_ = value;
      }
    }

    /// <summary>Field number for the "history_list" field.</summary>
    public const int HistoryListFieldNumber = 3;
    private global::GameProto.Plunder_history_list historyList_;
    /// <summary>
    ///历史记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_history_list HistoryList {
      get { return historyList_; }
      set {
        historyList_ = value;
      }
    }

    /// <summary>Field number for the "coord_list" field.</summary>
    public const int CoordListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameProto.Coord> _repeated_coordList_codec
        = pb::FieldCodec.ForMessage(34, global::GameProto.Coord.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Coord> coordList_ = new pbc::RepeatedField<global::GameProto.Coord>();
    /// <summary>
    ///掠夺被封印的土地
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Coord> CoordList {
      get { return coordList_; }
    }

    /// <summary>Field number for the "dorp_segment_time" field.</summary>
    public const int DorpSegmentTimeFieldNumber = 5;
    private ulong dorpSegmentTime_;
    /// <summary>
    ///上一次的掉段处理的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DorpSegmentTime {
      get { return dorpSegmentTime_; }
      set {
        dorpSegmentTime_ = value;
      }
    }

    /// <summary>Field number for the "refresh_time" field.</summary>
    public const int RefreshTimeFieldNumber = 6;
    private ulong refreshTime_;
    /// <summary>
    ///上次免费刷新时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "free_count" field.</summary>
    public const int FreeCountFieldNumber = 7;
    private uint freeCount_;
    /// <summary>
    ///免费次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FreeCount {
      get { return freeCount_; }
      set {
        freeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShieldBreakTime != other.ShieldBreakTime) return false;
      if (!object.Equals(RankData, other.RankData)) return false;
      if (!object.Equals(HistoryList, other.HistoryList)) return false;
      if(!coordList_.Equals(other.coordList_)) return false;
      if (DorpSegmentTime != other.DorpSegmentTime) return false;
      if (RefreshTime != other.RefreshTime) return false;
      if (FreeCount != other.FreeCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShieldBreakTime != 0UL) hash ^= ShieldBreakTime.GetHashCode();
      if (rankData_ != null) hash ^= RankData.GetHashCode();
      if (historyList_ != null) hash ^= HistoryList.GetHashCode();
      hash ^= coordList_.GetHashCode();
      if (DorpSegmentTime != 0UL) hash ^= DorpSegmentTime.GetHashCode();
      if (RefreshTime != 0UL) hash ^= RefreshTime.GetHashCode();
      if (FreeCount != 0) hash ^= FreeCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShieldBreakTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ShieldBreakTime);
      }
      if (rankData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RankData);
      }
      if (historyList_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(HistoryList);
      }
      coordList_.WriteTo(output, _repeated_coordList_codec);
      if (DorpSegmentTime != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(DorpSegmentTime);
      }
      if (RefreshTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RefreshTime);
      }
      if (FreeCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(FreeCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShieldBreakTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ShieldBreakTime);
      }
      if (rankData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankData);
      }
      if (historyList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HistoryList);
      }
      size += coordList_.CalculateSize(_repeated_coordList_codec);
      if (DorpSegmentTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DorpSegmentTime);
      }
      if (RefreshTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RefreshTime);
      }
      if (FreeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FreeCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_data other) {
      if (other == null) {
        return;
      }
      if (other.ShieldBreakTime != 0UL) {
        ShieldBreakTime = other.ShieldBreakTime;
      }
      if (other.rankData_ != null) {
        if (rankData_ == null) {
          rankData_ = new global::GameProto.Plunder_rank_data();
        }
        RankData.MergeFrom(other.RankData);
      }
      if (other.historyList_ != null) {
        if (historyList_ == null) {
          historyList_ = new global::GameProto.Plunder_history_list();
        }
        HistoryList.MergeFrom(other.HistoryList);
      }
      coordList_.Add(other.coordList_);
      if (other.DorpSegmentTime != 0UL) {
        DorpSegmentTime = other.DorpSegmentTime;
      }
      if (other.RefreshTime != 0UL) {
        RefreshTime = other.RefreshTime;
      }
      if (other.FreeCount != 0) {
        FreeCount = other.FreeCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShieldBreakTime = input.ReadUInt64();
            break;
          }
          case 18: {
            if (rankData_ == null) {
              rankData_ = new global::GameProto.Plunder_rank_data();
            }
            input.ReadMessage(rankData_);
            break;
          }
          case 26: {
            if (historyList_ == null) {
              historyList_ = new global::GameProto.Plunder_history_list();
            }
            input.ReadMessage(historyList_);
            break;
          }
          case 34: {
            coordList_.AddEntriesFrom(input, _repeated_coordList_codec);
            break;
          }
          case 40: {
            DorpSegmentTime = input.ReadUInt64();
            break;
          }
          case 48: {
            RefreshTime = input.ReadUInt64();
            break;
          }
          case 56: {
            FreeCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Plunder_history_list : pb::IMessage<Plunder_history_list> {
    private static readonly pb::MessageParser<Plunder_history_list> _parser = new pb::MessageParser<Plunder_history_list>(() => new Plunder_history_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_history_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_history_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_history_list(Plunder_history_list other) : this() {
      historyInfo_ = other.historyInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_history_list Clone() {
      return new Plunder_history_list(this);
    }

    /// <summary>Field number for the "history_info" field.</summary>
    public const int HistoryInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Plunder_history> _repeated_historyInfo_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Plunder_history.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Plunder_history> historyInfo_ = new pbc::RepeatedField<global::GameProto.Plunder_history>();
    /// <summary>
    ///掠夺记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Plunder_history> HistoryInfo {
      get { return historyInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_history_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_history_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!historyInfo_.Equals(other.historyInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= historyInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      historyInfo_.WriteTo(output, _repeated_historyInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += historyInfo_.CalculateSize(_repeated_historyInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_history_list other) {
      if (other == null) {
        return;
      }
      historyInfo_.Add(other.historyInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            historyInfo_.AddEntriesFrom(input, _repeated_historyInfo_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///单个宝箱信息
  /// </summary>
  public sealed partial class Treasure_box_info : pb::IMessage<Treasure_box_info> {
    private static readonly pb::MessageParser<Treasure_box_info> _parser = new pb::MessageParser<Treasure_box_info>(() => new Treasure_box_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Treasure_box_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Treasure_box_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Treasure_box_info(Treasure_box_info other) : this() {
      boxId_ = other.boxId_;
      configIndex_ = other.configIndex_;
      status_ = other.status_;
      finishTime_ = other.finishTime_;
      isEmpty_ = other.isEmpty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Treasure_box_info Clone() {
      return new Treasure_box_info(this);
    }

    /// <summary>Field number for the "box_id" field.</summary>
    public const int BoxIdFieldNumber = 1;
    private uint boxId_;
    /// <summary>
    ///宝箱唯一id 服务端会对客户端关卡带回来的宝箱id进行验证
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxId {
      get { return boxId_; }
      set {
        boxId_ = value;
      }
    }

    /// <summary>Field number for the "config_index" field.</summary>
    public const int ConfigIndexFieldNumber = 2;
    private uint configIndex_;
    /// <summary>
    ///各种宝箱在配置表中的index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConfigIndex {
      get { return configIndex_; }
      set {
        configIndex_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::GameProto.Treasure_box_status status_ = 0;
    /// <summary>
    ///宝箱状态 每日宝箱创建时便是WAIT状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Treasure_box_status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "finish_time" field.</summary>
    public const int FinishTimeFieldNumber = 4;
    private ulong finishTime_;
    /// <summary>
    ///只有staus 为 wait时，finish_time有意义,会被赋值,其他状态,finish_time会被清理掉
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FinishTime {
      get { return finishTime_; }
      set {
        finishTime_ = value;
      }
    }

    /// <summary>Field number for the "is_empty" field.</summary>
    public const int IsEmptyFieldNumber = 5;
    private bool isEmpty_;
    /// <summary>
    ///是否空闲 标志该宝箱已经被打开
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEmpty {
      get { return isEmpty_; }
      set {
        isEmpty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Treasure_box_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Treasure_box_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BoxId != other.BoxId) return false;
      if (ConfigIndex != other.ConfigIndex) return false;
      if (Status != other.Status) return false;
      if (FinishTime != other.FinishTime) return false;
      if (IsEmpty != other.IsEmpty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BoxId != 0) hash ^= BoxId.GetHashCode();
      if (ConfigIndex != 0) hash ^= ConfigIndex.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (FinishTime != 0UL) hash ^= FinishTime.GetHashCode();
      if (IsEmpty != false) hash ^= IsEmpty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BoxId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BoxId);
      }
      if (ConfigIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ConfigIndex);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (FinishTime != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FinishTime);
      }
      if (IsEmpty != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsEmpty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BoxId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxId);
      }
      if (ConfigIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigIndex);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (FinishTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FinishTime);
      }
      if (IsEmpty != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Treasure_box_info other) {
      if (other == null) {
        return;
      }
      if (other.BoxId != 0) {
        BoxId = other.BoxId;
      }
      if (other.ConfigIndex != 0) {
        ConfigIndex = other.ConfigIndex;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.FinishTime != 0UL) {
        FinishTime = other.FinishTime;
      }
      if (other.IsEmpty != false) {
        IsEmpty = other.IsEmpty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BoxId = input.ReadUInt32();
            break;
          }
          case 16: {
            ConfigIndex = input.ReadUInt32();
            break;
          }
          case 24: {
            status_ = (global::GameProto.Treasure_box_status) input.ReadEnum();
            break;
          }
          case 32: {
            FinishTime = input.ReadUInt64();
            break;
          }
          case 40: {
            IsEmpty = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///关卡宝箱数据，初始为三个宝箱，会随着VIP等级变化而变化
  /// </summary>
  public sealed partial class Level_treasure_box_info : pb::IMessage<Level_treasure_box_info> {
    private static readonly pb::MessageParser<Level_treasure_box_info> _parser = new pb::MessageParser<Level_treasure_box_info>(() => new Level_treasure_box_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Level_treasure_box_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_treasure_box_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_treasure_box_info(Level_treasure_box_info other) : this() {
      boxList_ = other.boxList_.Clone();
      boxCount_ = other.boxCount_;
      maxBoxCount_ = other.maxBoxCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Level_treasure_box_info Clone() {
      return new Level_treasure_box_info(this);
    }

    /// <summary>Field number for the "box_list" field.</summary>
    public const int BoxListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Treasure_box_info> _repeated_boxList_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Treasure_box_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Treasure_box_info> boxList_ = new pbc::RepeatedField<global::GameProto.Treasure_box_info>();
    /// <summary>
    ///账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Treasure_box_info> BoxList {
      get { return boxList_; }
    }

    /// <summary>Field number for the "box_count" field.</summary>
    public const int BoxCountFieldNumber = 2;
    private uint boxCount_;
    /// <summary>
    ///当前宝箱数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BoxCount {
      get { return boxCount_; }
      set {
        boxCount_ = value;
      }
    }

    /// <summary>Field number for the "max_box_count" field.</summary>
    public const int MaxBoxCountFieldNumber = 3;
    private uint maxBoxCount_;
    /// <summary>
    ///允许可存储的宝箱数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxBoxCount {
      get { return maxBoxCount_; }
      set {
        maxBoxCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Level_treasure_box_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Level_treasure_box_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boxList_.Equals(other.boxList_)) return false;
      if (BoxCount != other.BoxCount) return false;
      if (MaxBoxCount != other.MaxBoxCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boxList_.GetHashCode();
      if (BoxCount != 0) hash ^= BoxCount.GetHashCode();
      if (MaxBoxCount != 0) hash ^= MaxBoxCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boxList_.WriteTo(output, _repeated_boxList_codec);
      if (BoxCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BoxCount);
      }
      if (MaxBoxCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxBoxCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boxList_.CalculateSize(_repeated_boxList_codec);
      if (BoxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BoxCount);
      }
      if (MaxBoxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBoxCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Level_treasure_box_info other) {
      if (other == null) {
        return;
      }
      boxList_.Add(other.boxList_);
      if (other.BoxCount != 0) {
        BoxCount = other.BoxCount;
      }
      if (other.MaxBoxCount != 0) {
        MaxBoxCount = other.MaxBoxCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boxList_.AddEntriesFrom(input, _repeated_boxList_codec);
            break;
          }
          case 16: {
            BoxCount = input.ReadUInt32();
            break;
          }
          case 24: {
            MaxBoxCount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家所有宝箱数据
  /// </summary>
  public sealed partial class Treasure_data : pb::IMessage<Treasure_data> {
    private static readonly pb::MessageParser<Treasure_data> _parser = new pb::MessageParser<Treasure_data>(() => new Treasure_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Treasure_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Treasure_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Treasure_data(Treasure_data other) : this() {
      DailyBox = other.dailyBox_ != null ? other.DailyBox.Clone() : null;
      LevelBox = other.levelBox_ != null ? other.LevelBox.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Treasure_data Clone() {
      return new Treasure_data(this);
    }

    /// <summary>Field number for the "daily_box" field.</summary>
    public const int DailyBoxFieldNumber = 1;
    private global::GameProto.Treasure_box_info dailyBox_;
    /// <summary>
    ///每日宝箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Treasure_box_info DailyBox {
      get { return dailyBox_; }
      set {
        dailyBox_ = value;
      }
    }

    /// <summary>Field number for the "level_box" field.</summary>
    public const int LevelBoxFieldNumber = 2;
    private global::GameProto.Level_treasure_box_info levelBox_;
    /// <summary>
    ///关卡宝箱
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Level_treasure_box_info LevelBox {
      get { return levelBox_; }
      set {
        levelBox_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Treasure_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Treasure_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DailyBox, other.DailyBox)) return false;
      if (!object.Equals(LevelBox, other.LevelBox)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dailyBox_ != null) hash ^= DailyBox.GetHashCode();
      if (levelBox_ != null) hash ^= LevelBox.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dailyBox_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DailyBox);
      }
      if (levelBox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelBox);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dailyBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyBox);
      }
      if (levelBox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelBox);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Treasure_data other) {
      if (other == null) {
        return;
      }
      if (other.dailyBox_ != null) {
        if (dailyBox_ == null) {
          dailyBox_ = new global::GameProto.Treasure_box_info();
        }
        DailyBox.MergeFrom(other.DailyBox);
      }
      if (other.levelBox_ != null) {
        if (levelBox_ == null) {
          levelBox_ = new global::GameProto.Level_treasure_box_info();
        }
        LevelBox.MergeFrom(other.LevelBox);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dailyBox_ == null) {
              dailyBox_ = new global::GameProto.Treasure_box_info();
            }
            input.ReadMessage(dailyBox_);
            break;
          }
          case 18: {
            if (levelBox_ == null) {
              levelBox_ = new global::GameProto.Level_treasure_box_info();
            }
            input.ReadMessage(levelBox_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Plunder_history : pb::IMessage<Plunder_history> {
    private static readonly pb::MessageParser<Plunder_history> _parser = new pb::MessageParser<Plunder_history>(() => new Plunder_history());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_history> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_history() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_history(Plunder_history other) : this() {
      enemyId_ = other.enemyId_;
      trophy_ = other.trophy_;
      winFlag_ = other.winFlag_;
      trophyChange_ = other.trophyChange_;
      startTime_ = other.startTime_;
      PlayerData = other.playerData_ != null ? other.PlayerData.Clone() : null;
      aIFlag_ = other.aIFlag_;
      showFlag_ = other.showFlag_;
      ArmyData = other.armyData_ != null ? other.ArmyData.Clone() : null;
      level_ = other.level_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_history Clone() {
      return new Plunder_history(this);
    }

    /// <summary>Field number for the "enemy_id" field.</summary>
    public const int EnemyIdFieldNumber = 1;
    private uint enemyId_;
    /// <summary>
    ///敌方id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EnemyId {
      get { return enemyId_; }
      set {
        enemyId_ = value;
      }
    }

    /// <summary>Field number for the "trophy" field.</summary>
    public const int TrophyFieldNumber = 3;
    private uint trophy_;
    /// <summary>
    ///敌方奖杯数(战斗之前)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Trophy {
      get { return trophy_; }
      set {
        trophy_ = value;
      }
    }

    /// <summary>Field number for the "win_flag" field.</summary>
    public const int WinFlagFieldNumber = 4;
    private bool winFlag_;
    /// <summary>
    ///是否胜利              //true 胜利
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WinFlag {
      get { return winFlag_; }
      set {
        winFlag_ = value;
      }
    }

    /// <summary>Field number for the "trophy_change" field.</summary>
    public const int TrophyChangeFieldNumber = 5;
    private int trophyChange_;
    /// <summary>
    ///我方奖杯数据变更数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrophyChange {
      get { return trophyChange_; }
      set {
        trophyChange_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 6;
    private ulong startTime_;
    /// <summary>
    ///掠夺开始的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "player_data" field.</summary>
    public const int PlayerDataFieldNumber = 7;
    private global::GameProto.Player_data playerData_;
    /// <summary>
    ///基本数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Player_data PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    /// <summary>Field number for the "AI_flag" field.</summary>
    public const int AIFlagFieldNumber = 8;
    private bool aIFlag_;
    /// <summary>
    ///是否为AI              //true是ai
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AIFlag {
      get { return aIFlag_; }
      set {
        aIFlag_ = value;
      }
    }

    /// <summary>Field number for the "show_flag" field.</summary>
    public const int ShowFlagFieldNumber = 9;
    private bool showFlag_;
    /// <summary>
    ///是否已经被展示过了    //true被展示过
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowFlag {
      get { return showFlag_; }
      set {
        showFlag_ = value;
      }
    }

    /// <summary>Field number for the "army_data" field.</summary>
    public const int ArmyDataFieldNumber = 10;
    private global::GameProto.Plunder_army_data armyData_;
    /// <summary>
    ///敌方阵容 (显示的是敌方的阵容)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Plunder_army_data ArmyData {
      get { return armyData_; }
      set {
        armyData_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 11;
    private uint level_;
    /// <summary>
    ///敌方等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_history);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_history other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnemyId != other.EnemyId) return false;
      if (Trophy != other.Trophy) return false;
      if (WinFlag != other.WinFlag) return false;
      if (TrophyChange != other.TrophyChange) return false;
      if (StartTime != other.StartTime) return false;
      if (!object.Equals(PlayerData, other.PlayerData)) return false;
      if (AIFlag != other.AIFlag) return false;
      if (ShowFlag != other.ShowFlag) return false;
      if (!object.Equals(ArmyData, other.ArmyData)) return false;
      if (Level != other.Level) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnemyId != 0) hash ^= EnemyId.GetHashCode();
      if (Trophy != 0) hash ^= Trophy.GetHashCode();
      if (WinFlag != false) hash ^= WinFlag.GetHashCode();
      if (TrophyChange != 0) hash ^= TrophyChange.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (playerData_ != null) hash ^= PlayerData.GetHashCode();
      if (AIFlag != false) hash ^= AIFlag.GetHashCode();
      if (ShowFlag != false) hash ^= ShowFlag.GetHashCode();
      if (armyData_ != null) hash ^= ArmyData.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnemyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(EnemyId);
      }
      if (Trophy != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Trophy);
      }
      if (WinFlag != false) {
        output.WriteRawTag(32);
        output.WriteBool(WinFlag);
      }
      if (TrophyChange != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TrophyChange);
      }
      if (StartTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(StartTime);
      }
      if (playerData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PlayerData);
      }
      if (AIFlag != false) {
        output.WriteRawTag(64);
        output.WriteBool(AIFlag);
      }
      if (ShowFlag != false) {
        output.WriteRawTag(72);
        output.WriteBool(ShowFlag);
      }
      if (armyData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ArmyData);
      }
      if (Level != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(Level);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnemyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnemyId);
      }
      if (Trophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Trophy);
      }
      if (WinFlag != false) {
        size += 1 + 1;
      }
      if (TrophyChange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrophyChange);
      }
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      if (AIFlag != false) {
        size += 1 + 1;
      }
      if (ShowFlag != false) {
        size += 1 + 1;
      }
      if (armyData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ArmyData);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_history other) {
      if (other == null) {
        return;
      }
      if (other.EnemyId != 0) {
        EnemyId = other.EnemyId;
      }
      if (other.Trophy != 0) {
        Trophy = other.Trophy;
      }
      if (other.WinFlag != false) {
        WinFlag = other.WinFlag;
      }
      if (other.TrophyChange != 0) {
        TrophyChange = other.TrophyChange;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.playerData_ != null) {
        if (playerData_ == null) {
          playerData_ = new global::GameProto.Player_data();
        }
        PlayerData.MergeFrom(other.PlayerData);
      }
      if (other.AIFlag != false) {
        AIFlag = other.AIFlag;
      }
      if (other.ShowFlag != false) {
        ShowFlag = other.ShowFlag;
      }
      if (other.armyData_ != null) {
        if (armyData_ == null) {
          armyData_ = new global::GameProto.Plunder_army_data();
        }
        ArmyData.MergeFrom(other.ArmyData);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EnemyId = input.ReadUInt32();
            break;
          }
          case 24: {
            Trophy = input.ReadUInt32();
            break;
          }
          case 32: {
            WinFlag = input.ReadBool();
            break;
          }
          case 40: {
            TrophyChange = input.ReadInt32();
            break;
          }
          case 48: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 58: {
            if (playerData_ == null) {
              playerData_ = new global::GameProto.Player_data();
            }
            input.ReadMessage(playerData_);
            break;
          }
          case 64: {
            AIFlag = input.ReadBool();
            break;
          }
          case 72: {
            ShowFlag = input.ReadBool();
            break;
          }
          case 82: {
            if (armyData_ == null) {
              armyData_ = new global::GameProto.Plunder_army_data();
            }
            input.ReadMessage(armyData_);
            break;
          }
          case 88: {
            Level = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Map_data : pb::IMessage<Map_data> {
    private static readonly pb::MessageParser<Map_data> _parser = new pb::MessageParser<Map_data>(() => new Map_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_data(Map_data other) : this() {
      grid_ = other.grid_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_data Clone() {
      return new Map_data(this);
    }

    /// <summary>Field number for the "grid" field.</summary>
    public const int GridFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Grid_data> _repeated_grid_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Grid_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Grid_data> grid_ = new pbc::RepeatedField<global::GameProto.Grid_data>();
    /// <summary>
    ///地图格子数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Grid_data> Grid {
      get { return grid_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!grid_.Equals(other.grid_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= grid_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      grid_.WriteTo(output, _repeated_grid_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += grid_.CalculateSize(_repeated_grid_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map_data other) {
      if (other == null) {
        return;
      }
      grid_.Add(other.grid_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            grid_.AddEntriesFrom(input, _repeated_grid_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Coord : pb::IMessage<Coord> {
    private static readonly pb::MessageParser<Coord> _parser = new pb::MessageParser<Coord>(() => new Coord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Coord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coord(Coord other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Coord Clone() {
      return new Coord(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private uint x_;
    /// <summary>
    ///x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private uint y_;
    /// <summary>
    ///y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Coord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Coord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Coord other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadUInt32();
            break;
          }
          case 16: {
            Y = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Grid_data : pb::IMessage<Grid_data> {
    private static readonly pb::MessageParser<Grid_data> _parser = new pb::MessageParser<Grid_data>(() => new Grid_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Grid_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grid_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grid_data(Grid_data other) : this() {
      Coord = other.coord_ != null ? other.Coord.Clone() : null;
      state_ = other.state_;
      deadLevel_ = other.deadLevel_;
      cureCount_ = other.cureCount_;
      Terrain = other.terrain_ != null ? other.Terrain.Clone() : null;
      Entity = other.entity_ != null ? other.Entity.Clone() : null;
      seallockId_ = other.seallockId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grid_data Clone() {
      return new Grid_data(this);
    }

    /// <summary>Field number for the "coord" field.</summary>
    public const int CoordFieldNumber = 1;
    private global::GameProto.Coord coord_;
    /// <summary>
    ///坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Coord Coord {
      get { return coord_; }
      set {
        coord_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::GameProto.Grid_state state_ = 0;
    /// <summary>
    ///格子状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Grid_state State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "dead_level" field.</summary>
    public const int DeadLevelFieldNumber = 3;
    private uint deadLevel_;
    /// <summary>
    ///死地等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadLevel {
      get { return deadLevel_; }
      set {
        deadLevel_ = value;
      }
    }

    /// <summary>Field number for the "cure_count" field.</summary>
    public const int CureCountFieldNumber = 4;
    private uint cureCount_;
    /// <summary>
    ///已经治愈的数值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CureCount {
      get { return cureCount_; }
      set {
        cureCount_ = value;
      }
    }

    /// <summary>Field number for the "terrain" field.</summary>
    public const int TerrainFieldNumber = 5;
    private global::GameProto.Map_object_data terrain_;
    /// <summary>
    ///地形
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data Terrain {
      get { return terrain_; }
      set {
        terrain_ = value;
      }
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 6;
    private global::GameProto.Map_object_data entity_;
    /// <summary>
    ///地面物件
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Map_object_data Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "seallock_id" field.</summary>
    public const int SeallockIdFieldNumber = 7;
    private uint seallockId_;
    /// <summary>
    ///锁定ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SeallockId {
      get { return seallockId_; }
      set {
        seallockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Grid_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Grid_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Coord, other.Coord)) return false;
      if (State != other.State) return false;
      if (DeadLevel != other.DeadLevel) return false;
      if (CureCount != other.CureCount) return false;
      if (!object.Equals(Terrain, other.Terrain)) return false;
      if (!object.Equals(Entity, other.Entity)) return false;
      if (SeallockId != other.SeallockId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coord_ != null) hash ^= Coord.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (DeadLevel != 0) hash ^= DeadLevel.GetHashCode();
      if (CureCount != 0) hash ^= CureCount.GetHashCode();
      if (terrain_ != null) hash ^= Terrain.GetHashCode();
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (SeallockId != 0) hash ^= SeallockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coord_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Coord);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (DeadLevel != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DeadLevel);
      }
      if (CureCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CureCount);
      }
      if (terrain_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Terrain);
      }
      if (entity_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Entity);
      }
      if (SeallockId != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SeallockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Coord);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (DeadLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeadLevel);
      }
      if (CureCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CureCount);
      }
      if (terrain_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Terrain);
      }
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (SeallockId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SeallockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Grid_data other) {
      if (other == null) {
        return;
      }
      if (other.coord_ != null) {
        if (coord_ == null) {
          coord_ = new global::GameProto.Coord();
        }
        Coord.MergeFrom(other.Coord);
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.DeadLevel != 0) {
        DeadLevel = other.DeadLevel;
      }
      if (other.CureCount != 0) {
        CureCount = other.CureCount;
      }
      if (other.terrain_ != null) {
        if (terrain_ == null) {
          terrain_ = new global::GameProto.Map_object_data();
        }
        Terrain.MergeFrom(other.Terrain);
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          entity_ = new global::GameProto.Map_object_data();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.SeallockId != 0) {
        SeallockId = other.SeallockId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (coord_ == null) {
              coord_ = new global::GameProto.Coord();
            }
            input.ReadMessage(coord_);
            break;
          }
          case 16: {
            state_ = (global::GameProto.Grid_state) input.ReadEnum();
            break;
          }
          case 24: {
            DeadLevel = input.ReadUInt32();
            break;
          }
          case 32: {
            CureCount = input.ReadUInt32();
            break;
          }
          case 42: {
            if (terrain_ == null) {
              terrain_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(terrain_);
            break;
          }
          case 50: {
            if (entity_ == null) {
              entity_ = new global::GameProto.Map_object_data();
            }
            input.ReadMessage(entity_);
            break;
          }
          case 56: {
            SeallockId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Map_object_data : pb::IMessage<Map_object_data> {
    private static readonly pb::MessageParser<Map_object_data> _parser = new pb::MessageParser<Map_object_data>(() => new Map_object_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Map_object_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_object_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_object_data(Map_object_data other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      hp_ = other.hp_;
      leftTapCount_ = other.leftTapCount_;
      tapMaxMount_ = other.tapMaxMount_;
      leftCollectCount_ = other.leftCollectCount_;
      collectMaxCount_ = other.collectMaxCount_;
      leftSpawnCount_ = other.leftSpawnCount_;
      spawnMaxCount_ = other.spawnMaxCount_;
      remainAmount_ = other.remainAmount_;
      shopId_ = other.shopId_;
      includeObjects_ = other.includeObjects_.Clone();
      BuildingData = other.buildingData_ != null ? other.BuildingData.Clone() : null;
      status_ = other.status_;
      deleteTime_ = other.deleteTime_;
      deadTime_ = other.deadTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Map_object_data Clone() {
      return new Map_object_data(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///物件表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///名字（单对于龙）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 3;
    private uint hp_;
    /// <summary>
    ///剩余生命值（可摧毁物品才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "left_tap_count" field.</summary>
    public const int LeftTapCountFieldNumber = 4;
    private int leftTapCount_;
    /// <summary>
    ///剩余可点击次数（目前没有无限，但以防万一，还是用有符号整理，可点击物品才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftTapCount {
      get { return leftTapCount_; }
      set {
        leftTapCount_ = value;
      }
    }

    /// <summary>Field number for the "tap_max_mount" field.</summary>
    public const int TapMaxMountFieldNumber = 5;
    private int tapMaxMount_;
    /// <summary>
    ///最大可点击次数（目前没有无限，但以防万一，还是用有符号整理，可点击物品才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TapMaxMount {
      get { return tapMaxMount_; }
      set {
        tapMaxMount_ = value;
      }
    }

    /// <summary>Field number for the "left_collect_count" field.</summary>
    public const int LeftCollectCountFieldNumber = 6;
    private int leftCollectCount_;
    /// <summary>
    ///剩余可采集次数（-1表示无限次，可采集物品才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftCollectCount {
      get { return leftCollectCount_; }
      set {
        leftCollectCount_ = value;
      }
    }

    /// <summary>Field number for the "collect_max_count" field.</summary>
    public const int CollectMaxCountFieldNumber = 7;
    private int collectMaxCount_;
    /// <summary>
    ///最大采集次数（-1表示无限次，可采集物品才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CollectMaxCount {
      get { return collectMaxCount_; }
      set {
        collectMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "left_spawn_count" field.</summary>
    public const int LeftSpawnCountFieldNumber = 8;
    private int leftSpawnCount_;
    /// <summary>
    ///剩余自动产出次数（-1表示无限次，可衍生物品才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LeftSpawnCount {
      get { return leftSpawnCount_; }
      set {
        leftSpawnCount_ = value;
      }
    }

    /// <summary>Field number for the "spawn_max_count" field.</summary>
    public const int SpawnMaxCountFieldNumber = 9;
    private int spawnMaxCount_;
    /// <summary>
    ///最大自动产出次数（-1表示无限次，可衍生物品才有）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpawnMaxCount {
      get { return spawnMaxCount_; }
      set {
        spawnMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "remain_amount" field.</summary>
    public const int RemainAmountFieldNumber = 10;
    private uint remainAmount_;
    /// <summary>
    ///剩余数量（溢出的金币或石砖，可点击物品有动态数量属性才有该值）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemainAmount {
      get { return remainAmount_; }
      set {
        remainAmount_ = value;
      }
    }

    /// <summary>Field number for the "shop_id" field.</summary>
    public const int ShopIdFieldNumber = 11;
    private uint shopId_;
    /// <summary>
    ///建筑商店商品ID（地基特有属性）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ShopId {
      get { return shopId_; }
      set {
        shopId_ = value;
      }
    }

    /// <summary>Field number for the "include_objects" field.</summary>
    public const int IncludeObjectsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::GameProto.Map_object_data> _repeated_includeObjects_codec
        = pb::FieldCodec.ForMessage(98, global::GameProto.Map_object_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Map_object_data> includeObjects_ = new pbc::RepeatedField<global::GameProto.Map_object_data>();
    /// <summary>
    ///战利品球包含的物品;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Map_object_data> IncludeObjects {
      get { return includeObjects_; }
    }

    /// <summary>Field number for the "building_data" field.</summary>
    public const int BuildingDataFieldNumber = 13;
    private global::GameProto.Resting_building_data buildingData_;
    /// <summary>
    ///休息建筑数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Resting_building_data BuildingData {
      get { return buildingData_; }
      set {
        buildingData_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 14;
    private global::GameProto.MAP_OBJECT_STATUS status_ = 0;
    /// <summary>
    ///物体的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.MAP_OBJECT_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "delete_time" field.</summary>
    public const int DeleteTimeFieldNumber = 15;
    private ulong deleteTime_;
    /// <summary>
    ///删除时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DeleteTime {
      get { return deleteTime_; }
      set {
        deleteTime_ = value;
      }
    }

    /// <summary>Field number for the "dead_time" field.</summary>
    public const int DeadTimeFieldNumber = 16;
    private uint deadTime_;
    /// <summary>
    ///消亡时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeadTime {
      get { return deadTime_; }
      set {
        deadTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Map_object_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Map_object_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Hp != other.Hp) return false;
      if (LeftTapCount != other.LeftTapCount) return false;
      if (TapMaxMount != other.TapMaxMount) return false;
      if (LeftCollectCount != other.LeftCollectCount) return false;
      if (CollectMaxCount != other.CollectMaxCount) return false;
      if (LeftSpawnCount != other.LeftSpawnCount) return false;
      if (SpawnMaxCount != other.SpawnMaxCount) return false;
      if (RemainAmount != other.RemainAmount) return false;
      if (ShopId != other.ShopId) return false;
      if(!includeObjects_.Equals(other.includeObjects_)) return false;
      if (!object.Equals(BuildingData, other.BuildingData)) return false;
      if (Status != other.Status) return false;
      if (DeleteTime != other.DeleteTime) return false;
      if (DeadTime != other.DeadTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (LeftTapCount != 0) hash ^= LeftTapCount.GetHashCode();
      if (TapMaxMount != 0) hash ^= TapMaxMount.GetHashCode();
      if (LeftCollectCount != 0) hash ^= LeftCollectCount.GetHashCode();
      if (CollectMaxCount != 0) hash ^= CollectMaxCount.GetHashCode();
      if (LeftSpawnCount != 0) hash ^= LeftSpawnCount.GetHashCode();
      if (SpawnMaxCount != 0) hash ^= SpawnMaxCount.GetHashCode();
      if (RemainAmount != 0) hash ^= RemainAmount.GetHashCode();
      if (ShopId != 0) hash ^= ShopId.GetHashCode();
      hash ^= includeObjects_.GetHashCode();
      if (buildingData_ != null) hash ^= BuildingData.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (DeleteTime != 0UL) hash ^= DeleteTime.GetHashCode();
      if (DeadTime != 0) hash ^= DeadTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Hp != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Hp);
      }
      if (LeftTapCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LeftTapCount);
      }
      if (TapMaxMount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TapMaxMount);
      }
      if (LeftCollectCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LeftCollectCount);
      }
      if (CollectMaxCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CollectMaxCount);
      }
      if (LeftSpawnCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LeftSpawnCount);
      }
      if (SpawnMaxCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SpawnMaxCount);
      }
      if (RemainAmount != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RemainAmount);
      }
      if (ShopId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(ShopId);
      }
      includeObjects_.WriteTo(output, _repeated_includeObjects_codec);
      if (buildingData_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(BuildingData);
      }
      if (Status != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Status);
      }
      if (DeleteTime != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(DeleteTime);
      }
      if (DeadTime != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(DeadTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hp);
      }
      if (LeftTapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftTapCount);
      }
      if (TapMaxMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TapMaxMount);
      }
      if (LeftCollectCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftCollectCount);
      }
      if (CollectMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CollectMaxCount);
      }
      if (LeftSpawnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LeftSpawnCount);
      }
      if (SpawnMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpawnMaxCount);
      }
      if (RemainAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemainAmount);
      }
      if (ShopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ShopId);
      }
      size += includeObjects_.CalculateSize(_repeated_includeObjects_codec);
      if (buildingData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BuildingData);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (DeleteTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeleteTime);
      }
      if (DeadTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DeadTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Map_object_data other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.LeftTapCount != 0) {
        LeftTapCount = other.LeftTapCount;
      }
      if (other.TapMaxMount != 0) {
        TapMaxMount = other.TapMaxMount;
      }
      if (other.LeftCollectCount != 0) {
        LeftCollectCount = other.LeftCollectCount;
      }
      if (other.CollectMaxCount != 0) {
        CollectMaxCount = other.CollectMaxCount;
      }
      if (other.LeftSpawnCount != 0) {
        LeftSpawnCount = other.LeftSpawnCount;
      }
      if (other.SpawnMaxCount != 0) {
        SpawnMaxCount = other.SpawnMaxCount;
      }
      if (other.RemainAmount != 0) {
        RemainAmount = other.RemainAmount;
      }
      if (other.ShopId != 0) {
        ShopId = other.ShopId;
      }
      includeObjects_.Add(other.includeObjects_);
      if (other.buildingData_ != null) {
        if (buildingData_ == null) {
          buildingData_ = new global::GameProto.Resting_building_data();
        }
        BuildingData.MergeFrom(other.BuildingData);
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.DeleteTime != 0UL) {
        DeleteTime = other.DeleteTime;
      }
      if (other.DeadTime != 0) {
        DeadTime = other.DeadTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Hp = input.ReadUInt32();
            break;
          }
          case 32: {
            LeftTapCount = input.ReadInt32();
            break;
          }
          case 40: {
            TapMaxMount = input.ReadInt32();
            break;
          }
          case 48: {
            LeftCollectCount = input.ReadInt32();
            break;
          }
          case 56: {
            CollectMaxCount = input.ReadInt32();
            break;
          }
          case 64: {
            LeftSpawnCount = input.ReadInt32();
            break;
          }
          case 72: {
            SpawnMaxCount = input.ReadInt32();
            break;
          }
          case 80: {
            RemainAmount = input.ReadUInt32();
            break;
          }
          case 88: {
            ShopId = input.ReadUInt32();
            break;
          }
          case 98: {
            includeObjects_.AddEntriesFrom(input, _repeated_includeObjects_codec);
            break;
          }
          case 106: {
            if (buildingData_ == null) {
              buildingData_ = new global::GameProto.Resting_building_data();
            }
            input.ReadMessage(buildingData_);
            break;
          }
          case 112: {
            status_ = (global::GameProto.MAP_OBJECT_STATUS) input.ReadEnum();
            break;
          }
          case 120: {
            DeleteTime = input.ReadUInt64();
            break;
          }
          case 128: {
            DeadTime = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Resting_building_data : pb::IMessage<Resting_building_data> {
    private static readonly pb::MessageParser<Resting_building_data> _parser = new pb::MessageParser<Resting_building_data>(() => new Resting_building_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resting_building_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resting_building_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resting_building_data(Resting_building_data other) : this() {
      timestamp_ = other.timestamp_;
      monsterList_ = other.monsterList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resting_building_data Clone() {
      return new Resting_building_data(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "monster_list" field.</summary>
    public const int MonsterListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Monster_identity_data> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Monster_identity_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_identity_data> monsterList_ = new pbc::RepeatedField<global::GameProto.Monster_identity_data>();
    /// <summary>
    ///建筑中休息的龙
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_identity_data> MonsterList {
      get { return monsterList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resting_building_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resting_building_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if(!monsterList_.Equals(other.monsterList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      hash ^= monsterList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resting_building_data other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      monsterList_.Add(other.monsterList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///任务数据
  /// </summary>
  public sealed partial class Task_data : pb::IMessage<Task_data> {
    private static readonly pb::MessageParser<Task_data> _parser = new pb::MessageParser<Task_data>(() => new Task_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_data(Task_data other) : this() {
      id_ = other.id_;
      isCompleted_ = other.isCompleted_;
      finishCount_ = other.finishCount_;
      reward_ = other.reward_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_data Clone() {
      return new Task_data(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///任务id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "is_completed" field.</summary>
    public const int IsCompletedFieldNumber = 2;
    private bool isCompleted_;
    /// <summary>
    ///是否完成
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCompleted {
      get { return isCompleted_; }
      set {
        isCompleted_ = value;
      }
    }

    /// <summary>Field number for the "finish_count" field.</summary>
    public const int FinishCountFieldNumber = 3;
    private uint finishCount_;
    /// <summary>
    ///任务完成进度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishCount {
      get { return finishCount_; }
      set {
        finishCount_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 4;
    private uint reward_;
    /// <summary>
    ///任务的奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsCompleted != other.IsCompleted) return false;
      if (FinishCount != other.FinishCount) return false;
      if (Reward != other.Reward) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsCompleted != false) hash ^= IsCompleted.GetHashCode();
      if (FinishCount != 0) hash ^= FinishCount.GetHashCode();
      if (Reward != 0) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (IsCompleted != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsCompleted);
      }
      if (FinishCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FinishCount);
      }
      if (Reward != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (IsCompleted != false) {
        size += 1 + 1;
      }
      if (FinishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishCount);
      }
      if (Reward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_data other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsCompleted != false) {
        IsCompleted = other.IsCompleted;
      }
      if (other.FinishCount != 0) {
        FinishCount = other.FinishCount;
      }
      if (other.Reward != 0) {
        Reward = other.Reward;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            IsCompleted = input.ReadBool();
            break;
          }
          case 24: {
            FinishCount = input.ReadUInt32();
            break;
          }
          case 32: {
            Reward = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Plunder_army_data : pb::IMessage<Plunder_army_data> {
    private static readonly pb::MessageParser<Plunder_army_data> _parser = new pb::MessageParser<Plunder_army_data>(() => new Plunder_army_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_army_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_army_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_army_data(Plunder_army_data other) : this() {
      attackArmy_ = other.attackArmy_.Clone();
      defenseArmy_ = other.defenseArmy_.Clone();
      attackPower_ = other.attackPower_;
      defenPower_ = other.defenPower_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_army_data Clone() {
      return new Plunder_army_data(this);
    }

    /// <summary>Field number for the "attack_army" field.</summary>
    public const int AttackArmyFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Monster_data> _repeated_attackArmy_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_data> attackArmy_ = new pbc::RepeatedField<global::GameProto.Monster_data>();
    /// <summary>
    ///进攻阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_data> AttackArmy {
      get { return attackArmy_; }
    }

    /// <summary>Field number for the "defense_army" field.</summary>
    public const int DefenseArmyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Monster_data> _repeated_defenseArmy_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Monster_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monster_data> defenseArmy_ = new pbc::RepeatedField<global::GameProto.Monster_data>();
    /// <summary>
    ///防守阵容
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monster_data> DefenseArmy {
      get { return defenseArmy_; }
    }

    /// <summary>Field number for the "attack_power" field.</summary>
    public const int AttackPowerFieldNumber = 3;
    private uint attackPower_;
    /// <summary>
    ///进攻战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AttackPower {
      get { return attackPower_; }
      set {
        attackPower_ = value;
      }
    }

    /// <summary>Field number for the "defen_power" field.</summary>
    public const int DefenPowerFieldNumber = 4;
    private uint defenPower_;
    /// <summary>
    ///防守战力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefenPower {
      get { return defenPower_; }
      set {
        defenPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_army_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_army_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attackArmy_.Equals(other.attackArmy_)) return false;
      if(!defenseArmy_.Equals(other.defenseArmy_)) return false;
      if (AttackPower != other.AttackPower) return false;
      if (DefenPower != other.DefenPower) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attackArmy_.GetHashCode();
      hash ^= defenseArmy_.GetHashCode();
      if (AttackPower != 0) hash ^= AttackPower.GetHashCode();
      if (DefenPower != 0) hash ^= DefenPower.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attackArmy_.WriteTo(output, _repeated_attackArmy_codec);
      defenseArmy_.WriteTo(output, _repeated_defenseArmy_codec);
      if (AttackPower != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AttackPower);
      }
      if (DefenPower != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DefenPower);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attackArmy_.CalculateSize(_repeated_attackArmy_codec);
      size += defenseArmy_.CalculateSize(_repeated_defenseArmy_codec);
      if (AttackPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AttackPower);
      }
      if (DefenPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefenPower);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_army_data other) {
      if (other == null) {
        return;
      }
      attackArmy_.Add(other.attackArmy_);
      defenseArmy_.Add(other.defenseArmy_);
      if (other.AttackPower != 0) {
        AttackPower = other.AttackPower;
      }
      if (other.DefenPower != 0) {
        DefenPower = other.DefenPower;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attackArmy_.AddEntriesFrom(input, _repeated_attackArmy_codec);
            break;
          }
          case 18: {
            defenseArmy_.AddEntriesFrom(input, _repeated_defenseArmy_codec);
            break;
          }
          case 24: {
            AttackPower = input.ReadUInt32();
            break;
          }
          case 32: {
            DefenPower = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Plunder_rank_data : pb::IMessage<Plunder_rank_data> {
    private static readonly pb::MessageParser<Plunder_rank_data> _parser = new pb::MessageParser<Plunder_rank_data>(() => new Plunder_rank_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Plunder_rank_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_data(Plunder_rank_data other) : this() {
      dailyRank_ = other.dailyRank_;
      dailyRankPnge_ = other.dailyRankPnge_;
      weeklyRank_ = other.weeklyRank_;
      weeklyRankChange_ = other.weeklyRankChange_;
      trophy_ = other.trophy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Plunder_rank_data Clone() {
      return new Plunder_rank_data(this);
    }

    /// <summary>Field number for the "daily_rank" field.</summary>
    public const int DailyRankFieldNumber = 1;
    private uint dailyRank_;
    /// <summary>
    ///日赛排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DailyRank {
      get { return dailyRank_; }
      set {
        dailyRank_ = value;
      }
    }

    /// <summary>Field number for the "daily_rank_pnge" field.</summary>
    public const int DailyRankPngeFieldNumber = 2;
    private uint dailyRankPnge_;
    /// <summary>
    ///日赛排名变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DailyRankPnge {
      get { return dailyRankPnge_; }
      set {
        dailyRankPnge_ = value;
      }
    }

    /// <summary>Field number for the "weekly_rank" field.</summary>
    public const int WeeklyRankFieldNumber = 3;
    private uint weeklyRank_;
    /// <summary>
    ///周赛排名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeeklyRank {
      get { return weeklyRank_; }
      set {
        weeklyRank_ = value;
      }
    }

    /// <summary>Field number for the "weekly_rank_change" field.</summary>
    public const int WeeklyRankChangeFieldNumber = 4;
    private uint weeklyRankChange_;
    /// <summary>
    ///周赛排名变化
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WeeklyRankChange {
      get { return weeklyRankChange_; }
      set {
        weeklyRankChange_ = value;
      }
    }

    /// <summary>Field number for the "trophy" field.</summary>
    public const int TrophyFieldNumber = 5;
    private uint trophy_;
    /// <summary>
    ///只用在返回的数据中, 在GameData中是0
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Trophy {
      get { return trophy_; }
      set {
        trophy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Plunder_rank_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Plunder_rank_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DailyRank != other.DailyRank) return false;
      if (DailyRankPnge != other.DailyRankPnge) return false;
      if (WeeklyRank != other.WeeklyRank) return false;
      if (WeeklyRankChange != other.WeeklyRankChange) return false;
      if (Trophy != other.Trophy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DailyRank != 0) hash ^= DailyRank.GetHashCode();
      if (DailyRankPnge != 0) hash ^= DailyRankPnge.GetHashCode();
      if (WeeklyRank != 0) hash ^= WeeklyRank.GetHashCode();
      if (WeeklyRankChange != 0) hash ^= WeeklyRankChange.GetHashCode();
      if (Trophy != 0) hash ^= Trophy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DailyRank != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DailyRank);
      }
      if (DailyRankPnge != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DailyRankPnge);
      }
      if (WeeklyRank != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(WeeklyRank);
      }
      if (WeeklyRankChange != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(WeeklyRankChange);
      }
      if (Trophy != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Trophy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DailyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DailyRank);
      }
      if (DailyRankPnge != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DailyRankPnge);
      }
      if (WeeklyRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeeklyRank);
      }
      if (WeeklyRankChange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WeeklyRankChange);
      }
      if (Trophy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Trophy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Plunder_rank_data other) {
      if (other == null) {
        return;
      }
      if (other.DailyRank != 0) {
        DailyRank = other.DailyRank;
      }
      if (other.DailyRankPnge != 0) {
        DailyRankPnge = other.DailyRankPnge;
      }
      if (other.WeeklyRank != 0) {
        WeeklyRank = other.WeeklyRank;
      }
      if (other.WeeklyRankChange != 0) {
        WeeklyRankChange = other.WeeklyRankChange;
      }
      if (other.Trophy != 0) {
        Trophy = other.Trophy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DailyRank = input.ReadUInt32();
            break;
          }
          case 16: {
            DailyRankPnge = input.ReadUInt32();
            break;
          }
          case 24: {
            WeeklyRank = input.ReadUInt32();
            break;
          }
          case 32: {
            WeeklyRankChange = input.ReadUInt32();
            break;
          }
          case 40: {
            Trophy = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///# 商店数据
  /// </summary>
  public sealed partial class Shop_data : pb::IMessage<Shop_data> {
    private static readonly pb::MessageParser<Shop_data> _parser = new pb::MessageParser<Shop_data>(() => new Shop_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shop_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_data(Shop_data other) : this() {
      listData_ = other.listData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_data Clone() {
      return new Shop_data(this);
    }

    /// <summary>Field number for the "list_data" field.</summary>
    public const int ListDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Shop_list_data> _repeated_listData_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Shop_list_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Shop_list_data> listData_ = new pbc::RepeatedField<global::GameProto.Shop_list_data>();
    /// <summary>
    ///商店列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Shop_list_data> ListData {
      get { return listData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shop_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shop_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!listData_.Equals(other.listData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= listData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      listData_.WriteTo(output, _repeated_listData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += listData_.CalculateSize(_repeated_listData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shop_data other) {
      if (other == null) {
        return;
      }
      listData_.Add(other.listData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            listData_.AddEntriesFrom(input, _repeated_listData_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///列表信息
  /// </summary>
  public sealed partial class Shop_list_data : pb::IMessage<Shop_list_data> {
    private static readonly pb::MessageParser<Shop_list_data> _parser = new pb::MessageParser<Shop_list_data>(() => new Shop_list_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shop_list_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_list_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_list_data(Shop_list_data other) : this() {
      shopItem_ = other.shopItem_.Clone();
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_list_data Clone() {
      return new Shop_list_data(this);
    }

    /// <summary>Field number for the "shop_item" field.</summary>
    public const int ShopItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Shop_item_data> _repeated_shopItem_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Shop_item_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Shop_item_data> shopItem_ = new pbc::RepeatedField<global::GameProto.Shop_item_data>();
    /// <summary>
    ///商店数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Shop_item_data> ShopItem {
      get { return shopItem_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::GameProto.Shop_type type_ = 0;
    /// <summary>
    ///商店种类
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Shop_type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shop_list_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shop_list_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shopItem_.Equals(other.shopItem_)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shopItem_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shopItem_.WriteTo(output, _repeated_shopItem_codec);
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shopItem_.CalculateSize(_repeated_shopItem_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shop_list_data other) {
      if (other == null) {
        return;
      }
      shopItem_.Add(other.shopItem_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shopItem_.AddEntriesFrom(input, _repeated_shopItem_codec);
            break;
          }
          case 16: {
            type_ = (global::GameProto.Shop_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商品数据
  /// </summary>
  public sealed partial class Shop_item_data : pb::IMessage<Shop_item_data> {
    private static readonly pb::MessageParser<Shop_item_data> _parser = new pb::MessageParser<Shop_item_data>(() => new Shop_item_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shop_item_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_item_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_item_data(Shop_item_data other) : this() {
      id_ = other.id_;
      buyCount_ = other.buyCount_;
      state_ = other.state_;
      limitCount_ = other.limitCount_;
      limitTime_ = other.limitTime_;
      objectId_ = other.objectId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shop_item_data Clone() {
      return new Shop_item_data(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "buy_count" field.</summary>
    public const int BuyCountFieldNumber = 2;
    private uint buyCount_;
    /// <summary>
    ///购买次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BuyCount {
      get { return buyCount_; }
      set {
        buyCount_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private global::GameProto.Shop_item_state state_ = 0;
    /// <summary>
    ///商品状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Shop_item_state State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "limit_count" field.</summary>
    public const int LimitCountFieldNumber = 4;
    private uint limitCount_;
    /// <summary>
    ///限购次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LimitCount {
      get { return limitCount_; }
      set {
        limitCount_ = value;
      }
    }

    /// <summary>Field number for the "limit_time" field.</summary>
    public const int LimitTimeFieldNumber = 5;
    private ulong limitTime_;
    /// <summary>
    ///过期时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LimitTime {
      get { return limitTime_; }
      set {
        limitTime_ = value;
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 6;
    private uint objectId_;
    /// <summary>
    ///物件ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shop_item_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shop_item_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (BuyCount != other.BuyCount) return false;
      if (State != other.State) return false;
      if (LimitCount != other.LimitCount) return false;
      if (LimitTime != other.LimitTime) return false;
      if (ObjectId != other.ObjectId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (BuyCount != 0) hash ^= BuyCount.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (LimitCount != 0) hash ^= LimitCount.GetHashCode();
      if (LimitTime != 0UL) hash ^= LimitTime.GetHashCode();
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (BuyCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BuyCount);
      }
      if (State != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) State);
      }
      if (LimitCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(LimitCount);
      }
      if (LimitTime != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(LimitTime);
      }
      if (ObjectId != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ObjectId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (BuyCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BuyCount);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (LimitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitCount);
      }
      if (LimitTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LimitTime);
      }
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ObjectId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shop_item_data other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.BuyCount != 0) {
        BuyCount = other.BuyCount;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.LimitCount != 0) {
        LimitCount = other.LimitCount;
      }
      if (other.LimitTime != 0UL) {
        LimitTime = other.LimitTime;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            BuyCount = input.ReadUInt32();
            break;
          }
          case 24: {
            state_ = (global::GameProto.Shop_item_state) input.ReadEnum();
            break;
          }
          case 32: {
            LimitCount = input.ReadUInt32();
            break;
          }
          case 40: {
            LimitTime = input.ReadUInt64();
            break;
          }
          case 48: {
            ObjectId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///头像和头像框数据统计
  /// </summary>
  public sealed partial class Avatar_data : pb::IMessage<Avatar_data> {
    private static readonly pb::MessageParser<Avatar_data> _parser = new pb::MessageParser<Avatar_data>(() => new Avatar_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Avatar_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_data(Avatar_data other) : this() {
      indexData_ = other.indexData_.Clone();
      frameData_ = other.frameData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Avatar_data Clone() {
      return new Avatar_data(this);
    }

    /// <summary>Field number for the "index_data" field.</summary>
    public const int IndexDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Icon_data> _repeated_indexData_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Icon_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Icon_data> indexData_ = new pbc::RepeatedField<global::GameProto.Icon_data>();
    /// <summary>
    ///头像数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Icon_data> IndexData {
      get { return indexData_; }
    }

    /// <summary>Field number for the "frame_data" field.</summary>
    public const int FrameDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Icon_data> _repeated_frameData_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Icon_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Icon_data> frameData_ = new pbc::RepeatedField<global::GameProto.Icon_data>();
    /// <summary>
    ///头像框数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Icon_data> FrameData {
      get { return frameData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Avatar_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Avatar_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!indexData_.Equals(other.indexData_)) return false;
      if(!frameData_.Equals(other.frameData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= indexData_.GetHashCode();
      hash ^= frameData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      indexData_.WriteTo(output, _repeated_indexData_codec);
      frameData_.WriteTo(output, _repeated_frameData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += indexData_.CalculateSize(_repeated_indexData_codec);
      size += frameData_.CalculateSize(_repeated_frameData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Avatar_data other) {
      if (other == null) {
        return;
      }
      indexData_.Add(other.indexData_);
      frameData_.Add(other.frameData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            indexData_.AddEntriesFrom(input, _repeated_indexData_codec);
            break;
          }
          case 18: {
            frameData_.AddEntriesFrom(input, _repeated_frameData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Icon_data : pb::IMessage<Icon_data> {
    private static readonly pb::MessageParser<Icon_data> _parser = new pb::MessageParser<Icon_data>(() => new Icon_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Icon_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icon_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icon_data(Icon_data other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      finishFlag_ = other.finishFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Icon_data Clone() {
      return new Icon_data(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "finish_flag" field.</summary>
    public const int FinishFlagFieldNumber = 3;
    private bool finishFlag_;
    /// <summary>
    ///完成标记
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FinishFlag {
      get { return finishFlag_; }
      set {
        finishFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Icon_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Icon_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      if (FinishFlag != other.FinishFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (FinishFlag != false) hash ^= FinishFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (FinishFlag != false) {
        output.WriteRawTag(24);
        output.WriteBool(FinishFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (FinishFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Icon_data other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.FinishFlag != false) {
        FinishFlag = other.FinishFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
          case 24: {
            FinishFlag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vip_reward_data : pb::IMessage<Vip_reward_data> {
    private static readonly pb::MessageParser<Vip_reward_data> _parser = new pb::MessageParser<Vip_reward_data>(() => new Vip_reward_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vip_reward_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_reward_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_reward_data(Vip_reward_data other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_reward_data Clone() {
      return new Vip_reward_data(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> list_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///vip奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vip_reward_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vip_reward_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vip_reward_data other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///通用的物品id和数量结构
  /// </summary>
  public sealed partial class Common_item : pb::IMessage<Common_item> {
    private static readonly pb::MessageParser<Common_item> _parser = new pb::MessageParser<Common_item>(() => new Common_item());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Common_item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common_item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common_item(Common_item other) : this() {
      id_ = other.id_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Common_item Clone() {
      return new Common_item(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Common_item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Common_item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Common_item other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///商店数据
  /// </summary>
  public sealed partial class Vip_shop_data : pb::IMessage<Vip_shop_data> {
    private static readonly pb::MessageParser<Vip_shop_data> _parser = new pb::MessageParser<Vip_shop_data>(() => new Vip_shop_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vip_shop_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_shop_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_shop_data(Vip_shop_data other) : this() {
      refreshTime_ = other.refreshTime_;
      list_ = other.list_.Clone();
      refreshMount_ = other.refreshMount_;
      useDiamondCardinalMount_ = other.useDiamondCardinalMount_;
      refreshAllMount_ = other.refreshAllMount_;
      lockAnimationStartIndex_ = other.lockAnimationStartIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_shop_data Clone() {
      return new Vip_shop_data(this);
    }

    /// <summary>Field number for the "refresh_time" field.</summary>
    public const int RefreshTimeFieldNumber = 1;
    private ulong refreshTime_;
    /// <summary>
    ///商店刷新的时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Vip_shop_info> _repeated_list_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Vip_shop_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Vip_shop_info> list_ = new pbc::RepeatedField<global::GameProto.Vip_shop_info>();
    /// <summary>
    ///商店列表数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Vip_shop_info> List {
      get { return list_; }
    }

    /// <summary>Field number for the "refresh_mount" field.</summary>
    public const int RefreshMountFieldNumber = 3;
    private uint refreshMount_;
    /// <summary>
    ///当前玩家刷新的次数(出一次史诗商品后归零)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshMount {
      get { return refreshMount_; }
      set {
        refreshMount_ = value;
      }
    }

    /// <summary>Field number for the "use_diamond_cardinal_mount" field.</summary>
    public const int UseDiamondCardinalMountFieldNumber = 4;
    private uint useDiamondCardinalMount_;
    /// <summary>
    ///刷新钻石的基数（在玩家免费刷新一次以后）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UseDiamondCardinalMount {
      get { return useDiamondCardinalMount_; }
      set {
        useDiamondCardinalMount_ = value;
      }
    }

    /// <summary>Field number for the "refresh_all_mount" field.</summary>
    public const int RefreshAllMountFieldNumber = 5;
    private uint refreshAllMount_;
    /// <summary>
    ///当前玩家刷新的次数(10次刷新计时)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RefreshAllMount {
      get { return refreshAllMount_; }
      set {
        refreshAllMount_ = value;
      }
    }

    /// <summary>Field number for the "lock_animation_start_index" field.</summary>
    public const int LockAnimationStartIndexFieldNumber = 6;
    private uint lockAnimationStartIndex_;
    /// <summary>
    ///解锁动画开始的索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LockAnimationStartIndex {
      get { return lockAnimationStartIndex_; }
      set {
        lockAnimationStartIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vip_shop_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vip_shop_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefreshTime != other.RefreshTime) return false;
      if(!list_.Equals(other.list_)) return false;
      if (RefreshMount != other.RefreshMount) return false;
      if (UseDiamondCardinalMount != other.UseDiamondCardinalMount) return false;
      if (RefreshAllMount != other.RefreshAllMount) return false;
      if (LockAnimationStartIndex != other.LockAnimationStartIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefreshTime != 0UL) hash ^= RefreshTime.GetHashCode();
      hash ^= list_.GetHashCode();
      if (RefreshMount != 0) hash ^= RefreshMount.GetHashCode();
      if (UseDiamondCardinalMount != 0) hash ^= UseDiamondCardinalMount.GetHashCode();
      if (RefreshAllMount != 0) hash ^= RefreshAllMount.GetHashCode();
      if (LockAnimationStartIndex != 0) hash ^= LockAnimationStartIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefreshTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RefreshTime);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (RefreshMount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(RefreshMount);
      }
      if (UseDiamondCardinalMount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UseDiamondCardinalMount);
      }
      if (RefreshAllMount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RefreshAllMount);
      }
      if (LockAnimationStartIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(LockAnimationStartIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefreshTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RefreshTime);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (RefreshMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshMount);
      }
      if (UseDiamondCardinalMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseDiamondCardinalMount);
      }
      if (RefreshAllMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RefreshAllMount);
      }
      if (LockAnimationStartIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LockAnimationStartIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vip_shop_data other) {
      if (other == null) {
        return;
      }
      if (other.RefreshTime != 0UL) {
        RefreshTime = other.RefreshTime;
      }
      list_.Add(other.list_);
      if (other.RefreshMount != 0) {
        RefreshMount = other.RefreshMount;
      }
      if (other.UseDiamondCardinalMount != 0) {
        UseDiamondCardinalMount = other.UseDiamondCardinalMount;
      }
      if (other.RefreshAllMount != 0) {
        RefreshAllMount = other.RefreshAllMount;
      }
      if (other.LockAnimationStartIndex != 0) {
        LockAnimationStartIndex = other.LockAnimationStartIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefreshTime = input.ReadUInt64();
            break;
          }
          case 18: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
          case 24: {
            RefreshMount = input.ReadUInt32();
            break;
          }
          case 32: {
            UseDiamondCardinalMount = input.ReadUInt32();
            break;
          }
          case 40: {
            RefreshAllMount = input.ReadUInt32();
            break;
          }
          case 48: {
            LockAnimationStartIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Vip商店 (商店列表单个数据)
  /// </summary>
  public sealed partial class Vip_shop_info : pb::IMessage<Vip_shop_info> {
    private static readonly pb::MessageParser<Vip_shop_info> _parser = new pb::MessageParser<Vip_shop_info>(() => new Vip_shop_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vip_shop_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_shop_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_shop_info(Vip_shop_info other) : this() {
      id_ = other.id_;
      sellFlag_ = other.sellFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_shop_info Clone() {
      return new Vip_shop_info(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///随机商店商品编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "sell_flag" field.</summary>
    public const int SellFlagFieldNumber = 2;
    private bool sellFlag_;
    /// <summary>
    ///卖出情况
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SellFlag {
      get { return sellFlag_; }
      set {
        sellFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vip_shop_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vip_shop_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SellFlag != other.SellFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SellFlag != false) hash ^= SellFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (SellFlag != false) {
        output.WriteRawTag(16);
        output.WriteBool(SellFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (SellFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vip_shop_info other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SellFlag != false) {
        SellFlag = other.SellFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            SellFlag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///vip的需要存储的数据
  /// </summary>
  public sealed partial class Vip_data : pb::IMessage<Vip_data> {
    private static readonly pb::MessageParser<Vip_data> _parser = new pb::MessageParser<Vip_data>(() => new Vip_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vip_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_data(Vip_data other) : this() {
      RewardData = other.rewardData_ != null ? other.RewardData.Clone() : null;
      ShopData = other.shopData_ != null ? other.ShopData.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vip_data Clone() {
      return new Vip_data(this);
    }

    /// <summary>Field number for the "reward_data" field.</summary>
    public const int RewardDataFieldNumber = 1;
    private global::GameProto.Vip_reward_data rewardData_;
    /// <summary>
    ///VIP奖励            
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Vip_reward_data RewardData {
      get { return rewardData_; }
      set {
        rewardData_ = value;
      }
    }

    /// <summary>Field number for the "shop_data" field.</summary>
    public const int ShopDataFieldNumber = 2;
    private global::GameProto.Vip_shop_data shopData_;
    /// <summary>
    ///VIP商店数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Vip_shop_data ShopData {
      get { return shopData_; }
      set {
        shopData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vip_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vip_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RewardData, other.RewardData)) return false;
      if (!object.Equals(ShopData, other.ShopData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rewardData_ != null) hash ^= RewardData.GetHashCode();
      if (shopData_ != null) hash ^= ShopData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rewardData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RewardData);
      }
      if (shopData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ShopData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rewardData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RewardData);
      }
      if (shopData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vip_data other) {
      if (other == null) {
        return;
      }
      if (other.rewardData_ != null) {
        if (rewardData_ == null) {
          rewardData_ = new global::GameProto.Vip_reward_data();
        }
        RewardData.MergeFrom(other.RewardData);
      }
      if (other.shopData_ != null) {
        if (shopData_ == null) {
          shopData_ = new global::GameProto.Vip_shop_data();
        }
        ShopData.MergeFrom(other.ShopData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (rewardData_ == null) {
              rewardData_ = new global::GameProto.Vip_reward_data();
            }
            input.ReadMessage(rewardData_);
            break;
          }
          case 18: {
            if (shopData_ == null) {
              shopData_ = new global::GameProto.Vip_shop_data();
            }
            input.ReadMessage(shopData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Price_pool : pb::IMessage<Price_pool> {
    private static readonly pb::MessageParser<Price_pool> _parser = new pb::MessageParser<Price_pool>(() => new Price_pool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Price_pool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price_pool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price_pool(Price_pool other) : this() {
      prizepoolType_ = other.prizepoolType_;
      finishCount_ = other.finishCount_;
      rewardDataList_ = other.rewardDataList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Price_pool Clone() {
      return new Price_pool(this);
    }

    /// <summary>Field number for the "prizepool_type" field.</summary>
    public const int PrizepoolTypeFieldNumber = 1;
    private global::GameProto.ACTIVITY_PRIZE_POOL_TYPE prizepoolType_ = 0;
    /// <summary>
    ///奖池类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ACTIVITY_PRIZE_POOL_TYPE PrizepoolType {
      get { return prizepoolType_; }
      set {
        prizepoolType_ = value;
      }
    }

    /// <summary>Field number for the "finish_count" field.</summary>
    public const int FinishCountFieldNumber = 2;
    private uint finishCount_;
    /// <summary>
    ///完成次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishCount {
      get { return finishCount_; }
      set {
        finishCount_ = value;
      }
    }

    /// <summary>Field number for the "reward_data_list" field.</summary>
    public const int RewardDataListFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_rewardDataList_codec
        = pb::FieldCodec.ForMessage(26, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> rewardDataList_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///奖励数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> RewardDataList {
      get { return rewardDataList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Price_pool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Price_pool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrizepoolType != other.PrizepoolType) return false;
      if (FinishCount != other.FinishCount) return false;
      if(!rewardDataList_.Equals(other.rewardDataList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrizepoolType != 0) hash ^= PrizepoolType.GetHashCode();
      if (FinishCount != 0) hash ^= FinishCount.GetHashCode();
      hash ^= rewardDataList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrizepoolType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PrizepoolType);
      }
      if (FinishCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(FinishCount);
      }
      rewardDataList_.WriteTo(output, _repeated_rewardDataList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrizepoolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrizepoolType);
      }
      if (FinishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishCount);
      }
      size += rewardDataList_.CalculateSize(_repeated_rewardDataList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Price_pool other) {
      if (other == null) {
        return;
      }
      if (other.PrizepoolType != 0) {
        PrizepoolType = other.PrizepoolType;
      }
      if (other.FinishCount != 0) {
        FinishCount = other.FinishCount;
      }
      rewardDataList_.Add(other.rewardDataList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            prizepoolType_ = (global::GameProto.ACTIVITY_PRIZE_POOL_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            FinishCount = input.ReadUInt32();
            break;
          }
          case 26: {
            rewardDataList_.AddEntriesFrom(input, _repeated_rewardDataList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///活动的基础数据
  /// </summary>
  public sealed partial class Activity_base_data : pb::IMessage<Activity_base_data> {
    private static readonly pb::MessageParser<Activity_base_data> _parser = new pb::MessageParser<Activity_base_data>(() => new Activity_base_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_base_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_base_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_base_data(Activity_base_data other) : this() {
      onlyId_ = other.onlyId_;
      activityType_ = other.activityType_;
      nameCn_ = other.nameCn_;
      nameEn_ = other.nameEn_;
      desCn_ = other.desCn_;
      desEn_ = other.desEn_;
      endTime_ = other.endTime_;
      startTime_ = other.startTime_;
      rechargeCode_ = other.rechargeCode_;
      discount_ = other.discount_;
      maxCount_ = other.maxCount_;
      vipExp_ = other.vipExp_;
      url_ = other.url_;
      stepId_ = other.stepId_;
      rewardDataList_ = other.rewardDataList_.Clone();
      PrizepoolData = other.prizepoolData_ != null ? other.PrizepoolData.Clone() : null;
      RandBiologySell = other.randBiologySell_ != null ? other.RandBiologySell.Clone() : null;
      priceCn_ = other.priceCn_;
      priceEn_ = other.priceEn_;
      status_ = other.status_;
      price_ = other.price_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_base_data Clone() {
      return new Activity_base_data(this);
    }

    /// <summary>Field number for the "only_id" field.</summary>
    public const int OnlyIdFieldNumber = 1;
    private uint onlyId_;
    /// <summary>
    ///活动的唯一性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlyId {
      get { return onlyId_; }
      set {
        onlyId_ = value;
      }
    }

    /// <summary>Field number for the "activity_type" field.</summary>
    public const int ActivityTypeFieldNumber = 2;
    private global::GameProto.ACTIVITY_TYPE activityType_ = 0;
    /// <summary>
    ///活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ACTIVITY_TYPE ActivityType {
      get { return activityType_; }
      set {
        activityType_ = value;
      }
    }

    /// <summary>Field number for the "name_cn" field.</summary>
    public const int NameCnFieldNumber = 3;
    private string nameCn_ = "";
    /// <summary>
    ///名称CN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameCn {
      get { return nameCn_; }
      set {
        nameCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name_en" field.</summary>
    public const int NameEnFieldNumber = 4;
    private string nameEn_ = "";
    /// <summary>
    ///名称EN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NameEn {
      get { return nameEn_; }
      set {
        nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des_cn" field.</summary>
    public const int DesCnFieldNumber = 5;
    private string desCn_ = "";
    /// <summary>
    ///描述CN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesCn {
      get { return desCn_; }
      set {
        desCn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "des_en" field.</summary>
    public const int DesEnFieldNumber = 6;
    private string desEn_ = "";
    /// <summary>
    ///描述EN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DesEn {
      get { return desEn_; }
      set {
        desEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 7;
    private ulong endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 8;
    private ulong startTime_;
    /// <summary>
    ///开始时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "recharge_code" field.</summary>
    public const int RechargeCodeFieldNumber = 9;
    private string rechargeCode_ = "";
    /// <summary>
    ///充值码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RechargeCode {
      get { return rechargeCode_; }
      set {
        rechargeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "discount" field.</summary>
    public const int DiscountFieldNumber = 10;
    private float discount_;
    /// <summary>
    ///折扣
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Discount {
      get { return discount_; }
      set {
        discount_ = value;
      }
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 12;
    private uint maxCount_;
    /// <summary>
    ///活动参与的最大数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "vip_exp" field.</summary>
    public const int VipExpFieldNumber = 13;
    private uint vipExp_;
    /// <summary>
    ///增加的vip经验值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VipExp {
      get { return vipExp_; }
      set {
        vipExp_ = value;
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 14;
    private string url_ = "";
    /// <summary>
    ///外部调用链接
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 15;
    private uint stepId_;
    /// <summary>
    ///高端区ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "reward_data_list" field.</summary>
    public const int RewardDataListFieldNumber = 16;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_rewardDataList_codec
        = pb::FieldCodec.ForMessage(130, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> rewardDataList_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///活动奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> RewardDataList {
      get { return rewardDataList_; }
    }

    /// <summary>Field number for the "prizepool_data" field.</summary>
    public const int PrizepoolDataFieldNumber = 17;
    private global::GameProto.Activity_prize_pool_data prizepoolData_;
    /// <summary>
    ///奖池活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Activity_prize_pool_data PrizepoolData {
      get { return prizepoolData_; }
      set {
        prizepoolData_ = value;
      }
    }

    /// <summary>Field number for the "rand_biology_sell" field.</summary>
    public const int RandBiologySellFieldNumber = 18;
    private global::GameProto.Activity_rand_biology_sell randBiologySell_;
    /// <summary>
    ///随机生物出售活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Activity_rand_biology_sell RandBiologySell {
      get { return randBiologySell_; }
      set {
        randBiologySell_ = value;
      }
    }

    /// <summary>Field number for the "price_cn" field.</summary>
    public const int PriceCnFieldNumber = 22;
    private float priceCn_;
    /// <summary>
    ///Activity_merge_article_data   merge_article_data           = 19;//合成物品活动数据
    ///Activity_plunder_data         plunder_data                 = 20;//掠夺活动数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PriceCn {
      get { return priceCn_; }
      set {
        priceCn_ = value;
      }
    }

    /// <summary>Field number for the "price_en" field.</summary>
    public const int PriceEnFieldNumber = 23;
    private float priceEn_;
    /// <summary>
    ///英文价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PriceEn {
      get { return priceEn_; }
      set {
        priceEn_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 24;
    private bool status_;
    /// <summary>
    ///状态(true 开启，false 关闭）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 25;
    private uint price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 26;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_base_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_base_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyId != other.OnlyId) return false;
      if (ActivityType != other.ActivityType) return false;
      if (NameCn != other.NameCn) return false;
      if (NameEn != other.NameEn) return false;
      if (DesCn != other.DesCn) return false;
      if (DesEn != other.DesEn) return false;
      if (EndTime != other.EndTime) return false;
      if (StartTime != other.StartTime) return false;
      if (RechargeCode != other.RechargeCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Discount, other.Discount)) return false;
      if (MaxCount != other.MaxCount) return false;
      if (VipExp != other.VipExp) return false;
      if (Url != other.Url) return false;
      if (StepId != other.StepId) return false;
      if(!rewardDataList_.Equals(other.rewardDataList_)) return false;
      if (!object.Equals(PrizepoolData, other.PrizepoolData)) return false;
      if (!object.Equals(RandBiologySell, other.RandBiologySell)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PriceCn, other.PriceCn)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PriceEn, other.PriceEn)) return false;
      if (Status != other.Status) return false;
      if (Price != other.Price) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyId != 0) hash ^= OnlyId.GetHashCode();
      if (ActivityType != 0) hash ^= ActivityType.GetHashCode();
      if (NameCn.Length != 0) hash ^= NameCn.GetHashCode();
      if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
      if (DesCn.Length != 0) hash ^= DesCn.GetHashCode();
      if (DesEn.Length != 0) hash ^= DesEn.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (RechargeCode.Length != 0) hash ^= RechargeCode.GetHashCode();
      if (Discount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Discount);
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (VipExp != 0) hash ^= VipExp.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (StepId != 0) hash ^= StepId.GetHashCode();
      hash ^= rewardDataList_.GetHashCode();
      if (prizepoolData_ != null) hash ^= PrizepoolData.GetHashCode();
      if (randBiologySell_ != null) hash ^= RandBiologySell.GetHashCode();
      if (PriceCn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PriceCn);
      if (PriceEn != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PriceEn);
      if (Status != false) hash ^= Status.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OnlyId);
      }
      if (ActivityType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ActivityType);
      }
      if (NameCn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NameCn);
      }
      if (NameEn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(NameEn);
      }
      if (DesCn.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DesCn);
      }
      if (DesEn.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(DesEn);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(EndTime);
      }
      if (StartTime != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(StartTime);
      }
      if (RechargeCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RechargeCode);
      }
      if (Discount != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Discount);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxCount);
      }
      if (VipExp != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(VipExp);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Url);
      }
      if (StepId != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(StepId);
      }
      rewardDataList_.WriteTo(output, _repeated_rewardDataList_codec);
      if (prizepoolData_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(PrizepoolData);
      }
      if (randBiologySell_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(RandBiologySell);
      }
      if (PriceCn != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(PriceCn);
      }
      if (PriceEn != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(PriceEn);
      }
      if (Status != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(Status);
      }
      if (Price != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(Price);
      }
      if (Count != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlyId);
      }
      if (ActivityType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivityType);
      }
      if (NameCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameCn);
      }
      if (NameEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
      }
      if (DesCn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesCn);
      }
      if (DesEn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DesEn);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (RechargeCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RechargeCode);
      }
      if (Discount != 0F) {
        size += 1 + 4;
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxCount);
      }
      if (VipExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VipExp);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (StepId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StepId);
      }
      size += rewardDataList_.CalculateSize(_repeated_rewardDataList_codec);
      if (prizepoolData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PrizepoolData);
      }
      if (randBiologySell_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RandBiologySell);
      }
      if (PriceCn != 0F) {
        size += 2 + 4;
      }
      if (PriceEn != 0F) {
        size += 2 + 4;
      }
      if (Status != false) {
        size += 2 + 1;
      }
      if (Price != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Price);
      }
      if (Count != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_base_data other) {
      if (other == null) {
        return;
      }
      if (other.OnlyId != 0) {
        OnlyId = other.OnlyId;
      }
      if (other.ActivityType != 0) {
        ActivityType = other.ActivityType;
      }
      if (other.NameCn.Length != 0) {
        NameCn = other.NameCn;
      }
      if (other.NameEn.Length != 0) {
        NameEn = other.NameEn;
      }
      if (other.DesCn.Length != 0) {
        DesCn = other.DesCn;
      }
      if (other.DesEn.Length != 0) {
        DesEn = other.DesEn;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.RechargeCode.Length != 0) {
        RechargeCode = other.RechargeCode;
      }
      if (other.Discount != 0F) {
        Discount = other.Discount;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.VipExp != 0) {
        VipExp = other.VipExp;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.StepId != 0) {
        StepId = other.StepId;
      }
      rewardDataList_.Add(other.rewardDataList_);
      if (other.prizepoolData_ != null) {
        if (prizepoolData_ == null) {
          prizepoolData_ = new global::GameProto.Activity_prize_pool_data();
        }
        PrizepoolData.MergeFrom(other.PrizepoolData);
      }
      if (other.randBiologySell_ != null) {
        if (randBiologySell_ == null) {
          randBiologySell_ = new global::GameProto.Activity_rand_biology_sell();
        }
        RandBiologySell.MergeFrom(other.RandBiologySell);
      }
      if (other.PriceCn != 0F) {
        PriceCn = other.PriceCn;
      }
      if (other.PriceEn != 0F) {
        PriceEn = other.PriceEn;
      }
      if (other.Status != false) {
        Status = other.Status;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OnlyId = input.ReadUInt32();
            break;
          }
          case 16: {
            activityType_ = (global::GameProto.ACTIVITY_TYPE) input.ReadEnum();
            break;
          }
          case 26: {
            NameCn = input.ReadString();
            break;
          }
          case 34: {
            NameEn = input.ReadString();
            break;
          }
          case 42: {
            DesCn = input.ReadString();
            break;
          }
          case 50: {
            DesEn = input.ReadString();
            break;
          }
          case 56: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 64: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 74: {
            RechargeCode = input.ReadString();
            break;
          }
          case 85: {
            Discount = input.ReadFloat();
            break;
          }
          case 96: {
            MaxCount = input.ReadUInt32();
            break;
          }
          case 104: {
            VipExp = input.ReadUInt32();
            break;
          }
          case 114: {
            Url = input.ReadString();
            break;
          }
          case 120: {
            StepId = input.ReadUInt32();
            break;
          }
          case 130: {
            rewardDataList_.AddEntriesFrom(input, _repeated_rewardDataList_codec);
            break;
          }
          case 138: {
            if (prizepoolData_ == null) {
              prizepoolData_ = new global::GameProto.Activity_prize_pool_data();
            }
            input.ReadMessage(prizepoolData_);
            break;
          }
          case 146: {
            if (randBiologySell_ == null) {
              randBiologySell_ = new global::GameProto.Activity_rand_biology_sell();
            }
            input.ReadMessage(randBiologySell_);
            break;
          }
          case 181: {
            PriceCn = input.ReadFloat();
            break;
          }
          case 189: {
            PriceEn = input.ReadFloat();
            break;
          }
          case 192: {
            Status = input.ReadBool();
            break;
          }
          case 200: {
            Price = input.ReadUInt32();
            break;
          }
          case 208: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Activity_data_list : pb::IMessage<Activity_data_list> {
    private static readonly pb::MessageParser<Activity_data_list> _parser = new pb::MessageParser<Activity_data_list>(() => new Activity_data_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_data_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_data_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_data_list(Activity_data_list other) : this() {
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_data_list Clone() {
      return new Activity_data_list(this);
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Activity_base_data> _repeated_list_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Activity_base_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Activity_base_data> list_ = new pbc::RepeatedField<global::GameProto.Activity_base_data>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Activity_base_data> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_data_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_data_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_data_list other) {
      if (other == null) {
        return;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Activity_rand_biology_sell : pb::IMessage<Activity_rand_biology_sell> {
    private static readonly pb::MessageParser<Activity_rand_biology_sell> _parser = new pb::MessageParser<Activity_rand_biology_sell>(() => new Activity_rand_biology_sell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_rand_biology_sell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_rand_biology_sell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_rand_biology_sell(Activity_rand_biology_sell other) : this() {
      level_ = other.level_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_rand_biology_sell Clone() {
      return new Activity_rand_biology_sell(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    /// <summary>
    ///生物等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private uint count_;
    /// <summary>
    ///生物数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_rand_biology_sell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_rand_biology_sell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_rand_biology_sell other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///奖池活动基础数据
  /// </summary>
  public sealed partial class Activity_prize_pool_data : pb::IMessage<Activity_prize_pool_data> {
    private static readonly pb::MessageParser<Activity_prize_pool_data> _parser = new pb::MessageParser<Activity_prize_pool_data>(() => new Activity_prize_pool_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_prize_pool_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_prize_pool_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_prize_pool_data(Activity_prize_pool_data other) : this() {
      prizepoolType_ = other.prizepoolType_;
      saveTimes_ = other.saveTimes_;
      finishCount_ = other.finishCount_;
      mergeArticleLevel_ = other.mergeArticleLevel_;
      mergeArticleId_ = other.mergeArticleId_;
      mergeArticleCount_ = other.mergeArticleCount_;
      pauseTime_ = other.pauseTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_prize_pool_data Clone() {
      return new Activity_prize_pool_data(this);
    }

    /// <summary>Field number for the "prizepool_type" field.</summary>
    public const int PrizepoolTypeFieldNumber = 1;
    private global::GameProto.ACTIVITY_PRIZE_POOL_TYPE prizepoolType_ = 0;
    /// <summary>
    ///奖池类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ACTIVITY_PRIZE_POOL_TYPE PrizepoolType {
      get { return prizepoolType_; }
      set {
        prizepoolType_ = value;
      }
    }

    /// <summary>Field number for the "save_times" field.</summary>
    public const int SaveTimesFieldNumber = 2;
    private uint saveTimes_;
    /// <summary>
    ///填充次数上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SaveTimes {
      get { return saveTimes_; }
      set {
        saveTimes_ = value;
      }
    }

    /// <summary>Field number for the "finish_count" field.</summary>
    public const int FinishCountFieldNumber = 3;
    private uint finishCount_;
    /// <summary>
    ///实际完成的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FinishCount {
      get { return finishCount_; }
      set {
        finishCount_ = value;
      }
    }

    /// <summary>Field number for the "merge_article_level" field.</summary>
    public const int MergeArticleLevelFieldNumber = 4;
    private uint mergeArticleLevel_;
    /// <summary>
    ///合成物体的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MergeArticleLevel {
      get { return mergeArticleLevel_; }
      set {
        mergeArticleLevel_ = value;
      }
    }

    /// <summary>Field number for the "merge_article_id" field.</summary>
    public const int MergeArticleIdFieldNumber = 5;
    private uint mergeArticleId_;
    /// <summary>
    ///合成物体的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MergeArticleId {
      get { return mergeArticleId_; }
      set {
        mergeArticleId_ = value;
      }
    }

    /// <summary>Field number for the "merge_article_count" field.</summary>
    public const int MergeArticleCountFieldNumber = 6;
    private uint mergeArticleCount_;
    /// <summary>
    ///合成物体的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MergeArticleCount {
      get { return mergeArticleCount_; }
      set {
        mergeArticleCount_ = value;
      }
    }

    /// <summary>Field number for the "pause_time" field.</summary>
    public const int PauseTimeFieldNumber = 7;
    private ulong pauseTime_;
    /// <summary>
    ///奖池收集有效的截至时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PauseTime {
      get { return pauseTime_; }
      set {
        pauseTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_prize_pool_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_prize_pool_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrizepoolType != other.PrizepoolType) return false;
      if (SaveTimes != other.SaveTimes) return false;
      if (FinishCount != other.FinishCount) return false;
      if (MergeArticleLevel != other.MergeArticleLevel) return false;
      if (MergeArticleId != other.MergeArticleId) return false;
      if (MergeArticleCount != other.MergeArticleCount) return false;
      if (PauseTime != other.PauseTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrizepoolType != 0) hash ^= PrizepoolType.GetHashCode();
      if (SaveTimes != 0) hash ^= SaveTimes.GetHashCode();
      if (FinishCount != 0) hash ^= FinishCount.GetHashCode();
      if (MergeArticleLevel != 0) hash ^= MergeArticleLevel.GetHashCode();
      if (MergeArticleId != 0) hash ^= MergeArticleId.GetHashCode();
      if (MergeArticleCount != 0) hash ^= MergeArticleCount.GetHashCode();
      if (PauseTime != 0UL) hash ^= PauseTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrizepoolType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PrizepoolType);
      }
      if (SaveTimes != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SaveTimes);
      }
      if (FinishCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FinishCount);
      }
      if (MergeArticleLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MergeArticleLevel);
      }
      if (MergeArticleId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MergeArticleId);
      }
      if (MergeArticleCount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MergeArticleCount);
      }
      if (PauseTime != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(PauseTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrizepoolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PrizepoolType);
      }
      if (SaveTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SaveTimes);
      }
      if (FinishCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FinishCount);
      }
      if (MergeArticleLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MergeArticleLevel);
      }
      if (MergeArticleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MergeArticleId);
      }
      if (MergeArticleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MergeArticleCount);
      }
      if (PauseTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PauseTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_prize_pool_data other) {
      if (other == null) {
        return;
      }
      if (other.PrizepoolType != 0) {
        PrizepoolType = other.PrizepoolType;
      }
      if (other.SaveTimes != 0) {
        SaveTimes = other.SaveTimes;
      }
      if (other.FinishCount != 0) {
        FinishCount = other.FinishCount;
      }
      if (other.MergeArticleLevel != 0) {
        MergeArticleLevel = other.MergeArticleLevel;
      }
      if (other.MergeArticleId != 0) {
        MergeArticleId = other.MergeArticleId;
      }
      if (other.MergeArticleCount != 0) {
        MergeArticleCount = other.MergeArticleCount;
      }
      if (other.PauseTime != 0UL) {
        PauseTime = other.PauseTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            prizepoolType_ = (global::GameProto.ACTIVITY_PRIZE_POOL_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            SaveTimes = input.ReadUInt32();
            break;
          }
          case 24: {
            FinishCount = input.ReadUInt32();
            break;
          }
          case 32: {
            MergeArticleLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            MergeArticleId = input.ReadUInt32();
            break;
          }
          case 48: {
            MergeArticleCount = input.ReadUInt32();
            break;
          }
          case 56: {
            PauseTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///合成生物基础数据（本阶段不做）
  /// </summary>
  public sealed partial class Activity_merge_monster_data : pb::IMessage<Activity_merge_monster_data> {
    private static readonly pb::MessageParser<Activity_merge_monster_data> _parser = new pb::MessageParser<Activity_merge_monster_data>(() => new Activity_merge_monster_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_merge_monster_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_merge_monster_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_merge_monster_data(Activity_merge_monster_data other) : this() {
      type_ = other.type_;
      level_ = other.level_;
      mount_ = other.mount_;
      currentmount_ = other.currentmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_merge_monster_data Clone() {
      return new Activity_merge_monster_data(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.ACTIVITY_MERGE_MONSTER_TYPE type_ = 0;
    /// <summary>
    ///合成龙的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ACTIVITY_MERGE_MONSTER_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private uint level_;
    /// <summary>
    ///合成龙的等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "mount" field.</summary>
    public const int MountFieldNumber = 3;
    private uint mount_;
    /// <summary>
    ///合成龙的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mount {
      get { return mount_; }
      set {
        mount_ = value;
      }
    }

    /// <summary>Field number for the "currentmount" field.</summary>
    public const int CurrentmountFieldNumber = 4;
    private uint currentmount_;
    /// <summary>
    ///当前完成的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Currentmount {
      get { return currentmount_; }
      set {
        currentmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_merge_monster_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_merge_monster_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (Mount != other.Mount) return false;
      if (Currentmount != other.Currentmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Mount != 0) hash ^= Mount.GetHashCode();
      if (Currentmount != 0) hash ^= Currentmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Level);
      }
      if (Mount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Mount);
      }
      if (Currentmount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Currentmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Mount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mount);
      }
      if (Currentmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Currentmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_merge_monster_data other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Mount != 0) {
        Mount = other.Mount;
      }
      if (other.Currentmount != 0) {
        Currentmount = other.Currentmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.ACTIVITY_MERGE_MONSTER_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadUInt32();
            break;
          }
          case 24: {
            Mount = input.ReadUInt32();
            break;
          }
          case 32: {
            Currentmount = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///合成物品基础数据（本阶段不做）
  /// </summary>
  public sealed partial class Activity_merge_article_data : pb::IMessage<Activity_merge_article_data> {
    private static readonly pb::MessageParser<Activity_merge_article_data> _parser = new pb::MessageParser<Activity_merge_article_data>(() => new Activity_merge_article_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_merge_article_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_merge_article_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_merge_article_data(Activity_merge_article_data other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_merge_article_data Clone() {
      return new Activity_merge_article_data(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///合成物品的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_merge_article_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_merge_article_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_merge_article_data other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///掠夺活动基础数据（本阶段不做）
  /// </summary>
  public sealed partial class Activity_plunder_data : pb::IMessage<Activity_plunder_data> {
    private static readonly pb::MessageParser<Activity_plunder_data> _parser = new pb::MessageParser<Activity_plunder_data>(() => new Activity_plunder_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Activity_plunder_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_plunder_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_plunder_data(Activity_plunder_data other) : this() {
      type_ = other.type_;
      mount_ = other.mount_;
      starMount_ = other.starMount_;
      destoryMount_ = other.destoryMount_;
      sealMount_ = other.sealMount_;
      killMount_ = other.killMount_;
      winMount_ = other.winMount_;
      plunderArticleMount_ = other.plunderArticleMount_;
      plunderArticleId_ = other.plunderArticleId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Activity_plunder_data Clone() {
      return new Activity_plunder_data(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::GameProto.ACTIVITY_PLUNDER_TYPE type_ = 0;
    /// <summary>
    ///掠夺活动类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.ACTIVITY_PLUNDER_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "mount" field.</summary>
    public const int MountFieldNumber = 2;
    private uint mount_;
    /// <summary>
    ///掠夺参与次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Mount {
      get { return mount_; }
      set {
        mount_ = value;
      }
    }

    /// <summary>Field number for the "star_mount" field.</summary>
    public const int StarMountFieldNumber = 3;
    private uint starMount_;
    /// <summary>
    ///掠夺获得的星星数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StarMount {
      get { return starMount_; }
      set {
        starMount_ = value;
      }
    }

    /// <summary>Field number for the "destory_mount" field.</summary>
    public const int DestoryMountFieldNumber = 4;
    private uint destoryMount_;
    /// <summary>
    ///掠夺的摧毁物体的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DestoryMount {
      get { return destoryMount_; }
      set {
        destoryMount_ = value;
      }
    }

    /// <summary>Field number for the "seal_mount" field.</summary>
    public const int SealMountFieldNumber = 5;
    private uint sealMount_;
    /// <summary>
    ///掠夺封印土地的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SealMount {
      get { return sealMount_; }
      set {
        sealMount_ = value;
      }
    }

    /// <summary>Field number for the "kill_mount" field.</summary>
    public const int KillMountFieldNumber = 6;
    private uint killMount_;
    /// <summary>
    ///掠夺杀死生物的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KillMount {
      get { return killMount_; }
      set {
        killMount_ = value;
      }
    }

    /// <summary>Field number for the "win_mount" field.</summary>
    public const int WinMountFieldNumber = 7;
    private uint winMount_;
    /// <summary>
    ///掠夺胜利的次数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint WinMount {
      get { return winMount_; }
      set {
        winMount_ = value;
      }
    }

    /// <summary>Field number for the "plunder_article_mount" field.</summary>
    public const int PlunderArticleMountFieldNumber = 8;
    private uint plunderArticleMount_;
    /// <summary>
    ///掠夺物品的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlunderArticleMount {
      get { return plunderArticleMount_; }
      set {
        plunderArticleMount_ = value;
      }
    }

    /// <summary>Field number for the "plunder_article_id" field.</summary>
    public const int PlunderArticleIdFieldNumber = 9;
    private uint plunderArticleId_;
    /// <summary>
    ///掠夺物品的id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlunderArticleId {
      get { return plunderArticleId_; }
      set {
        plunderArticleId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Activity_plunder_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Activity_plunder_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Mount != other.Mount) return false;
      if (StarMount != other.StarMount) return false;
      if (DestoryMount != other.DestoryMount) return false;
      if (SealMount != other.SealMount) return false;
      if (KillMount != other.KillMount) return false;
      if (WinMount != other.WinMount) return false;
      if (PlunderArticleMount != other.PlunderArticleMount) return false;
      if (PlunderArticleId != other.PlunderArticleId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Mount != 0) hash ^= Mount.GetHashCode();
      if (StarMount != 0) hash ^= StarMount.GetHashCode();
      if (DestoryMount != 0) hash ^= DestoryMount.GetHashCode();
      if (SealMount != 0) hash ^= SealMount.GetHashCode();
      if (KillMount != 0) hash ^= KillMount.GetHashCode();
      if (WinMount != 0) hash ^= WinMount.GetHashCode();
      if (PlunderArticleMount != 0) hash ^= PlunderArticleMount.GetHashCode();
      if (PlunderArticleId != 0) hash ^= PlunderArticleId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Mount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Mount);
      }
      if (StarMount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(StarMount);
      }
      if (DestoryMount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DestoryMount);
      }
      if (SealMount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SealMount);
      }
      if (KillMount != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(KillMount);
      }
      if (WinMount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(WinMount);
      }
      if (PlunderArticleMount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(PlunderArticleMount);
      }
      if (PlunderArticleId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PlunderArticleId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Mount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mount);
      }
      if (StarMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StarMount);
      }
      if (DestoryMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DestoryMount);
      }
      if (SealMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SealMount);
      }
      if (KillMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KillMount);
      }
      if (WinMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(WinMount);
      }
      if (PlunderArticleMount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlunderArticleMount);
      }
      if (PlunderArticleId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PlunderArticleId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Activity_plunder_data other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Mount != 0) {
        Mount = other.Mount;
      }
      if (other.StarMount != 0) {
        StarMount = other.StarMount;
      }
      if (other.DestoryMount != 0) {
        DestoryMount = other.DestoryMount;
      }
      if (other.SealMount != 0) {
        SealMount = other.SealMount;
      }
      if (other.KillMount != 0) {
        KillMount = other.KillMount;
      }
      if (other.WinMount != 0) {
        WinMount = other.WinMount;
      }
      if (other.PlunderArticleMount != 0) {
        PlunderArticleMount = other.PlunderArticleMount;
      }
      if (other.PlunderArticleId != 0) {
        PlunderArticleId = other.PlunderArticleId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::GameProto.ACTIVITY_PLUNDER_TYPE) input.ReadEnum();
            break;
          }
          case 16: {
            Mount = input.ReadUInt32();
            break;
          }
          case 24: {
            StarMount = input.ReadUInt32();
            break;
          }
          case 32: {
            DestoryMount = input.ReadUInt32();
            break;
          }
          case 40: {
            SealMount = input.ReadUInt32();
            break;
          }
          case 48: {
            KillMount = input.ReadUInt32();
            break;
          }
          case 56: {
            WinMount = input.ReadUInt32();
            break;
          }
          case 64: {
            PlunderArticleMount = input.ReadUInt32();
            break;
          }
          case 72: {
            PlunderArticleId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///新手福利奖励数据
  /// </summary>
  public sealed partial class Sign_in_common_data : pb::IMessage<Sign_in_common_data> {
    private static readonly pb::MessageParser<Sign_in_common_data> _parser = new pb::MessageParser<Sign_in_common_data>(() => new Sign_in_common_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Sign_in_common_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sign_in_common_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sign_in_common_data(Sign_in_common_data other) : this() {
      receiveFlag_ = other.receiveFlag_;
      reward_ = other.reward_.Clone();
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Sign_in_common_data Clone() {
      return new Sign_in_common_data(this);
    }

    /// <summary>Field number for the "receive_flag" field.</summary>
    public const int ReceiveFlagFieldNumber = 1;
    private bool receiveFlag_;
    /// <summary>
    ///领取状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveFlag {
      get { return receiveFlag_; }
      set {
        receiveFlag_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_reward_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> reward_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///允许配置多个奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> Reward {
      get { return reward_; }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 3;
    private uint count_;
    /// <summary>
    ///仅针对阶段性奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Sign_in_common_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Sign_in_common_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiveFlag != other.ReceiveFlag) return false;
      if(!reward_.Equals(other.reward_)) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiveFlag != false) hash ^= ReceiveFlag.GetHashCode();
      hash ^= reward_.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiveFlag != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReceiveFlag);
      }
      reward_.WriteTo(output, _repeated_reward_codec);
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiveFlag != false) {
        size += 1 + 1;
      }
      size += reward_.CalculateSize(_repeated_reward_codec);
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Sign_in_common_data other) {
      if (other == null) {
        return;
      }
      if (other.ReceiveFlag != false) {
        ReceiveFlag = other.ReceiveFlag;
      }
      reward_.Add(other.reward_);
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReceiveFlag = input.ReadBool();
            break;
          }
          case 18: {
            reward_.AddEntriesFrom(input, _repeated_reward_codec);
            break;
          }
          case 24: {
            Count = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///新手福利数据
  /// </summary>
  public sealed partial class Novice_welfare_data : pb::IMessage<Novice_welfare_data> {
    private static readonly pb::MessageParser<Novice_welfare_data> _parser = new pb::MessageParser<Novice_welfare_data>(() => new Novice_welfare_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Novice_welfare_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Novice_welfare_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Novice_welfare_data(Novice_welfare_data other) : this() {
      rewardList_ = other.rewardList_.Clone();
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Novice_welfare_data Clone() {
      return new Novice_welfare_data(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Sign_in_common_data> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Sign_in_common_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Sign_in_common_data> rewardList_ = new pbc::RepeatedField<global::GameProto.Sign_in_common_data>();
    /// <summary>
    ///新手福利的数据列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Sign_in_common_data> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    ///账号脱离新手的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Novice_welfare_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Novice_welfare_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Novice_welfare_data other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到数据
  /// </summary>
  public sealed partial class Daily_check_data : pb::IMessage<Daily_check_data> {
    private static readonly pb::MessageParser<Daily_check_data> _parser = new pb::MessageParser<Daily_check_data>(() => new Daily_check_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Daily_check_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_data(Daily_check_data other) : this() {
      rewardList_ = other.rewardList_.Clone();
      supplementCount_ = other.supplementCount_;
      dayOfWeek_ = other.dayOfWeek_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_data Clone() {
      return new Daily_check_data(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Sign_in_common_data> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Sign_in_common_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Sign_in_common_data> rewardList_ = new pbc::RepeatedField<global::GameProto.Sign_in_common_data>();
    /// <summary>
    ///奖励数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Sign_in_common_data> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "supplement_count" field.</summary>
    public const int SupplementCountFieldNumber = 2;
    private uint supplementCount_;
    /// <summary>
    ///剩余补充签到数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SupplementCount {
      get { return supplementCount_; }
      set {
        supplementCount_ = value;
      }
    }

    /// <summary>Field number for the "day_of_week" field.</summary>
    public const int DayOfWeekFieldNumber = 3;
    private uint dayOfWeek_;
    /// <summary>
    ///第一天是星期几 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DayOfWeek {
      get { return dayOfWeek_; }
      set {
        dayOfWeek_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private ulong timestamp_;
    /// <summary>
    ///刷新时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Daily_check_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Daily_check_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (SupplementCount != other.SupplementCount) return false;
      if (DayOfWeek != other.DayOfWeek) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (SupplementCount != 0) hash ^= SupplementCount.GetHashCode();
      if (DayOfWeek != 0) hash ^= DayOfWeek.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (SupplementCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SupplementCount);
      }
      if (DayOfWeek != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(DayOfWeek);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (SupplementCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SupplementCount);
      }
      if (DayOfWeek != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DayOfWeek);
      }
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Daily_check_data other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      if (other.SupplementCount != 0) {
        SupplementCount = other.SupplementCount;
      }
      if (other.DayOfWeek != 0) {
        DayOfWeek = other.DayOfWeek;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            SupplementCount = input.ReadUInt32();
            break;
          }
          case 24: {
            DayOfWeek = input.ReadUInt32();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日签到奖励数据
  /// </summary>
  public sealed partial class Daily_check_reward : pb::IMessage<Daily_check_reward> {
    private static readonly pb::MessageParser<Daily_check_reward> _parser = new pb::MessageParser<Daily_check_reward>(() => new Daily_check_reward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Daily_check_reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_reward(Daily_check_reward other) : this() {
      receiveFlag_ = other.receiveFlag_;
      Reward = other.reward_ != null ? other.Reward.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_reward Clone() {
      return new Daily_check_reward(this);
    }

    /// <summary>Field number for the "receive_flag" field.</summary>
    public const int ReceiveFlagFieldNumber = 1;
    private bool receiveFlag_;
    /// <summary>
    ///领取标志
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveFlag {
      get { return receiveFlag_; }
      set {
        receiveFlag_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private global::GameProto.Common_item reward_;
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Common_item Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Daily_check_reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Daily_check_reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiveFlag != other.ReceiveFlag) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiveFlag != false) hash ^= ReceiveFlag.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiveFlag != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReceiveFlag);
      }
      if (reward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiveFlag != false) {
        size += 1 + 1;
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Daily_check_reward other) {
      if (other == null) {
        return;
      }
      if (other.ReceiveFlag != false) {
        ReceiveFlag = other.ReceiveFlag;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          reward_ = new global::GameProto.Common_item();
        }
        Reward.MergeFrom(other.Reward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReceiveFlag = input.ReadBool();
            break;
          }
          case 18: {
            if (reward_ == null) {
              reward_ = new global::GameProto.Common_item();
            }
            input.ReadMessage(reward_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///签到阶段性奖励数据
  /// </summary>
  public sealed partial class Daily_check_stage_data : pb::IMessage<Daily_check_stage_data> {
    private static readonly pb::MessageParser<Daily_check_stage_data> _parser = new pb::MessageParser<Daily_check_stage_data>(() => new Daily_check_stage_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Daily_check_stage_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_stage_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_stage_data(Daily_check_stage_data other) : this() {
      rewardList_ = other.rewardList_.Clone();
      grandTotal_ = other.grandTotal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_stage_data Clone() {
      return new Daily_check_stage_data(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Sign_in_common_data> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Sign_in_common_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Sign_in_common_data> rewardList_ = new pbc::RepeatedField<global::GameProto.Sign_in_common_data>();
    /// <summary>
    ///阶段奖励数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Sign_in_common_data> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "grand_total" field.</summary>
    public const int GrandTotalFieldNumber = 2;
    private uint grandTotal_;
    /// <summary>
    ///当前签到累计天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GrandTotal {
      get { return grandTotal_; }
      set {
        grandTotal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Daily_check_stage_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Daily_check_stage_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (GrandTotal != other.GrandTotal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (GrandTotal != 0) hash ^= GrandTotal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (GrandTotal != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GrandTotal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (GrandTotal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GrandTotal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Daily_check_stage_data other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      if (other.GrandTotal != 0) {
        GrandTotal = other.GrandTotal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            GrandTotal = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///签到阶段性奖励
  /// </summary>
  public sealed partial class Daily_check_stage_reward : pb::IMessage<Daily_check_stage_reward> {
    private static readonly pb::MessageParser<Daily_check_stage_reward> _parser = new pb::MessageParser<Daily_check_stage_reward>(() => new Daily_check_stage_reward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Daily_check_stage_reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_stage_reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_stage_reward(Daily_check_stage_reward other) : this() {
      day_ = other.day_;
      receiveFlag_ = other.receiveFlag_;
      Reward = other.reward_ != null ? other.Reward.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_check_stage_reward Clone() {
      return new Daily_check_stage_reward(this);
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 1;
    private uint day_;
    /// <summary>
    ///领取需要累计天数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "receive_flag" field.</summary>
    public const int ReceiveFlagFieldNumber = 2;
    private bool receiveFlag_;
    /// <summary>
    ///领取标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveFlag {
      get { return receiveFlag_; }
      set {
        receiveFlag_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 3;
    private global::GameProto.Common_item reward_;
    /// <summary>
    ///奖励物品
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameProto.Common_item Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Daily_check_stage_reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Daily_check_stage_reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Day != other.Day) return false;
      if (ReceiveFlag != other.ReceiveFlag) return false;
      if (!object.Equals(Reward, other.Reward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Day != 0) hash ^= Day.GetHashCode();
      if (ReceiveFlag != false) hash ^= ReceiveFlag.GetHashCode();
      if (reward_ != null) hash ^= Reward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Day != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Day);
      }
      if (ReceiveFlag != false) {
        output.WriteRawTag(16);
        output.WriteBool(ReceiveFlag);
      }
      if (reward_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Reward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Day);
      }
      if (ReceiveFlag != false) {
        size += 1 + 1;
      }
      if (reward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Daily_check_stage_reward other) {
      if (other == null) {
        return;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.ReceiveFlag != false) {
        ReceiveFlag = other.ReceiveFlag;
      }
      if (other.reward_ != null) {
        if (reward_ == null) {
          reward_ = new global::GameProto.Common_item();
        }
        Reward.MergeFrom(other.Reward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Day = input.ReadUInt32();
            break;
          }
          case 16: {
            ReceiveFlag = input.ReadBool();
            break;
          }
          case 26: {
            if (reward_ == null) {
              reward_ = new global::GameProto.Common_item();
            }
            input.ReadMessage(reward_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日时间阶段性数据
  /// </summary>
  public sealed partial class Daily_time_stage_data : pb::IMessage<Daily_time_stage_data> {
    private static readonly pb::MessageParser<Daily_time_stage_data> _parser = new pb::MessageParser<Daily_time_stage_data>(() => new Daily_time_stage_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Daily_time_stage_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_time_stage_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_time_stage_data(Daily_time_stage_data other) : this() {
      rewardList_ = other.rewardList_.Clone();
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_time_stage_data Clone() {
      return new Daily_time_stage_data(this);
    }

    /// <summary>Field number for the "reward_list" field.</summary>
    public const int RewardListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Sign_in_common_data> _repeated_rewardList_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Sign_in_common_data.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Sign_in_common_data> rewardList_ = new pbc::RepeatedField<global::GameProto.Sign_in_common_data>();
    /// <summary>
    ///奖励列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Sign_in_common_data> RewardList {
      get { return rewardList_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private ulong timestamp_;
    /// <summary>
    ///下一个奖励领取的时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Daily_time_stage_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Daily_time_stage_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewardList_.Equals(other.rewardList_)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewardList_.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewardList_.WriteTo(output, _repeated_rewardList_codec);
      if (Timestamp != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewardList_.CalculateSize(_repeated_rewardList_codec);
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Daily_time_stage_data other) {
      if (other == null) {
        return;
      }
      rewardList_.Add(other.rewardList_);
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rewardList_.AddEntriesFrom(input, _repeated_rewardList_codec);
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///每日时间阶段性奖励
  /// </summary>
  public sealed partial class Daily_time_stage_reward : pb::IMessage<Daily_time_stage_reward> {
    private static readonly pb::MessageParser<Daily_time_stage_reward> _parser = new pb::MessageParser<Daily_time_stage_reward>(() => new Daily_time_stage_reward());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Daily_time_stage_reward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_time_stage_reward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_time_stage_reward(Daily_time_stage_reward other) : this() {
      receiveFlag_ = other.receiveFlag_;
      rewards_ = other.rewards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Daily_time_stage_reward Clone() {
      return new Daily_time_stage_reward(this);
    }

    /// <summary>Field number for the "receive_flag" field.</summary>
    public const int ReceiveFlagFieldNumber = 1;
    private bool receiveFlag_;
    /// <summary>
    ///领取标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveFlag {
      get { return receiveFlag_; }
      set {
        receiveFlag_ = value;
      }
    }

    /// <summary>Field number for the "rewards" field.</summary>
    public const int RewardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameProto.Common_item> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(18, global::GameProto.Common_item.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Common_item> rewards_ = new pbc::RepeatedField<global::GameProto.Common_item>();
    /// <summary>
    ///奖励
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Common_item> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Daily_time_stage_reward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Daily_time_stage_reward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReceiveFlag != other.ReceiveFlag) return false;
      if(!rewards_.Equals(other.rewards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReceiveFlag != false) hash ^= ReceiveFlag.GetHashCode();
      hash ^= rewards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiveFlag != false) {
        output.WriteRawTag(8);
        output.WriteBool(ReceiveFlag);
      }
      rewards_.WriteTo(output, _repeated_rewards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReceiveFlag != false) {
        size += 1 + 1;
      }
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Daily_time_stage_reward other) {
      if (other == null) {
        return;
      }
      if (other.ReceiveFlag != false) {
        ReceiveFlag = other.ReceiveFlag;
      }
      rewards_.Add(other.rewards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReceiveFlag = input.ReadBool();
            break;
          }
          case 18: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///月卡数据
  /// </summary>
  public sealed partial class Monthly_card_data : pb::IMessage<Monthly_card_data> {
    private static readonly pb::MessageParser<Monthly_card_data> _parser = new pb::MessageParser<Monthly_card_data>(() => new Monthly_card_data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monthly_card_data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monthly_card_data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monthly_card_data(Monthly_card_data other) : this() {
      cardInfo_ = other.cardInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monthly_card_data Clone() {
      return new Monthly_card_data(this);
    }

    /// <summary>Field number for the "card_info" field.</summary>
    public const int CardInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GameProto.Monthly_card_info> _repeated_cardInfo_codec
        = pb::FieldCodec.ForMessage(10, global::GameProto.Monthly_card_info.Parser);
    private readonly pbc::RepeatedField<global::GameProto.Monthly_card_info> cardInfo_ = new pbc::RepeatedField<global::GameProto.Monthly_card_info>();
    /// <summary>
    ///月卡数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameProto.Monthly_card_info> CardInfo {
      get { return cardInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monthly_card_data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monthly_card_data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cardInfo_.Equals(other.cardInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cardInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cardInfo_.WriteTo(output, _repeated_cardInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cardInfo_.CalculateSize(_repeated_cardInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monthly_card_data other) {
      if (other == null) {
        return;
      }
      cardInfo_.Add(other.cardInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cardInfo_.AddEntriesFrom(input, _repeated_cardInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Monthly_card_info : pb::IMessage<Monthly_card_info> {
    private static readonly pb::MessageParser<Monthly_card_info> _parser = new pb::MessageParser<Monthly_card_info>(() => new Monthly_card_info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monthly_card_info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameProto.GameDataReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monthly_card_info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monthly_card_info(Monthly_card_info other) : this() {
      id_ = other.id_;
      endTime_ = other.endTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monthly_card_info Clone() {
      return new Monthly_card_info(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private ulong endTime_;
    /// <summary>
    ///结束时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monthly_card_info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monthly_card_info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EndTime != other.EndTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monthly_card_info other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
