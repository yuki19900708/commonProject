本生产线使用相关技术为Gralde和Fastlane

大前提：
    1. 安装JDK(1.8+), Android SDK(确保4.1+到最新的稳定版之间所有的Platform都安装，Build Tool更新到最新)
    2. 设置JAVA、Android环境变量：在操作系统的环境变量中添加变量:JAVA_HOME, ANDROID_HOME(值为对应SDK的根目录), 在Path中添加可执行文件的目录: %JAVA_HOME%/bin;%ANDROID_HOME%/tools;%ANDROID_HOME%/platform-tools;
    3. Unity安装Android和iOS组件（视生产需要，Windows没有必要安装iOS组件，Mac则看是否出Android版本再安装Android组件）
    4. 在Unity的Preference -> Exteranl Tools中, Android SDK路径选取正确

一、Gradle
    1.安装
        无需提前安装，执行脚本会自动安装
        添加环境变量GRADLE_OPTS(值为-Dfile.encoding=utf-8)
    2.使用
        2.1 本步骤需只做一次: 复制tool_path_sample.gradle，将复制的文件改名为tool_path.gradle，打开，将其中的并将其中的unity_exe_path 的值改为你的unity.exe安装路径，texture_packer_exe_path改为你的TexturePacker.exe安装路径
        2.2 执行 Build_APK_*.bat(Mac上执行sh) 来一键生成apk，生成的apk将会输出到 项目根目录/output/android/app/目录下

二、Fastlane
    1.安装
        Mac: 根据官网指南执行 https://docs.fastlane.tools
        Windows: 先安装Ruby，安装Ruby后会提示安装msys2，若无，手动安装msys2，然后在msys2中安装工具链
                    pacman -S mingw-w64-x86_64-toolchain
                    pacman -S mingw-w64-i686-toolchain
                    pacman -S base-devel
                    pacman -S vim
                然后在msys2模拟的linux环境中根据官网指南执行
    2.使用
        2.1 本步骤只需要做一次（每个iOS出包分支）, 做完后将修改提交到版本控制:
            打开 fastlane/.env文件，将其中的apple_id_username和ipa_bundle_id分别改为当前ios应用对应的开发者用户名和应用包名
        2.2 本步骤只需要做一次（每个iOS出包分支）, 做完后将修改提交到版本控制:
            下载当前ios应用对应的证书和签名文件，在xcode工程中在product target的签名选项中，Debug选择开发签名，Release选择发布签名
        2.3 执行 sh Build_IPA_*.sh 来一键生成ipa，生成的ipa将会输出到 项目根目录/output/ios/app/目录下
    3.说明
        Fastlane生产线实际上复用了Gradle生产线的部分task，只是将原先需要手动xcode打包的过程简化为命令行一键生成。
        Fastlane生产线中也封装了一键生成apk的lane(因为目前Gradle已经可以一键生成了，因此这一层封装主要用来检查fastlane生线产是否搭建完成)，如需测试，可命令行执行 bundle exec fastlane genAPK config_mode:[dev/release]

三、生产线脚本说明
    1. bat后缀的脚本是给Windows用的，sh后缀的脚本是给Mac用的。
    2. bat脚本可直接双击执行，sh脚本需要在Mac上打开控制台，使用 sh *.sh 或者 ./*.sh 来执行，使用./*.sh 需要给该文件添加执行权限（chmod +x *.sh）
    3. 有些脚本bat与sh都有，有些脚本只有其中之一，是因为考虑实际使用情况与限制，比如数据生产考虑到策划机器都是windows，只提供bat；而IPA生成只能在Mac上使用，只提供sh
    4. Build_APK_Dev 一键生成apk，游戏内容为dev，允许查看日志与打开调试菜单
       Build_APK_Release 一键生成apk，游戏内容为正式版，不能查看日志，不能调试
       Build_IPA_Dev 一键生成ipa，游戏内容为dev，允许查看日志与打开调试菜单
       Build_IPA_Release 一键生成ipa，游戏内容为正式版，不能查看日志，不能调试，该版本只能用来上传Appstore，无法安装到测试机，如需测试，使用下面的脚本
       Build_IPA_ReleaseTest 一键生成ipa，游戏内容为正式版，不能查看日志，不能调试。游戏内容是发布Appstore的内容，但是可安装到测试机上进行测试
       以上脚本都可以在调用时添加 -sue 参数来跳过Unity导出（如果只是修改原生Android或iOS代码，则可以用此参数加快出包速度，因为跳过了Unity内容的build导出过程）
       
       有时候在开发时为了方便调试，我们会选择只进行Unity build导出工程并合并内容到最终的工程中，然后使用Android Studio或者Xcode调试运行程序，而不需要直接生成apk或ipa，则可以运行以下脚本
       Build_Android_Project_Dev
       Build_Android_Project_Release
       Build_iOS_Project_Dev
       Build_iOS_Project_Release